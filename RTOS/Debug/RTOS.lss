
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00002656  000026ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002656  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000896  00800130  00800130  0000271a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000271a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000274c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008e9c  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002456  00000000  00000000  0000bbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003cf6  00000000  00000000  0000e01e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001058  00000000  00000000  00011d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000254e  00000000  00000000  00012d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b9c  00000000  00000000  000152ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000660  00000000  00000000  0001be56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__vector_12>
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	97 c2       	rjmp	.+1326   	; 0x578 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	af c2       	rjmp	.+1374   	; 0x5d8 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e5       	ldi	r30, 0x56	; 86
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 33       	cpi	r26, 0x30	; 48
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	29 e0       	ldi	r18, 0x09	; 9
      b4:	a0 e3       	ldi	r26, 0x30	; 48
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3c       	cpi	r26, 0xC6	; 198
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	10 d7       	rcall	.+3616   	; 0xee4 <main>
      c4:	0c 94 29 13 	jmp	0x2652	; 0x2652 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <_Z5CRC16Phi>:
	int ret;
	Byte[0] = (unsigned char)((bit16 >> 0) & 0xff);
	Byte[1] = (unsigned char)((bit16 >> 8) & 0xff);
	ret = ((int)Byte[0] << 8) | ((int)Byte[1] << 0);
	return ret;
}
      ca:	fc 01       	movw	r30, r24
      cc:	68 0f       	add	r22, r24
      ce:	79 1f       	adc	r23, r25
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	9f ef       	ldi	r25, 0xFF	; 255
      d4:	b8 e0       	ldi	r27, 0x08	; 8
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	12 c0       	rjmp	.+36     	; 0xfe <_Z5CRC16Phi+0x34>
      da:	21 91       	ld	r18, Z+
      dc:	82 27       	eor	r24, r18
      de:	2b 2f       	mov	r18, r27
      e0:	3a 2f       	mov	r19, r26
      e2:	ac 01       	movw	r20, r24
      e4:	41 70       	andi	r20, 0x01	; 1
      e6:	55 27       	eor	r21, r21
      e8:	96 95       	lsr	r25
      ea:	87 95       	ror	r24
      ec:	45 2b       	or	r20, r21
      ee:	21 f0       	breq	.+8      	; 0xf8 <_Z5CRC16Phi+0x2e>
      f0:	41 e0       	ldi	r20, 0x01	; 1
      f2:	84 27       	eor	r24, r20
      f4:	40 ea       	ldi	r20, 0xA0	; 160
      f6:	94 27       	eor	r25, r20
      f8:	21 50       	subi	r18, 0x01	; 1
      fa:	31 09       	sbc	r19, r1
      fc:	91 f7       	brne	.-28     	; 0xe2 <_Z5CRC16Phi+0x18>
      fe:	e6 17       	cp	r30, r22
     100:	f7 07       	cpc	r31, r23
     102:	59 f7       	brne	.-42     	; 0xda <_Z5CRC16Phi+0x10>
     104:	08 95       	ret

00000106 <_Z13GetFunc01DataPcP17GetFunctionCode01S_>:
void GetFunc01Data(char* buf,GetFunctionCode01* function01,char* func1mem)
{
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	fc 01       	movw	r30, r24
     10c:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode01);
	function01->Address = *(buf + 0);
     10e:	80 81       	ld	r24, Z
     110:	88 83       	st	Y, r24
	function01->FunctionCode = *(buf + 1);
     112:	81 81       	ldd	r24, Z+1	; 0x01
     114:	89 83       	std	Y+1, r24	; 0x01
	function01->ByteCount = 0x02;
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	8a 83       	std	Y+2, r24	; 0x02
	function01->OutPutStatus1 = func1mem[*(buf + 3)];
     11a:	83 81       	ldd	r24, Z+3	; 0x03
     11c:	da 01       	movw	r26, r20
     11e:	a8 0f       	add	r26, r24
     120:	b1 1d       	adc	r27, r1
     122:	8c 91       	ld	r24, X
     124:	8b 83       	std	Y+3, r24	; 0x03
	function01->OutPutStatus2 = func1mem[(*(buf + 3)) + 1];
     126:	83 81       	ldd	r24, Z+3	; 0x03
     128:	fa 01       	movw	r30, r20
     12a:	e8 0f       	add	r30, r24
     12c:	f1 1d       	adc	r31, r1
     12e:	81 81       	ldd	r24, Z+1	; 0x01
     130:	8c 83       	std	Y+4, r24	; 0x04
	crc16 = CRC16((unsigned char*)function01, BUFSIZE - 2);
     132:	65 e0       	ldi	r22, 0x05	; 5
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	ce 01       	movw	r24, r28
     138:	c8 df       	rcall	.-112    	; 0xca <_Z5CRC16Phi>
	function01->CRC = crc16;
     13a:	9e 83       	std	Y+6, r25	; 0x06
     13c:	8d 83       	std	Y+5, r24	; 0x05
}
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <_Z13GetFunc04DataPcP17GetFunctionCode04Pi>:
void GetFunc04Data(char* buf,GetFunctionCode04* function04,int* func4mem)
{
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	dc 01       	movw	r26, r24
     14a:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode04);
	char address = 0;
	function04->Address = *(buf + 0);
     14c:	8c 91       	ld	r24, X
     14e:	88 83       	st	Y, r24
	function04->FunctionCode = *(buf + 1);
     150:	11 96       	adiw	r26, 0x01	; 1
     152:	8c 91       	ld	r24, X
     154:	11 97       	sbiw	r26, 0x01	; 1
     156:	89 83       	std	Y+1, r24	; 0x01
	address = *(buf + 3);
     158:	13 96       	adiw	r26, 0x03	; 3
     15a:	9c 91       	ld	r25, X
	function04->ByteCount = 0x02;
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	8a 83       	std	Y+2, r24	; 0x02
	function04->InputRegHi = (func4mem[address] >> 8);
     160:	e9 2f       	mov	r30, r25
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	e4 0f       	add	r30, r20
     16a:	f5 1f       	adc	r31, r21
     16c:	81 81       	ldd	r24, Z+1	; 0x01
     16e:	8b 83       	std	Y+3, r24	; 0x03
	function04->InputRegLo = func4mem[address];
     170:	80 81       	ld	r24, Z
     172:	8c 83       	std	Y+4, r24	; 0x04
	crc16 = CRC16((unsigned char*)function04, BUFSIZE - 2);
     174:	65 e0       	ldi	r22, 0x05	; 5
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	ce 01       	movw	r24, r28
     17a:	a7 df       	rcall	.-178    	; 0xca <_Z5CRC16Phi>
	function04->CRC = crc16;
     17c:	9e 83       	std	Y+6, r25	; 0x06
     17e:	8d 83       	std	Y+5, r24	; 0x05
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <_Z13GetFunc05DataPcP17GetFunctionCode05>:
void GetFunc05Data(char* buf,GetFunctionCode05* function05)
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	fc 01       	movw	r30, r24
     18c:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode05);
	function05->Address = *(buf + 0);
     18e:	80 81       	ld	r24, Z
     190:	88 83       	st	Y, r24
	function05->FunctionCode = *(buf + 1);
     192:	81 81       	ldd	r24, Z+1	; 0x01
     194:	89 83       	std	Y+1, r24	; 0x01
	function05->OutputAddressHi = *(buf + 2);
     196:	82 81       	ldd	r24, Z+2	; 0x02
     198:	8a 83       	std	Y+2, r24	; 0x02
	function05->OutputAddressLo = *(buf + 3);
     19a:	83 81       	ldd	r24, Z+3	; 0x03
     19c:	8b 83       	std	Y+3, r24	; 0x03
	function05->OutputValueHi = *(buf + 4);
     19e:	84 81       	ldd	r24, Z+4	; 0x04
     1a0:	8c 83       	std	Y+4, r24	; 0x04
	function05->OutputValueLo = *(buf + 5);
     1a2:	85 81       	ldd	r24, Z+5	; 0x05
     1a4:	8d 83       	std	Y+5, r24	; 0x05
	crc16 = CRC16((unsigned char*)function05, BUFSIZE - 2);
     1a6:	66 e0       	ldi	r22, 0x06	; 6
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	ce 01       	movw	r24, r28
     1ac:	8e df       	rcall	.-228    	; 0xca <_Z5CRC16Phi>
	function05->CRC = crc16;//to_little(crc16);
     1ae:	9f 83       	std	Y+7, r25	; 0x07
     1b0:	8e 83       	std	Y+6, r24	; 0x06
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <_Z13GetFucc10DataPcP17GetFunctionCode10Pi>:
void GetFucc10Data(char* buf,GetFunctionCode10* function10,int* func4mem)
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	fc 01       	movw	r30, r24
     1be:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode10);
	function10->address = *(buf + 0);
     1c0:	80 81       	ld	r24, Z
     1c2:	88 83       	st	Y, r24
	function10->functionCode = *(buf + 1);
     1c4:	81 81       	ldd	r24, Z+1	; 0x01
     1c6:	89 83       	std	Y+1, r24	; 0x01
	function10->startingAddressHi = *(buf + 2);
     1c8:	82 81       	ldd	r24, Z+2	; 0x02
     1ca:	8a 83       	std	Y+2, r24	; 0x02
	function10->startingAddressLo = *(buf + 3);
     1cc:	83 81       	ldd	r24, Z+3	; 0x03
     1ce:	8b 83       	std	Y+3, r24	; 0x03
	function10->quantityOfRegistersHi = *(buf + 4);
     1d0:	94 81       	ldd	r25, Z+4	; 0x04
     1d2:	9c 83       	std	Y+4, r25	; 0x04
	function10->quantityOfRegistersLo = *(buf + 5);
     1d4:	95 81       	ldd	r25, Z+5	; 0x05
     1d6:	9d 83       	std	Y+5, r25	; 0x05
	function10->byteCount = *(buf + 6);
     1d8:	96 81       	ldd	r25, Z+6	; 0x06
     1da:	9e 83       	std	Y+6, r25	; 0x06
	function10->registerValueHi = *(buf + 7);
     1dc:	27 81       	ldd	r18, Z+7	; 0x07
     1de:	2f 83       	std	Y+7, r18	; 0x07
	function10->registerValueLo = *(buf + 8);
     1e0:	90 85       	ldd	r25, Z+8	; 0x08
     1e2:	98 87       	std	Y+8, r25	; 0x08
	func4mem[function10->startingAddressLo] = ((function10->registerValueHi << 8) | (function10->registerValueLo));
     1e4:	e8 2f       	mov	r30, r24
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	ee 0f       	add	r30, r30
     1ea:	ff 1f       	adc	r31, r31
     1ec:	e4 0f       	add	r30, r20
     1ee:	f5 1f       	adc	r31, r21
     1f0:	89 2f       	mov	r24, r25
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	92 2b       	or	r25, r18
     1f6:	91 83       	std	Z+1, r25	; 0x01
     1f8:	80 83       	st	Z, r24
	crc16 = CRC16((unsigned char*)function10, BUFSIZE - 2);
     1fa:	69 e0       	ldi	r22, 0x09	; 9
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	ce 01       	movw	r24, r28
     200:	64 df       	rcall	.-312    	; 0xca <_Z5CRC16Phi>
	function10->CRC = crc16;
     202:	9a 87       	std	Y+10, r25	; 0x0a
     204:	89 87       	std	Y+9, r24	; 0x09
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <_Z18ResponseFucc10DataPcP22ResponseFunctionCode10>:
void ResponseFucc10Data(char* buf,ResponseFunctionCode10 *rfunction10)
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	fc 01       	movw	r30, r24
     212:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(ResponseFunctionCode10);
	rfunction10->address = *(buf + 0);
     214:	80 81       	ld	r24, Z
     216:	88 83       	st	Y, r24
	rfunction10->functionCode = *(buf + 1);
     218:	81 81       	ldd	r24, Z+1	; 0x01
     21a:	89 83       	std	Y+1, r24	; 0x01
	rfunction10->startingAddressHi = *(buf + 2);
     21c:	82 81       	ldd	r24, Z+2	; 0x02
     21e:	8a 83       	std	Y+2, r24	; 0x02
	rfunction10->startingAddressLo = *(buf + 3);
     220:	83 81       	ldd	r24, Z+3	; 0x03
     222:	8b 83       	std	Y+3, r24	; 0x03
	rfunction10->quantityOfRegistersHi = *(buf + 4);
     224:	84 81       	ldd	r24, Z+4	; 0x04
     226:	8c 83       	std	Y+4, r24	; 0x04
	rfunction10->quantityOfRegistersLo = *(buf + 5);
     228:	85 81       	ldd	r24, Z+5	; 0x05
     22a:	8d 83       	std	Y+5, r24	; 0x05
	crc16 = CRC16((unsigned char*)rfunction10, BUFSIZE - 2);
     22c:	66 e0       	ldi	r22, 0x06	; 6
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	ce 01       	movw	r24, r28
     232:	4b df       	rcall	.-362    	; 0xca <_Z5CRC16Phi>
	rfunction10->CRC = crc16;
     234:	9f 83       	std	Y+7, r25	; 0x07
     236:	8e 83       	std	Y+6, r24	; 0x06
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <_Z16GetExceptionCodePcP16RspExceptionCodecc>:
void GetExceptionCode(char* buf,RspExceptionCode* Exception,char adr,char Exception_code)
{
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(RspExceptionCode);
	Exception->Address = adr;
     244:	48 83       	st	Y, r20
	Exception->FunctionCode = 0x81;
     246:	81 e8       	ldi	r24, 0x81	; 129
     248:	89 83       	std	Y+1, r24	; 0x01
	Exception->ExceptionCode = Exception_code;
     24a:	2a 83       	std	Y+2, r18	; 0x02
	crc16 = CRC16((unsigned char*)Exception, BUFSIZE - 2);
     24c:	63 e0       	ldi	r22, 0x03	; 3
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	ce 01       	movw	r24, r28
     252:	3b df       	rcall	.-394    	; 0xca <_Z5CRC16Phi>
	Exception->CRC = crc16;
     254:	9c 83       	std	Y+4, r25	; 0x04
     256:	8b 83       	std	Y+3, r24	; 0x03
}
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <_Z16getFunction3DataPcP7GetData>:


//////////////////////////////
void getFunction3Data(char* buf,GetData* struct_File)
{
     25e:	dc 01       	movw	r26, r24
     260:	fb 01       	movw	r30, r22
	struct_File->Address = buf[0];
     262:	8c 91       	ld	r24, X
     264:	80 83       	st	Z, r24
	struct_File->FunctionCode = buf[1];
     266:	11 96       	adiw	r26, 0x01	; 1
     268:	8c 91       	ld	r24, X
     26a:	11 97       	sbiw	r26, 0x01	; 1
     26c:	81 83       	std	Z+1, r24	; 0x01
	struct_File->ByteLength = buf[2];
     26e:	12 96       	adiw	r26, 0x02	; 2
     270:	8c 91       	ld	r24, X
     272:	12 97       	sbiw	r26, 0x02	; 2
     274:	82 83       	std	Z+2, r24	; 0x02
	struct_File->CurrentPv = 0xff00 & (buf[3] << 8);
     276:	13 96       	adiw	r26, 0x03	; 3
     278:	2c 91       	ld	r18, X
     27a:	13 97       	sbiw	r26, 0x03	; 3
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	32 2f       	mov	r19, r18
     280:	22 27       	eor	r18, r18
     282:	34 83       	std	Z+4, r19	; 0x04
     284:	23 83       	std	Z+3, r18	; 0x03
	struct_File->CurrentPv |= buf[4];
     286:	14 96       	adiw	r26, 0x04	; 4
     288:	8c 91       	ld	r24, X
     28a:	28 2b       	or	r18, r24
     28c:	34 83       	std	Z+4, r19	; 0x04
     28e:	23 83       	std	Z+3, r18	; 0x03
     290:	08 95       	ret

00000292 <_Z15Function03WritecicP16InputOutput8Byte>:
}
void Function03Write(char Address,int Dregister,char num,InputOutput8Byte* struct_File)
{
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	e9 01       	movw	r28, r18
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(InputOutput8Byte);
	struct_File->Address = Address;
     298:	88 83       	st	Y, r24
	struct_File->FunctionCode = 3;
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char Byte[2];
	int ret;
	Byte[0] = (unsigned char)((bit16 >> 0) & 0xff);
	Byte[1] = (unsigned char)((bit16 >> 8) & 0xff);
	ret = ((int)Byte[0] << 8) | ((int)Byte[1] << 0);
     29e:	76 27       	eor	r23, r22
     2a0:	67 27       	eor	r22, r23
     2a2:	76 27       	eor	r23, r22
{
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(InputOutput8Byte);
	struct_File->Address = Address;
	struct_File->FunctionCode = 3;
	struct_File->writeData = to_big(Dregister);
     2a4:	7b 83       	std	Y+3, r23	; 0x03
     2a6:	6a 83       	std	Y+2, r22	; 0x02
	struct_File->NumberOfData = to_big(num);
     2a8:	1c 82       	std	Y+4, r1	; 0x04
     2aa:	4d 83       	std	Y+5, r20	; 0x05
	crc16 = CRC16((unsigned char*)struct_File,BUFSIZE-2);
     2ac:	66 e0       	ldi	r22, 0x06	; 6
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	c9 01       	movw	r24, r18
     2b2:	0b df       	rcall	.-490    	; 0xca <_Z5CRC16Phi>
	struct_File->CRC = crc16;
     2b4:	9f 83       	std	Y+7, r25	; 0x07
     2b6:	8e 83       	std	Y+6, r24	; 0x06
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <_Z15Function06WriteciiP16InputOutput8Byte>:
void Function06Write(char Address,int Dregister,int TempVal,InputOutput8Byte* struct_File)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	e9 01       	movw	r28, r18
		unsigned short crc16;
		unsigned int BUFSIZE = sizeof(InputOutput8Byte);
		struct_File->Address = Address;
     2c4:	88 83       	st	Y, r24
		struct_File->FunctionCode = 0x06;
     2c6:	86 e0       	ldi	r24, 0x06	; 6
     2c8:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char Byte[2];
	int ret;
	Byte[0] = (unsigned char)((bit16 >> 0) & 0xff);
	Byte[1] = (unsigned char)((bit16 >> 8) & 0xff);
	ret = ((int)Byte[0] << 8) | ((int)Byte[1] << 0);
     2ca:	76 27       	eor	r23, r22
     2cc:	67 27       	eor	r22, r23
     2ce:	76 27       	eor	r23, r22
{
		unsigned short crc16;
		unsigned int BUFSIZE = sizeof(InputOutput8Byte);
		struct_File->Address = Address;
		struct_File->FunctionCode = 0x06;
		struct_File->writeData = to_big(Dregister);
     2d0:	7b 83       	std	Y+3, r23	; 0x03
     2d2:	6a 83       	std	Y+2, r22	; 0x02
{
	unsigned char Byte[2];
	int ret;
	Byte[0] = (unsigned char)((bit16 >> 0) & 0xff);
	Byte[1] = (unsigned char)((bit16 >> 8) & 0xff);
	ret = ((int)Byte[0] << 8) | ((int)Byte[1] << 0);
     2d4:	54 27       	eor	r21, r20
     2d6:	45 27       	eor	r20, r21
     2d8:	54 27       	eor	r21, r20
		unsigned short crc16;
		unsigned int BUFSIZE = sizeof(InputOutput8Byte);
		struct_File->Address = Address;
		struct_File->FunctionCode = 0x06;
		struct_File->writeData = to_big(Dregister);
		struct_File->NumberOfData = to_big(TempVal);
     2da:	5d 83       	std	Y+5, r21	; 0x05
     2dc:	4c 83       	std	Y+4, r20	; 0x04
		crc16 = CRC16((unsigned char*)struct_File,BUFSIZE-2);
     2de:	66 e0       	ldi	r22, 0x06	; 6
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	c9 01       	movw	r24, r18
     2e4:	f2 de       	rcall	.-540    	; 0xca <_Z5CRC16Phi>
		struct_File->CRC = crc16;
     2e6:	9f 83       	std	Y+7, r25	; 0x07
     2e8:	8e 83       	std	Y+6, r24	; 0x06
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>:
	Temp = Integer % 10;	
	Temp = HexaString[Temp];
	dev->Write(this->type,Temp);

	
}
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	ec 01       	movw	r28, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	14 2f       	mov	r17, r20
     2fc:	fe 01       	movw	r30, r28
     2fe:	ea 57       	subi	r30, 0x7A	; 122
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	71 83       	std	Z+1, r23	; 0x01
     304:	60 83       	st	Z, r22
     306:	64 2f       	mov	r22, r20
     308:	21 d1       	rcall	.+578    	; 0x54c <_ZN11Dev_Manager12Driver_CheckE8Dev_type>
     30a:	88 23       	and	r24, r24
     30c:	71 f0       	breq	.+28     	; 0x32a <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type+0x3a>
     30e:	fe 01       	movw	r30, r28
     310:	eb 57       	subi	r30, 0x7B	; 123
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	10 83       	st	Z, r17
     316:	31 97       	sbiw	r30, 0x01	; 1
     318:	10 82       	st	Z, r1
     31a:	34 97       	sbiw	r30, 0x04	; 4
     31c:	11 82       	std	Z+1, r1	; 0x01
     31e:	10 82       	st	Z, r1
     320:	ce 57       	subi	r28, 0x7E	; 126
     322:	df 4f       	sbci	r29, 0xFF	; 255
     324:	19 82       	std	Y+1, r1	; 0x01
     326:	18 82       	st	Y, r1
     328:	04 c0       	rjmp	.+8      	; 0x332 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type+0x42>
     32a:	ca 57       	subi	r28, 0x7A	; 122
     32c:	df 4f       	sbci	r29, 0xFF	; 255
     32e:	19 82       	std	Y+1, r1	; 0x01
     330:	18 82       	st	Y, r1
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	08 95       	ret

0000033a <_ZN12SerialBuffernwEj>:
     33a:	d9 c7       	rjmp	.+4018   	; 0x12ee <pvPortMalloc>
     33c:	08 95       	ret

0000033e <_ZN12SerialBuffer11SerialstoreEc>:
     33e:	fc 01       	movw	r30, r24
     340:	e0 58       	subi	r30, 0x80	; 128
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	20 81       	ld	r18, Z
     346:	2f 5f       	subi	r18, 0xFF	; 255
     348:	2f 77       	andi	r18, 0x7F	; 127
     34a:	19 f4       	brne	.+6      	; 0x352 <_ZN12SerialBuffer11SerialstoreEc+0x14>
     34c:	11 82       	std	Z+1, r1	; 0x01
     34e:	10 82       	st	Z, r1
     350:	21 e0       	ldi	r18, 0x01	; 1
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	fc 01       	movw	r30, r24
     356:	ee 57       	subi	r30, 0x7E	; 126
     358:	ff 4f       	sbci	r31, 0xFF	; 255
     35a:	40 81       	ld	r20, Z
     35c:	51 81       	ldd	r21, Z+1	; 0x01
     35e:	24 17       	cp	r18, r20
     360:	35 07       	cpc	r19, r21
     362:	89 f0       	breq	.+34     	; 0x386 <_ZN12SerialBuffer11SerialstoreEc+0x48>
     364:	dc 01       	movw	r26, r24
     366:	a0 58       	subi	r26, 0x80	; 128
     368:	bf 4f       	sbci	r27, 0xFF	; 255
     36a:	ed 91       	ld	r30, X+
     36c:	fc 91       	ld	r31, X
     36e:	11 97       	sbiw	r26, 0x01	; 1
     370:	e8 0f       	add	r30, r24
     372:	f9 1f       	adc	r31, r25
     374:	61 83       	std	Z+1, r22	; 0x01
     376:	2d 93       	st	X+, r18
     378:	3c 93       	st	X, r19
     37a:	fc 01       	movw	r30, r24
     37c:	ec 57       	subi	r30, 0x7C	; 124
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	80 81       	ld	r24, Z
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 83       	st	Z, r24
     386:	08 95       	ret

00000388 <_ZN12SerialBuffer11SerialWriteEPKci>:
     388:	af 92       	push	r10
     38a:	bf 92       	push	r11
     38c:	cf 92       	push	r12
     38e:	df 92       	push	r13
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	8c 01       	movw	r16, r24
     39c:	6b 01       	movw	r12, r22
     39e:	7a 01       	movw	r14, r20
     3a0:	dc 01       	movw	r26, r24
     3a2:	ab 57       	subi	r26, 0x7B	; 123
     3a4:	bf 4f       	sbci	r27, 0xFF	; 255
     3a6:	fc 01       	movw	r30, r24
     3a8:	ea 57       	subi	r30, 0x7A	; 122
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	6c 91       	ld	r22, X
     3ae:	80 81       	ld	r24, Z
     3b0:	91 81       	ldd	r25, Z+1	; 0x01
     3b2:	d9 d0       	rcall	.+434    	; 0x566 <_ZN11Dev_Manager16getInterfaceAddrE8Dev_type>
     3b4:	89 2b       	or	r24, r25
     3b6:	d1 f0       	breq	.+52     	; 0x3ec <_ZN12SerialBuffer11SerialWriteEPKci+0x64>
     3b8:	1e 14       	cp	r1, r14
     3ba:	1f 04       	cpc	r1, r15
     3bc:	bc f4       	brge	.+46     	; 0x3ec <_ZN12SerialBuffer11SerialWriteEPKci+0x64>
     3be:	c0 e0       	ldi	r28, 0x00	; 0
     3c0:	58 01       	movw	r10, r16
     3c2:	85 e8       	ldi	r24, 0x85	; 133
     3c4:	a8 0e       	add	r10, r24
     3c6:	b1 1c       	adc	r11, r1
     3c8:	0a 57       	subi	r16, 0x7A	; 122
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	f6 01       	movw	r30, r12
     3ce:	ec 0f       	add	r30, r28
     3d0:	f1 1d       	adc	r31, r1
     3d2:	40 81       	ld	r20, Z
     3d4:	f5 01       	movw	r30, r10
     3d6:	60 81       	ld	r22, Z
     3d8:	f8 01       	movw	r30, r16
     3da:	80 81       	ld	r24, Z
     3dc:	91 81       	ldd	r25, Z+1	; 0x01
     3de:	83 d0       	rcall	.+262    	; 0x4e6 <_ZN11Dev_Manager5WriteE8Dev_typec>
     3e0:	cf 5f       	subi	r28, 0xFF	; 255
     3e2:	2c 2f       	mov	r18, r28
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	2e 15       	cp	r18, r14
     3e8:	3f 05       	cpc	r19, r15
     3ea:	84 f3       	brlt	.-32     	; 0x3cc <_ZN12SerialBuffer11SerialWriteEPKci+0x44>
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	08 95       	ret

00000400 <_ZN12SerialBuffer10SerialReadEv>:
char SerialBuffer::SerialRead(void) //데이터 읽기
{
	if (ib.head == ib.tail)
     400:	fc 01       	movw	r30, r24
     402:	ee 57       	subi	r30, 0x7E	; 126
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	20 81       	ld	r18, Z
     408:	31 81       	ldd	r19, Z+1	; 0x01
     40a:	32 97       	sbiw	r30, 0x02	; 2
     40c:	40 81       	ld	r20, Z
     40e:	51 81       	ldd	r21, Z+1	; 0x01
     410:	42 17       	cp	r20, r18
     412:	53 07       	cpc	r21, r19
     414:	e9 f0       	breq	.+58     	; 0x450 <_ZN12SerialBuffer10SerialReadEv+0x50>
	{
		return -1;
	}
	else
	{
		unsigned char data = ib.internalBuffer[ib.tail + 1];
     416:	2f 5f       	subi	r18, 0xFF	; 255
     418:	3f 4f       	sbci	r19, 0xFF	; 255
     41a:	fc 01       	movw	r30, r24
     41c:	e2 0f       	add	r30, r18
     41e:	f3 1f       	adc	r31, r19
     420:	40 81       	ld	r20, Z
		ib.tail = (ib.tail + 1) % RX_BUFFER_SIZE;
     422:	2f 77       	andi	r18, 0x7F	; 127
     424:	33 27       	eor	r19, r19
     426:	fc 01       	movw	r30, r24
     428:	ee 57       	subi	r30, 0x7E	; 126
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	31 83       	std	Z+1, r19	; 0x01
     42e:	20 83       	st	Z, r18
		if (ib.tail == num)
     430:	32 96       	adiw	r30, 0x02	; 2
     432:	60 81       	ld	r22, Z
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	26 17       	cp	r18, r22
     438:	37 07       	cpc	r19, r23
     43a:	61 f4       	brne	.+24     	; 0x454 <_ZN12SerialBuffer10SerialReadEv+0x54>
		{
			ib.tail = 0;
     43c:	32 97       	sbiw	r30, 0x02	; 2
     43e:	11 82       	std	Z+1, r1	; 0x01
     440:	10 82       	st	Z, r1
			ib.head = 0;
     442:	32 97       	sbiw	r30, 0x02	; 2
     444:	11 82       	std	Z+1, r1	; 0x01
     446:	10 82       	st	Z, r1
			num = 0;
     448:	34 96       	adiw	r30, 0x04	; 4
     44a:	10 82       	st	Z, r1
		}
		return data;
     44c:	84 2f       	mov	r24, r20
     44e:	08 95       	ret
}
char SerialBuffer::SerialRead(void) //데이터 읽기
{
	if (ib.head == ib.tail)
	{
		return -1;
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	08 95       	ret
		{
			ib.tail = 0;
			ib.head = 0;
			num = 0;
		}
		return data;
     454:	84 2f       	mov	r24, r20
	}
}
     456:	08 95       	ret

00000458 <_ZN12SerialBuffer15SerialAvailableEv>:
unsigned char SerialBuffer::SerialAvailable(void) // 가용 자원수 확인
{
	return (unsigned char)(RX_BUFFER_SIZE + (ib.head - ib.tail)) % RX_BUFFER_SIZE;
     458:	dc 01       	movw	r26, r24
     45a:	a0 58       	subi	r26, 0x80	; 128
     45c:	bf 4f       	sbci	r27, 0xFF	; 255
     45e:	fc 01       	movw	r30, r24
     460:	ee 57       	subi	r30, 0x7E	; 126
     462:	ff 4f       	sbci	r31, 0xFF	; 255
     464:	8c 91       	ld	r24, X
     466:	90 81       	ld	r25, Z
     468:	89 1b       	sub	r24, r25
}
     46a:	8f 77       	andi	r24, 0x7F	; 127
     46c:	08 95       	ret

0000046e <_ZN12SerialBuffer11SerialFlushEv>:

void SerialBuffer::SerialFlush(void)// 버퍼를 비운다.
{
	ib.tail = 0;
     46e:	fc 01       	movw	r30, r24
     470:	ee 57       	subi	r30, 0x7E	; 126
     472:	ff 4f       	sbci	r31, 0xFF	; 255
     474:	11 82       	std	Z+1, r1	; 0x01
     476:	10 82       	st	Z, r1
	ib.head = 0;
     478:	32 97       	sbiw	r30, 0x02	; 2
     47a:	11 82       	std	Z+1, r1	; 0x01
     47c:	10 82       	st	Z, r1
	num = 0;
     47e:	34 96       	adiw	r30, 0x04	; 4
     480:	10 82       	st	Z, r1
     482:	08 95       	ret

00000484 <_ZN11Dev_ManagerC1Ev>:
}
void Dev_Manager::Close_Handle(Dev_type Device)
{
	if(interface[Device])
	{
		isr_handle[Device] = nullptr;
     484:	fc 01       	movw	r30, r24
     486:	10 82       	st	Z, r1
     488:	11 82       	std	Z+1, r1	; 0x01
     48a:	12 82       	std	Z+2, r1	; 0x02
     48c:	13 82       	std	Z+3, r1	; 0x03
     48e:	14 82       	std	Z+4, r1	; 0x04
     490:	15 82       	std	Z+5, r1	; 0x05
     492:	16 82       	std	Z+6, r1	; 0x06
     494:	17 82       	std	Z+7, r1	; 0x07
     496:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
     49a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
     49e:	08 95       	ret

000004a0 <_ZN11Dev_Manager11getInstanceEv>:
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     4a8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     4ac:	89 2b       	or	r24, r25
     4ae:	49 f4       	brne	.+18     	; 0x4c2 <_ZN11Dev_Manager11getInstanceEv+0x22>
     4b0:	88 e0       	ldi	r24, 0x08	; 8
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	1c d7       	rcall	.+3640   	; 0x12ee <pvPortMalloc>
     4b6:	ec 01       	movw	r28, r24
     4b8:	e5 df       	rcall	.-54     	; 0x484 <_ZN11Dev_ManagerC1Ev>
     4ba:	d0 93 31 01 	sts	0x0131, r29	; 0x800131 <__data_end+0x1>
     4be:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <__data_end>
     4c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     4c6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>:
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	44 0f       	add	r20, r20
     4d4:	55 1f       	adc	r21, r21
     4d6:	84 0f       	add	r24, r20
     4d8:	95 1f       	adc	r25, r21
     4da:	fc 01       	movw	r30, r24
     4dc:	71 83       	std	Z+1, r23	; 0x01
     4de:	60 83       	st	Z, r22
     4e0:	08 95       	ret

000004e2 <_ZN11Dev_ManagernwEj>:
     4e2:	05 c7       	rjmp	.+3594   	; 0x12ee <pvPortMalloc>
     4e4:	08 95       	ret

000004e6 <_ZN11Dev_Manager5WriteE8Dev_typec>:
     4e6:	26 2f       	mov	r18, r22
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	22 0f       	add	r18, r18
     4ec:	33 1f       	adc	r19, r19
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	dc 01       	movw	r26, r24
     4f4:	8d 91       	ld	r24, X+
     4f6:	9c 91       	ld	r25, X
     4f8:	00 97       	sbiw	r24, 0x00	; 0
     4fa:	41 f0       	breq	.+16     	; 0x50c <_ZN11Dev_Manager5WriteE8Dev_typec+0x26>
     4fc:	64 2f       	mov	r22, r20
     4fe:	dc 01       	movw	r26, r24
     500:	ed 91       	ld	r30, X+
     502:	fc 91       	ld	r31, X
     504:	06 80       	ldd	r0, Z+6	; 0x06
     506:	f7 81       	ldd	r31, Z+7	; 0x07
     508:	e0 2d       	mov	r30, r0
     50a:	09 95       	icall
     50c:	08 95       	ret

0000050e <_ZN11Dev_Manager11Device_InitE8Dev_type>:
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	66 0f       	add	r22, r22
     512:	77 1f       	adc	r23, r23
     514:	86 0f       	add	r24, r22
     516:	97 1f       	adc	r25, r23
     518:	dc 01       	movw	r26, r24
     51a:	8d 91       	ld	r24, X+
     51c:	9c 91       	ld	r25, X
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	39 f0       	breq	.+14     	; 0x530 <_ZN11Dev_Manager11Device_InitE8Dev_type+0x22>
     522:	dc 01       	movw	r26, r24
     524:	ed 91       	ld	r30, X+
     526:	fc 91       	ld	r31, X
     528:	01 90       	ld	r0, Z+
     52a:	f0 81       	ld	r31, Z
     52c:	e0 2d       	mov	r30, r0
     52e:	09 95       	icall
     530:	08 95       	ret

00000532 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>:
     532:	e6 2f       	mov	r30, r22
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	ee 0f       	add	r30, r30
     538:	ff 1f       	adc	r31, r31
     53a:	e8 0f       	add	r30, r24
     53c:	f9 1f       	adc	r31, r25
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	89 2b       	or	r24, r25
     544:	11 f0       	breq	.+4      	; 0x54a <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE+0x18>
     546:	55 83       	std	Z+5, r21	; 0x05
     548:	44 83       	std	Z+4, r20	; 0x04
     54a:	08 95       	ret

0000054c <_ZN11Dev_Manager12Driver_CheckE8Dev_type>:
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	66 0f       	add	r22, r22
     550:	77 1f       	adc	r23, r23
     552:	fc 01       	movw	r30, r24
     554:	e6 0f       	add	r30, r22
     556:	f7 1f       	adc	r31, r23
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	20 81       	ld	r18, Z
     55c:	31 81       	ldd	r19, Z+1	; 0x01
     55e:	23 2b       	or	r18, r19
     560:	09 f4       	brne	.+2      	; 0x564 <_ZN11Dev_Manager12Driver_CheckE8Dev_type+0x18>
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	08 95       	ret

00000566 <_ZN11Dev_Manager16getInterfaceAddrE8Dev_type>:
	}
}
DeviceDriveInterFace* Dev_Manager::getInterfaceAddr(Dev_type Device)
{
	if(interface[Device])
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	66 0f       	add	r22, r22
     56a:	77 1f       	adc	r23, r23
     56c:	86 0f       	add	r24, r22
     56e:	97 1f       	adc	r25, r23
	{
		return interface[Device];
	}
	else
		return nullptr;
}
     570:	fc 01       	movw	r30, r24
     572:	80 81       	ld	r24, Z
     574:	91 81       	ldd	r25, Z+1	; 0x01
     576:	08 95       	ret

00000578 <__vector_18>:
ISR(USART0_RX_vect)
{
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	0b b6       	in	r0, 0x3b	; 59
     584:	0f 92       	push	r0
     586:	2f 93       	push	r18
     588:	3f 93       	push	r19
     58a:	4f 93       	push	r20
     58c:	5f 93       	push	r21
     58e:	6f 93       	push	r22
     590:	7f 93       	push	r23
     592:	8f 93       	push	r24
     594:	9f 93       	push	r25
     596:	af 93       	push	r26
     598:	bf 93       	push	r27
     59a:	ef 93       	push	r30
     59c:	ff 93       	push	r31
	Dev_Manager::getInstance()->isr_handle[UART0](UART0,UDR0);
     59e:	80 df       	rcall	.-256    	; 0x4a0 <_ZN11Dev_Manager11getInstanceEv>
     5a0:	6c b1       	in	r22, 0x0c	; 12
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	dc 01       	movw	r26, r24
     5a6:	14 96       	adiw	r26, 0x04	; 4
     5a8:	ed 91       	ld	r30, X+
     5aa:	fc 91       	ld	r31, X
     5ac:	15 97       	sbiw	r26, 0x05	; 5
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	09 95       	icall
	
}
     5b2:	ff 91       	pop	r31
     5b4:	ef 91       	pop	r30
     5b6:	bf 91       	pop	r27
     5b8:	af 91       	pop	r26
     5ba:	9f 91       	pop	r25
     5bc:	8f 91       	pop	r24
     5be:	7f 91       	pop	r23
     5c0:	6f 91       	pop	r22
     5c2:	5f 91       	pop	r21
     5c4:	4f 91       	pop	r20
     5c6:	3f 91       	pop	r19
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0b be       	out	0x3b, r0	; 59
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0
     5d4:	1f 90       	pop	r1
     5d6:	18 95       	reti

000005d8 <__vector_30>:
ISR(USART1_RX_vect)
{
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	0b b6       	in	r0, 0x3b	; 59
     5e4:	0f 92       	push	r0
     5e6:	2f 93       	push	r18
     5e8:	3f 93       	push	r19
     5ea:	4f 93       	push	r20
     5ec:	5f 93       	push	r21
     5ee:	6f 93       	push	r22
     5f0:	7f 93       	push	r23
     5f2:	8f 93       	push	r24
     5f4:	9f 93       	push	r25
     5f6:	af 93       	push	r26
     5f8:	bf 93       	push	r27
     5fa:	ef 93       	push	r30
     5fc:	ff 93       	push	r31
	Dev_Manager::getInstance()->isr_handle[RS485](RS485,UDR1);
     5fe:	50 df       	rcall	.-352    	; 0x4a0 <_ZN11Dev_Manager11getInstanceEv>
     600:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	dc 01       	movw	r26, r24
     608:	16 96       	adiw	r26, 0x06	; 6
     60a:	ed 91       	ld	r30, X+
     60c:	fc 91       	ld	r31, X
     60e:	17 97       	sbiw	r26, 0x07	; 7
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	09 95       	icall
}
     614:	ff 91       	pop	r31
     616:	ef 91       	pop	r30
     618:	bf 91       	pop	r27
     61a:	af 91       	pop	r26
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	7f 91       	pop	r23
     622:	6f 91       	pop	r22
     624:	5f 91       	pop	r21
     626:	4f 91       	pop	r20
     628:	3f 91       	pop	r19
     62a:	2f 91       	pop	r18
     62c:	0f 90       	pop	r0
     62e:	0b be       	out	0x3b, r0	; 59
     630:	0f 90       	pop	r0
     632:	0f be       	out	0x3f, r0	; 63
     634:	0f 90       	pop	r0
     636:	1f 90       	pop	r1
     638:	18 95       	reti

0000063a <_ZN20DeviceDriveInterFace11Device_ReadEv>:
	//PORTF=0X00;	//RS485 rx Enable
}

void RS485Driver::operator delete(void* ptr)
{
	free(ptr);
     63a:	08 95       	ret

0000063c <_ZN11RS485Driver11Device_InitEv>:
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ec 01       	movw	r28, r24
     642:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     646:	88 e9       	ldi	r24, 0x98	; 152
     648:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     64c:	86 e0       	ldi	r24, 0x06	; 6
     64e:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     652:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     656:	87 e6       	ldi	r24, 0x67	; 103
     658:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <xQueueCreateMutex>
     662:	9d 83       	std	Y+5, r25	; 0x05
     664:	8c 83       	std	Y+4, r24	; 0x04
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <xQueueCreateMutex>
     66c:	9b 83       	std	Y+3, r25	; 0x03
     66e:	8a 83       	std	Y+2, r24	; 0x02
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <_ZN11RS485DriverC1Ev>:
     676:	24 e0       	ldi	r18, 0x04	; 4
     678:	31 e0       	ldi	r19, 0x01	; 1
     67a:	fc 01       	movw	r30, r24
     67c:	31 83       	std	Z+1, r19	; 0x01
     67e:	20 83       	st	Z, r18
     680:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <_ZN11RS485Driver4instE>
     684:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <_ZN11RS485Driver4instE+0x1>
     688:	23 2b       	or	r18, r19
     68a:	21 f4       	brne	.+8      	; 0x694 <_ZN11RS485DriverC1Ev+0x1e>
     68c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_ZN11RS485Driver4instE+0x1>
     690:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_ZN11RS485Driver4instE>
     694:	08 95       	ret

00000696 <_ZN11RS485DrivernwEj>:
}
void* RS485Driver::operator new(size_t size)
{
	return malloc(size);
     696:	2b c6       	rjmp	.+3158   	; 0x12ee <pvPortMalloc>
}
     698:	08 95       	ret

0000069a <_ZN11RS485Driver12UART_PutcharEc>:
void RS485Driver::UART_Putchar(const char data)
{
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	ec 01       	movw	r28, r24
     6a2:	16 2f       	mov	r17, r22
	if(xSemaphoreTake(char_Mutex,100) == pdPASS)
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	44 e6       	ldi	r20, 0x64	; 100
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	9b 81       	ldd	r25, Y+3	; 0x03
     6b2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <xQueueGenericReceive>
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	81 f4       	brne	.+32     	; 0x6da <_ZN11RS485Driver12UART_PutcharEc+0x40>
	{
		while((UCSR1A & (1 << UDRE1)) == 0);
     6ba:	eb e9       	ldi	r30, 0x9B	; 155
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	90 81       	ld	r25, Z
     6c0:	95 ff       	sbrs	r25, 5
     6c2:	fd cf       	rjmp	.-6      	; 0x6be <_ZN11RS485Driver12UART_PutcharEc+0x24>
		UDR1 = data;
     6c4:	10 93 9c 00 	sts	0x009C, r17	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
		xSemaphoreGive(char_Mutex);
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	9b 81       	ldd	r25, Y+3	; 0x03
     6d6:	0e 94 ad 0c 	call	0x195a	; 0x195a <xQueueGenericSend>
	}
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	08 95       	ret

000006e2 <_ZN11RS485Driver12Device_WriteEc>:
		xSemaphoreGive(Uart_Mutex);
	}
}
void RS485Driver::Device_Write(char data)
{
	UART_Putchar(data);
     6e2:	db cf       	rjmp	.-74     	; 0x69a <_ZN11RS485Driver12UART_PutcharEc>
     6e4:	08 95       	ret

000006e6 <_ZN11RS485Driver14UART_PutStringEPKc>:
		UDR1 = data;
		xSemaphoreGive(char_Mutex);
	}
}
void RS485Driver::UART_PutString(const char *str)
{
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	8c 01       	movw	r16, r24
     6f0:	eb 01       	movw	r28, r22
	if(xSemaphoreTake(Uart_Mutex,100) == pdPASS)
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	44 e6       	ldi	r20, 0x64	; 100
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	fc 01       	movw	r30, r24
     6fe:	84 81       	ldd	r24, Z+4	; 0x04
     700:	95 81       	ldd	r25, Z+5	; 0x05
     702:	0e 94 57 0d 	call	0x1aae	; 0x1aae <xQueueGenericReceive>
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	99 f4       	brne	.+38     	; 0x730 <_ZN11RS485Driver14UART_PutStringEPKc+0x4a>
	{
		while(*str)
     70a:	68 81       	ld	r22, Y
     70c:	66 23       	and	r22, r22
     70e:	31 f0       	breq	.+12     	; 0x71c <_ZN11RS485Driver14UART_PutStringEPKc+0x36>
     710:	21 96       	adiw	r28, 0x01	; 1
		{
			UART_Putchar(*(str)++);
     712:	c8 01       	movw	r24, r16
     714:	c2 df       	rcall	.-124    	; 0x69a <_ZN11RS485Driver12UART_PutcharEc>
}
void RS485Driver::UART_PutString(const char *str)
{
	if(xSemaphoreTake(Uart_Mutex,100) == pdPASS)
	{
		while(*str)
     716:	69 91       	ld	r22, Y+
     718:	61 11       	cpse	r22, r1
     71a:	fb cf       	rjmp	.-10     	; 0x712 <_ZN11RS485Driver14UART_PutStringEPKc+0x2c>
		{
			UART_Putchar(*(str)++);
		}
		xSemaphoreGive(Uart_Mutex);
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	f8 01       	movw	r30, r16
     728:	84 81       	ldd	r24, Z+4	; 0x04
     72a:	95 81       	ldd	r25, Z+5	; 0x05
     72c:	0e 94 ad 0c 	call	0x195a	; 0x195a <xQueueGenericSend>
	}
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	08 95       	ret

0000073a <_ZN11RS485Driver13Device_WritesEPKc>:
{
	UART_Putchar(data);
}
void RS485Driver::Device_Writes(const char* data)
{
	UART_PutString(data);
     73a:	d5 cf       	rjmp	.-86     	; 0x6e6 <_ZN11RS485Driver14UART_PutStringEPKc>
     73c:	08 95       	ret

0000073e <_ZN10UartDriver11Device_InitEv>:
	char_Mutex= xSemaphoreCreateMutex();
}

void UartDriver::operator delete(void* ptr)
{
	free(ptr);
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
     744:	88 e9       	ldi	r24, 0x98	; 152
     746:	8a b9       	out	0x0a, r24	; 10
     748:	86 e0       	ldi	r24, 0x06	; 6
     74a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     74e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     752:	87 e6       	ldi	r24, 0x67	; 103
     754:	89 b9       	out	0x09, r24	; 9
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <xQueueCreateMutex>
     75c:	9d 83       	std	Y+5, r25	; 0x05
     75e:	8c 83       	std	Y+4, r24	; 0x04
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <xQueueCreateMutex>
     766:	9b 83       	std	Y+3, r25	; 0x03
     768:	8a 83       	std	Y+2, r24	; 0x02
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <_ZN10UartDriverC1Ev>:
     770:	20 e1       	ldi	r18, 0x10	; 16
     772:	31 e0       	ldi	r19, 0x01	; 1
     774:	fc 01       	movw	r30, r24
     776:	31 83       	std	Z+1, r19	; 0x01
     778:	20 83       	st	Z, r18
     77a:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <_ZN10UartDriver4instE>
     77e:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <_ZN10UartDriver4instE+0x1>
     782:	23 2b       	or	r18, r19
     784:	21 f4       	brne	.+8      	; 0x78e <_ZN10UartDriverC1Ev+0x1e>
     786:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <_ZN10UartDriver4instE+0x1>
     78a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_ZN10UartDriver4instE>
     78e:	08 95       	ret

00000790 <_ZN10UartDrivernwEj>:
}
void* UartDriver::operator new(size_t size)
{
	return malloc(size);
     790:	ae c5       	rjmp	.+2908   	; 0x12ee <pvPortMalloc>
}
     792:	08 95       	ret

00000794 <_ZN10UartDriver12UART_PutcharEc>:
void UartDriver::UART_Putchar(const char data)
{
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	ec 01       	movw	r28, r24
     79c:	16 2f       	mov	r17, r22
	if(xSemaphoreTake(char_Mutex,100) == pdPASS)
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	44 e6       	ldi	r20, 0x64	; 100
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	9b 81       	ldd	r25, Y+3	; 0x03
     7ac:	0e 94 57 0d 	call	0x1aae	; 0x1aae <xQueueGenericReceive>
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	61 f4       	brne	.+24     	; 0x7cc <_ZN10UartDriver12UART_PutcharEc+0x38>
	{
		while((UCSR0A & (1 << UDRE0)) == 0);
     7b4:	5d 9b       	sbis	0x0b, 5	; 11
     7b6:	fe cf       	rjmp	.-4      	; 0x7b4 <_ZN10UartDriver12UART_PutcharEc+0x20>
		UDR0 = data;
     7b8:	1c b9       	out	0x0c, r17	; 12
		xSemaphoreGive(char_Mutex);
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	9b 81       	ldd	r25, Y+3	; 0x03
     7c8:	0e 94 ad 0c 	call	0x195a	; 0x195a <xQueueGenericSend>
	}
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	08 95       	ret

000007d4 <_ZN10UartDriver12Device_WriteEc>:
		xSemaphoreGive(Uart_Mutex);
	}
}
void UartDriver::Device_Write(char data)
{
	UART_Putchar(data);
     7d4:	df cf       	rjmp	.-66     	; 0x794 <_ZN10UartDriver12UART_PutcharEc>
     7d6:	08 95       	ret

000007d8 <_ZN10UartDriver14UART_PutStringEPKc>:
		UDR0 = data;
		xSemaphoreGive(char_Mutex);
	}
}
void UartDriver::UART_PutString(const char *str)
{
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	8c 01       	movw	r16, r24
     7e2:	eb 01       	movw	r28, r22
	if(xSemaphoreTake(Uart_Mutex,100) == pdPASS)
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	44 e6       	ldi	r20, 0x64	; 100
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	fc 01       	movw	r30, r24
     7f0:	84 81       	ldd	r24, Z+4	; 0x04
     7f2:	95 81       	ldd	r25, Z+5	; 0x05
     7f4:	0e 94 57 0d 	call	0x1aae	; 0x1aae <xQueueGenericReceive>
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	99 f4       	brne	.+38     	; 0x822 <_ZN10UartDriver14UART_PutStringEPKc+0x4a>
	{
		while(*str)
     7fc:	68 81       	ld	r22, Y
     7fe:	66 23       	and	r22, r22
     800:	31 f0       	breq	.+12     	; 0x80e <_ZN10UartDriver14UART_PutStringEPKc+0x36>
     802:	21 96       	adiw	r28, 0x01	; 1
		{
			UART_Putchar(*(str)++);
     804:	c8 01       	movw	r24, r16
     806:	c6 df       	rcall	.-116    	; 0x794 <_ZN10UartDriver12UART_PutcharEc>
}
void UartDriver::UART_PutString(const char *str)
{
	if(xSemaphoreTake(Uart_Mutex,100) == pdPASS)
	{
		while(*str)
     808:	69 91       	ld	r22, Y+
     80a:	61 11       	cpse	r22, r1
     80c:	fb cf       	rjmp	.-10     	; 0x804 <_ZN10UartDriver14UART_PutStringEPKc+0x2c>
		{
			UART_Putchar(*(str)++);
		}
		xSemaphoreGive(Uart_Mutex);
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	f8 01       	movw	r30, r16
     81a:	84 81       	ldd	r24, Z+4	; 0x04
     81c:	95 81       	ldd	r25, Z+5	; 0x05
     81e:	0e 94 ad 0c 	call	0x195a	; 0x195a <xQueueGenericSend>
	}
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <_ZN10UartDriver13Device_WritesEPKc>:
{
	UART_Putchar(data);
}
void UartDriver::Device_Writes(const char* data)
{
	UART_PutString(data);
     82c:	d5 cf       	rjmp	.-86     	; 0x7d8 <_ZN10UartDriver14UART_PutStringEPKc>
     82e:	08 95       	ret

00000830 <_ZL5proc1Pv>:
	{
		sbi(*PORT,Pine);
	}
	else
	{
		cbi(*PORT,Pine);
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	6c 97       	sbiw	r28, 0x1c	; 28
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	6c 01       	movw	r12, r24
     846:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <mem4+0x3>
     84a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <mem4+0x2>
     84e:	21 2c       	mov	r2, r1
     850:	f1 2c       	mov	r15, r1
     852:	61 2c       	mov	r6, r1
     854:	71 2c       	mov	r7, r1
     856:	5e 01       	movw	r10, r28
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	a8 0e       	add	r10, r24
     85c:	b1 1c       	adc	r11, r1
     85e:	02 e4       	ldi	r16, 0x42	; 66
     860:	11 e0       	ldi	r17, 0x01	; 1
     862:	0f 2e       	mov	r0, r31
     864:	f3 e0       	ldi	r31, 0x03	; 3
     866:	4f 2e       	mov	r4, r31
     868:	f0 2d       	mov	r31, r0
     86a:	81 2c       	mov	r8, r1
     86c:	68 94       	set
     86e:	33 24       	eor	r3, r3
     870:	31 f8       	bld	r3, 1
     872:	99 24       	eor	r9, r9
     874:	93 94       	inc	r9
     876:	21 10       	cpse	r2, r1
     878:	13 c0       	rjmp	.+38     	; 0x8a0 <_ZL5proc1Pv+0x70>
     87a:	f1 10       	cpse	r15, r1
     87c:	8a c2       	rjmp	.+1300   	; 0xd92 <_ZL5proc1Pv+0x562>
     87e:	9e 01       	movw	r18, r28
     880:	25 5f       	subi	r18, 0xF5	; 245
     882:	3f 4f       	sbci	r19, 0xFF	; 255
     884:	49 2d       	mov	r20, r9
     886:	6e e2       	ldi	r22, 0x2E	; 46
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	89 2d       	mov	r24, r9
     88c:	02 dd       	rcall	.-1532   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     88e:	48 e0       	ldi	r20, 0x08	; 8
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	be 01       	movw	r22, r28
     894:	65 5f       	subi	r22, 0xF5	; 245
     896:	7f 4f       	sbci	r23, 0xFF	; 255
     898:	c6 01       	movw	r24, r12
     89a:	76 dd       	rcall	.-1300   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
     89c:	f9 2c       	mov	r15, r9
     89e:	79 c2       	rjmp	.+1266   	; 0xd92 <_ZL5proc1Pv+0x562>
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	29 12       	cpse	r2, r25
     8a4:	13 c0       	rjmp	.+38     	; 0x8cc <_ZL5proc1Pv+0x9c>
     8a6:	f1 10       	cpse	r15, r1
     8a8:	7a c2       	rjmp	.+1268   	; 0xd9e <_ZL5proc1Pv+0x56e>
     8aa:	9e 01       	movw	r18, r28
     8ac:	25 5f       	subi	r18, 0xF5	; 245
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	49 2d       	mov	r20, r9
     8b2:	65 e0       	ldi	r22, 0x05	; 5
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	84 2d       	mov	r24, r4
     8b8:	ec dc       	rcall	.-1576   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     8ba:	48 e0       	ldi	r20, 0x08	; 8
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	be 01       	movw	r22, r28
     8c0:	65 5f       	subi	r22, 0xF5	; 245
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	c6 01       	movw	r24, r12
     8c6:	60 dd       	rcall	.-1344   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
     8c8:	f9 2c       	mov	r15, r9
     8ca:	69 c2       	rjmp	.+1234   	; 0xd9e <_ZL5proc1Pv+0x56e>
     8cc:	e2 e0       	ldi	r30, 0x02	; 2
     8ce:	2e 12       	cpse	r2, r30
     8d0:	13 c0       	rjmp	.+38     	; 0x8f8 <_ZL5proc1Pv+0xc8>
     8d2:	f1 10       	cpse	r15, r1
     8d4:	64 c2       	rjmp	.+1224   	; 0xd9e <_ZL5proc1Pv+0x56e>
     8d6:	9e 01       	movw	r18, r28
     8d8:	25 5f       	subi	r18, 0xF5	; 245
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	49 2d       	mov	r20, r9
     8de:	64 e0       	ldi	r22, 0x04	; 4
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	84 2d       	mov	r24, r4
     8e4:	d6 dc       	rcall	.-1620   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     8e6:	48 e0       	ldi	r20, 0x08	; 8
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	be 01       	movw	r22, r28
     8ec:	65 5f       	subi	r22, 0xF5	; 245
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	c6 01       	movw	r24, r12
     8f2:	4a dd       	rcall	.-1388   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
     8f4:	f9 2c       	mov	r15, r9
     8f6:	53 c2       	rjmp	.+1190   	; 0xd9e <_ZL5proc1Pv+0x56e>
     8f8:	f3 e0       	ldi	r31, 0x03	; 3
     8fa:	2f 12       	cpse	r2, r31
     8fc:	50 c2       	rjmp	.+1184   	; 0xd9e <_ZL5proc1Pv+0x56e>
     8fe:	f1 10       	cpse	r15, r1
     900:	4e c2       	rjmp	.+1180   	; 0xd9e <_ZL5proc1Pv+0x56e>
     902:	9e 01       	movw	r18, r28
     904:	25 5f       	subi	r18, 0xF5	; 245
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	49 2d       	mov	r20, r9
     90a:	6d e2       	ldi	r22, 0x2D	; 45
     90c:	71 e0       	ldi	r23, 0x01	; 1
     90e:	83 2d       	mov	r24, r3
     910:	c0 dc       	rcall	.-1664   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     912:	48 e0       	ldi	r20, 0x08	; 8
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	be 01       	movw	r22, r28
     918:	65 5f       	subi	r22, 0xF5	; 245
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	c6 01       	movw	r24, r12
     91e:	34 dd       	rcall	.-1432   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
     920:	f9 2c       	mov	r15, r9
     922:	3d c2       	rjmp	.+1146   	; 0xd9e <_ZL5proc1Pv+0x56e>
     924:	ce 01       	movw	r24, r28
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	7c 01       	movw	r14, r24
     92a:	c6 01       	movw	r24, r12
     92c:	69 dd       	rcall	.-1326   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     92e:	f7 01       	movw	r30, r14
     930:	81 93       	st	Z+, r24
     932:	7f 01       	movw	r14, r30
     934:	ea 15       	cp	r30, r10
     936:	fb 05       	cpc	r31, r11
     938:	c1 f7       	brne	.-16     	; 0x92a <_ZL5proc1Pv+0xfa>
     93a:	be 01       	movw	r22, r28
     93c:	6d 5e       	subi	r22, 0xED	; 237
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	8c dc       	rcall	.-1768   	; 0x25e <_Z16getFunction3DataPcP7GetData>
     946:	6e 88       	ldd	r6, Y+22	; 0x16
     948:	7f 88       	ldd	r7, Y+23	; 0x17
     94a:	f8 01       	movw	r30, r16
     94c:	75 82       	std	Z+5, r7	; 0x05
     94e:	64 82       	std	Z+4, r6	; 0x04
     950:	13 82       	std	Z+3, r1	; 0x03
     952:	12 82       	std	Z+2, r1	; 0x02
     954:	c6 01       	movw	r24, r12
     956:	8b dd       	rcall	.-1258   	; 0x46e <_ZN12SerialBuffer11SerialFlushEv>
     958:	c6 01       	movw	r24, r12
     95a:	7e dd       	rcall	.-1284   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     95c:	24 2c       	mov	r2, r4
     95e:	f8 2c       	mov	r15, r8
     960:	3c c0       	rjmp	.+120    	; 0x9da <_ZL5proc1Pv+0x1aa>
     962:	c6 01       	movw	r24, r12
     964:	79 dd       	rcall	.-1294   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     966:	87 30       	cpi	r24, 0x07	; 7
     968:	c0 f1       	brcs	.+112    	; 0x9da <_ZL5proc1Pv+0x1aa>
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	2f 12       	cpse	r2, r31
     96e:	35 c0       	rjmp	.+106    	; 0x9da <_ZL5proc1Pv+0x1aa>
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	7c 01       	movw	r14, r24
     976:	c6 01       	movw	r24, r12
     978:	43 dd       	rcall	.-1402   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     97a:	f7 01       	movw	r30, r14
     97c:	81 93       	st	Z+, r24
     97e:	7f 01       	movw	r14, r30
     980:	ea 15       	cp	r30, r10
     982:	fb 05       	cpc	r31, r11
     984:	c1 f7       	brne	.-16     	; 0x976 <_ZL5proc1Pv+0x146>
     986:	8d 81       	ldd	r24, Y+5	; 0x05
     988:	87 70       	andi	r24, 0x07	; 7
     98a:	81 30       	cpi	r24, 0x01	; 1
     98c:	59 f4       	brne	.+22     	; 0x9a4 <_ZL5proc1Pv+0x174>
     98e:	30 92 36 01 	sts	0x0136, r3	; 0x800136 <inverter>
     992:	c6 01       	movw	r24, r12
     994:	6c dd       	rcall	.-1320   	; 0x46e <_ZN12SerialBuffer11SerialFlushEv>
     996:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <inverter>
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	f8 01       	movw	r30, r16
     99e:	97 83       	std	Z+7, r25	; 0x07
     9a0:	86 83       	std	Z+6, r24	; 0x06
     9a2:	04 c2       	rjmp	.+1032   	; 0xdac <_ZL5proc1Pv+0x57c>
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	59 f4       	brne	.+22     	; 0x9be <_ZL5proc1Pv+0x18e>
     9a8:	80 92 36 01 	sts	0x0136, r8	; 0x800136 <inverter>
     9ac:	c6 01       	movw	r24, r12
     9ae:	5f dd       	rcall	.-1346   	; 0x46e <_ZN12SerialBuffer11SerialFlushEv>
     9b0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <inverter>
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	f8 01       	movw	r30, r16
     9b8:	97 83       	std	Z+7, r25	; 0x07
     9ba:	86 83       	std	Z+6, r24	; 0x06
     9bc:	f7 c1       	rjmp	.+1006   	; 0xdac <_ZL5proc1Pv+0x57c>
     9be:	84 30       	cpi	r24, 0x04	; 4
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <_ZL5proc1Pv+0x194>
     9c2:	f0 c1       	rjmp	.+992    	; 0xda4 <_ZL5proc1Pv+0x574>
     9c4:	90 92 36 01 	sts	0x0136, r9	; 0x800136 <inverter>
     9c8:	c6 01       	movw	r24, r12
     9ca:	51 dd       	rcall	.-1374   	; 0x46e <_ZN12SerialBuffer11SerialFlushEv>
     9cc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <inverter>
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	f8 01       	movw	r30, r16
     9d4:	97 83       	std	Z+7, r25	; 0x07
     9d6:	86 83       	std	Z+6, r24	; 0x06
     9d8:	e9 c1       	rjmp	.+978    	; 0xdac <_ZL5proc1Pv+0x57c>
     9da:	c6 01       	movw	r24, r12
     9dc:	3d dd       	rcall	.-1414   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     9de:	87 30       	cpi	r24, 0x07	; 7
     9e0:	58 f1       	brcs	.+86     	; 0xa38 <_ZL5proc1Pv+0x208>
     9e2:	f2 e0       	ldi	r31, 0x02	; 2
     9e4:	2f 12       	cpse	r2, r31
     9e6:	28 c0       	rjmp	.+80     	; 0xa38 <_ZL5proc1Pv+0x208>
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	7c 01       	movw	r14, r24
     9ee:	c6 01       	movw	r24, r12
     9f0:	07 dd       	rcall	.-1522   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     9f2:	f7 01       	movw	r30, r14
     9f4:	81 93       	st	Z+, r24
     9f6:	7f 01       	movw	r14, r30
     9f8:	ea 15       	cp	r30, r10
     9fa:	fb 05       	cpc	r31, r11
     9fc:	c1 f7       	brne	.-16     	; 0x9ee <_ZL5proc1Pv+0x1be>
     9fe:	8c 81       	ldd	r24, Y+4	; 0x04
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	98 2f       	mov	r25, r24
     a04:	88 27       	eor	r24, r24
     a06:	2d 81       	ldd	r18, Y+5	; 0x05
     a08:	82 2b       	or	r24, r18
     a0a:	f8 01       	movw	r30, r16
     a0c:	91 87       	std	Z+9, r25	; 0x09
     a0e:	80 87       	std	Z+8, r24	; 0x08
     a10:	64 e6       	ldi	r22, 0x64	; 100
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__divmodhi4>
     a18:	cb 01       	movw	r24, r22
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	68 0f       	add	r22, r24
     a24:	79 1f       	adc	r23, r25
     a26:	73 87       	std	Z+11, r23	; 0x0b
     a28:	62 87       	std	Z+10, r22	; 0x0a
     a2a:	c6 01       	movw	r24, r12
     a2c:	15 dd       	rcall	.-1494   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     a2e:	87 30       	cpi	r24, 0x07	; 7
     a30:	50 f4       	brcc	.+20     	; 0xa46 <_ZL5proc1Pv+0x216>
     a32:	24 2c       	mov	r2, r4
     a34:	f8 2c       	mov	r15, r8
     a36:	3e c0       	rjmp	.+124    	; 0xab4 <_ZL5proc1Pv+0x284>
     a38:	c6 01       	movw	r24, r12
     a3a:	0e dd       	rcall	.-1508   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     a3c:	87 30       	cpi	r24, 0x07	; 7
     a3e:	d0 f1       	brcs	.+116    	; 0xab4 <_ZL5proc1Pv+0x284>
     a40:	f3 e0       	ldi	r31, 0x03	; 3
     a42:	2f 12       	cpse	r2, r31
     a44:	37 c0       	rjmp	.+110    	; 0xab4 <_ZL5proc1Pv+0x284>
     a46:	8e 01       	movw	r16, r28
     a48:	0f 5f       	subi	r16, 0xFF	; 255
     a4a:	1f 4f       	sbci	r17, 0xFF	; 255
     a4c:	ce 01       	movw	r24, r28
     a4e:	08 96       	adiw	r24, 0x08	; 8
     a50:	9b 8f       	std	Y+27, r25	; 0x1b
     a52:	8a 8f       	std	Y+26, r24	; 0x1a
     a54:	c6 01       	movw	r24, r12
     a56:	d4 dc       	rcall	.-1624   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     a58:	f8 01       	movw	r30, r16
     a5a:	81 93       	st	Z+, r24
     a5c:	8f 01       	movw	r16, r30
     a5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a60:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a62:	e8 17       	cp	r30, r24
     a64:	f9 07       	cpc	r31, r25
     a66:	b1 f7       	brne	.-20     	; 0xa54 <_ZL5proc1Pv+0x224>
     a68:	be 01       	movw	r22, r28
     a6a:	6d 5e       	subi	r22, 0xED	; 237
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	ce 01       	movw	r24, r28
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	f5 db       	rcall	.-2070   	; 0x25e <_Z16getFunction3DataPcP7GetData>
     a74:	0e 89       	ldd	r16, Y+22	; 0x16
     a76:	1f 89       	ldd	r17, Y+23	; 0x17
     a78:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <mem4+0x11>
     a7c:	00 93 52 01 	sts	0x0152, r16	; 0x800152 <mem4+0x10>
     a80:	c6 01       	movw	r24, r12
     a82:	f5 dc       	rcall	.-1558   	; 0x46e <_ZN12SerialBuffer11SerialFlushEv>
     a84:	8c e2       	ldi	r24, 0x2C	; 44
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskDelay>
     a8c:	84 e6       	ldi	r24, 0x64	; 100
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskDelay>
     a94:	e1 2c       	mov	r14, r1
     a96:	f1 2c       	mov	r15, r1
     a98:	0f 2e       	mov	r0, r31
     a9a:	f2 e4       	ldi	r31, 0x42	; 66
     a9c:	af 2e       	mov	r10, r31
     a9e:	f1 e0       	ldi	r31, 0x01	; 1
     aa0:	bf 2e       	mov	r11, r31
     aa2:	f0 2d       	mov	r31, r0
     aa4:	44 24       	eor	r4, r4
     aa6:	43 94       	inc	r4
     aa8:	51 2c       	mov	r5, r1
     aaa:	1e 01       	movw	r2, r28
     aac:	99 e0       	ldi	r25, 0x09	; 9
     aae:	29 0e       	add	r2, r25
     ab0:	31 1c       	adc	r3, r1
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <_ZL5proc1Pv+0x28e>
     ab4:	8c e2       	ldi	r24, 0x2C	; 44
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskDelay>
     abc:	dc ce       	rjmp	.-584    	; 0x876 <_ZL5proc1Pv+0x46>
     abe:	f5 01       	movw	r30, r10
     ac0:	80 88       	ldd	r8, Z+16	; 0x10
     ac2:	91 88       	ldd	r9, Z+17	; 0x11
     ac4:	80 16       	cp	r8, r16
     ac6:	91 06       	cpc	r9, r17
     ac8:	09 f0       	breq	.+2      	; 0xacc <_ZL5proc1Pv+0x29c>
     aca:	3b c1       	rjmp	.+630    	; 0xd42 <_ZL5proc1Pv+0x512>
     acc:	04 81       	ldd	r16, Z+4	; 0x04
     ace:	15 81       	ldd	r17, Z+5	; 0x05
     ad0:	06 15       	cp	r16, r6
     ad2:	17 05       	cpc	r17, r7
     ad4:	09 f0       	breq	.+2      	; 0xad8 <_ZL5proc1Pv+0x2a8>
     ad6:	3b c1       	rjmp	.+630    	; 0xd4e <_ZL5proc1Pv+0x51e>
     ad8:	e1 10       	cpse	r14, r1
     ada:	11 c0       	rjmp	.+34     	; 0xafe <_ZL5proc1Pv+0x2ce>
     adc:	9e 01       	movw	r18, r28
     ade:	25 5f       	subi	r18, 0xF5	; 245
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	44 2d       	mov	r20, r4
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	84 2d       	mov	r24, r4
     aea:	d3 db       	rcall	.-2138   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     aec:	48 e0       	ldi	r20, 0x08	; 8
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	be 01       	movw	r22, r28
     af2:	65 5f       	subi	r22, 0xF5	; 245
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	c6 01       	movw	r24, r12
     af8:	47 dc       	rcall	.-1906   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
     afa:	38 01       	movw	r6, r16
     afc:	2b c0       	rjmp	.+86     	; 0xb54 <_ZL5proc1Pv+0x324>
     afe:	f4 e0       	ldi	r31, 0x04	; 4
     b00:	ef 12       	cpse	r14, r31
     b02:	11 c0       	rjmp	.+34     	; 0xb26 <_ZL5proc1Pv+0x2f6>
     b04:	9e 01       	movw	r18, r28
     b06:	25 5f       	subi	r18, 0xF5	; 245
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	44 2d       	mov	r20, r4
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	bf db       	rcall	.-2178   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     b14:	48 e0       	ldi	r20, 0x08	; 8
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	be 01       	movw	r22, r28
     b1a:	65 5f       	subi	r22, 0xF5	; 245
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	c6 01       	movw	r24, r12
     b20:	33 dc       	rcall	.-1946   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
     b22:	38 01       	movw	r6, r16
     b24:	2c c0       	rjmp	.+88     	; 0xb7e <_ZL5proc1Pv+0x34e>
     b26:	38 01       	movw	r6, r16
     b28:	85 e0       	ldi	r24, 0x05	; 5
     b2a:	e8 12       	cpse	r14, r24
     b2c:	13 c0       	rjmp	.+38     	; 0xb54 <_ZL5proc1Pv+0x324>
     b2e:	f5 01       	movw	r30, r10
     b30:	40 89       	ldd	r20, Z+16	; 0x10
     b32:	51 89       	ldd	r21, Z+17	; 0x11
     b34:	9e 01       	movw	r18, r28
     b36:	25 5f       	subi	r18, 0xF5	; 245
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	6d e2       	ldi	r22, 0x2D	; 45
     b3c:	71 e0       	ldi	r23, 0x01	; 1
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	be db       	rcall	.-2180   	; 0x2be <_Z15Function06WriteciiP16InputOutput8Byte>
     b42:	48 e0       	ldi	r20, 0x08	; 8
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	be 01       	movw	r22, r28
     b48:	65 5f       	subi	r22, 0xF5	; 245
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	c6 01       	movw	r24, r12
     b4e:	1c dc       	rcall	.-1992   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
     b50:	e5 2c       	mov	r14, r5
     b52:	15 c0       	rjmp	.+42     	; 0xb7e <_ZL5proc1Pv+0x34e>
     b54:	f1 e0       	ldi	r31, 0x01	; 1
     b56:	ef 12       	cpse	r14, r31
     b58:	12 c0       	rjmp	.+36     	; 0xb7e <_ZL5proc1Pv+0x34e>
     b5a:	f5 01       	movw	r30, r10
     b5c:	44 81       	ldd	r20, Z+4	; 0x04
     b5e:	55 81       	ldd	r21, Z+5	; 0x05
     b60:	9e 01       	movw	r18, r28
     b62:	25 5f       	subi	r18, 0xF5	; 245
     b64:	3f 4f       	sbci	r19, 0xFF	; 255
     b66:	6e e2       	ldi	r22, 0x2E	; 46
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	84 2d       	mov	r24, r4
     b6c:	a8 db       	rcall	.-2224   	; 0x2be <_Z15Function06WriteciiP16InputOutput8Byte>
     b6e:	48 e0       	ldi	r20, 0x08	; 8
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	be 01       	movw	r22, r28
     b74:	65 5f       	subi	r22, 0xF5	; 245
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	c6 01       	movw	r24, r12
     b7a:	06 dc       	rcall	.-2036   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
     b7c:	e5 2c       	mov	r14, r5
     b7e:	c6 01       	movw	r24, r12
     b80:	6b dc       	rcall	.-1834   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     b82:	82 30       	cpi	r24, 0x02	; 2
     b84:	b0 f0       	brcs	.+44     	; 0xbb2 <_ZL5proc1Pv+0x382>
     b86:	f1 10       	cpse	r15, r1
     b88:	14 c0       	rjmp	.+40     	; 0xbb2 <_ZL5proc1Pv+0x382>
     b8a:	c6 01       	movw	r24, r12
     b8c:	39 dc       	rcall	.-1934   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	c6 01       	movw	r24, r12
     b92:	36 dc       	rcall	.-1940   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     b94:	8a 83       	std	Y+2, r24	; 0x02
     b96:	99 81       	ldd	r25, Y+1	; 0x01
     b98:	91 30       	cpi	r25, 0x01	; 1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <_ZL5proc1Pv+0x36e>
     b9c:	18 c1       	rjmp	.+560    	; 0xdce <_ZL5proc1Pv+0x59e>
     b9e:	92 30       	cpi	r25, 0x02	; 2
     ba0:	09 f4       	brne	.+2      	; 0xba4 <_ZL5proc1Pv+0x374>
     ba2:	d8 c0       	rjmp	.+432    	; 0xd54 <_ZL5proc1Pv+0x524>
     ba4:	93 30       	cpi	r25, 0x03	; 3
     ba6:	09 f0       	breq	.+2      	; 0xbaa <_ZL5proc1Pv+0x37a>
     ba8:	0e c1       	rjmp	.+540    	; 0xdc6 <_ZL5proc1Pv+0x596>
     baa:	28 c1       	rjmp	.+592    	; 0xdfc <_ZL5proc1Pv+0x5cc>
     bac:	86 30       	cpi	r24, 0x06	; 6
     bae:	09 f4       	brne	.+2      	; 0xbb2 <_ZL5proc1Pv+0x382>
     bb0:	13 c1       	rjmp	.+550    	; 0xdd8 <_ZL5proc1Pv+0x5a8>
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	ff 12       	cpse	r15, r31
     bb6:	39 c0       	rjmp	.+114    	; 0xc2a <_ZL5proc1Pv+0x3fa>
     bb8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <_ZL5proc1Pv+0x390>
     bbe:	d4 c0       	rjmp	.+424    	; 0xd68 <_ZL5proc1Pv+0x538>
     bc0:	c6 01       	movw	r24, r12
     bc2:	4a dc       	rcall	.-1900   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     bc4:	85 30       	cpi	r24, 0x05	; 5
     bc6:	08 f4       	brcc	.+2      	; 0xbca <_ZL5proc1Pv+0x39a>
     bc8:	cd c0       	rjmp	.+410    	; 0xd64 <_ZL5proc1Pv+0x534>
     bca:	8e 01       	movw	r16, r28
     bcc:	0d 5f       	subi	r16, 0xFD	; 253
     bce:	1f 4f       	sbci	r17, 0xFF	; 255
     bd0:	c6 01       	movw	r24, r12
     bd2:	16 dc       	rcall	.-2004   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     bd4:	f8 01       	movw	r30, r16
     bd6:	81 93       	st	Z+, r24
     bd8:	8f 01       	movw	r16, r30
     bda:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bdc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bde:	e8 17       	cp	r30, r24
     be0:	f9 07       	cpc	r31, r25
     be2:	b1 f7       	brne	.-20     	; 0xbd0 <_ZL5proc1Pv+0x3a0>
     be4:	be 01       	movw	r22, r28
     be6:	6d 5e       	subi	r22, 0xED	; 237
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	37 db       	rcall	.-2450   	; 0x25e <_Z16getFunction3DataPcP7GetData>
     bf0:	8e 89       	ldd	r24, Y+22	; 0x16
     bf2:	9f 89       	ldd	r25, Y+23	; 0x17
     bf4:	f5 01       	movw	r30, r10
     bf6:	93 83       	std	Z+3, r25	; 0x03
     bf8:	82 83       	std	Z+2, r24	; 0x02
     bfa:	68 94       	set
     bfc:	ee 24       	eor	r14, r14
     bfe:	e2 f8       	bld	r14, 2
     c00:	f5 2c       	mov	r15, r5
     c02:	f5 c0       	rjmp	.+490    	; 0xdee <_ZL5proc1Pv+0x5be>
     c04:	c6 01       	movw	r24, r12
     c06:	28 dc       	rcall	.-1968   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     c08:	86 30       	cpi	r24, 0x06	; 6
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <_ZL5proc1Pv+0x3de>
     c0c:	b1 c0       	rjmp	.+354    	; 0xd70 <_ZL5proc1Pv+0x540>
     c0e:	8e 01       	movw	r16, r28
     c10:	0d 5f       	subi	r16, 0xFD	; 253
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	c6 01       	movw	r24, r12
     c16:	f4 db       	rcall	.-2072   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     c18:	f8 01       	movw	r30, r16
     c1a:	81 93       	st	Z+, r24
     c1c:	8f 01       	movw	r16, r30
     c1e:	e2 15       	cp	r30, r2
     c20:	f3 05       	cpc	r31, r3
     c22:	c1 f7       	brne	.-16     	; 0xc14 <_ZL5proc1Pv+0x3e4>
     c24:	a5 c0       	rjmp	.+330    	; 0xd70 <_ZL5proc1Pv+0x540>
     c26:	f3 e0       	ldi	r31, 0x03	; 3
     c28:	fc 8f       	std	Y+28, r31	; 0x1c
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	f8 12       	cpse	r15, r24
     c2e:	41 c0       	rjmp	.+130    	; 0xcb2 <_ZL5proc1Pv+0x482>
     c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c32:	93 30       	cpi	r25, 0x03	; 3
     c34:	09 f0       	breq	.+2      	; 0xc38 <_ZL5proc1Pv+0x408>
     c36:	a6 c0       	rjmp	.+332    	; 0xd84 <_ZL5proc1Pv+0x554>
     c38:	c6 01       	movw	r24, r12
     c3a:	0e dc       	rcall	.-2020   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     c3c:	85 30       	cpi	r24, 0x05	; 5
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <_ZL5proc1Pv+0x412>
     c40:	9c c0       	rjmp	.+312    	; 0xd7a <_ZL5proc1Pv+0x54a>
     c42:	8e 01       	movw	r16, r28
     c44:	0d 5f       	subi	r16, 0xFD	; 253
     c46:	1f 4f       	sbci	r17, 0xFF	; 255
     c48:	c6 01       	movw	r24, r12
     c4a:	da db       	rcall	.-2124   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     c4c:	f8 01       	movw	r30, r16
     c4e:	81 93       	st	Z+, r24
     c50:	8f 01       	movw	r16, r30
     c52:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c54:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c56:	e8 17       	cp	r30, r24
     c58:	f9 07       	cpc	r31, r25
     c5a:	b1 f7       	brne	.-20     	; 0xc48 <_ZL5proc1Pv+0x418>
     c5c:	8e c0       	rjmp	.+284    	; 0xd7a <_ZL5proc1Pv+0x54a>
     c5e:	c6 01       	movw	r24, r12
     c60:	fb db       	rcall	.-2058   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     c62:	86 30       	cpi	r24, 0x06	; 6
     c64:	58 f0       	brcs	.+22     	; 0xc7c <_ZL5proc1Pv+0x44c>
     c66:	8e 01       	movw	r16, r28
     c68:	0d 5f       	subi	r16, 0xFD	; 253
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	c6 01       	movw	r24, r12
     c6e:	c8 db       	rcall	.-2160   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     c70:	f8 01       	movw	r30, r16
     c72:	81 93       	st	Z+, r24
     c74:	8f 01       	movw	r16, r30
     c76:	e2 15       	cp	r30, r2
     c78:	f3 05       	cpc	r31, r3
     c7a:	c1 f7       	brne	.-16     	; 0xc6c <_ZL5proc1Pv+0x43c>
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	09 f0       	breq	.+2      	; 0xc84 <_ZL5proc1Pv+0x454>
     c82:	84 c0       	rjmp	.+264    	; 0xd8c <_ZL5proc1Pv+0x55c>
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	98 2f       	mov	r25, r24
     c8a:	88 27       	eor	r24, r24
     c8c:	2e 81       	ldd	r18, Y+6	; 0x06
     c8e:	82 2b       	or	r24, r18
     c90:	f5 01       	movw	r30, r10
     c92:	91 87       	std	Z+9, r25	; 0x09
     c94:	80 87       	std	Z+8, r24	; 0x08
     c96:	64 e6       	ldi	r22, 0x64	; 100
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__divmodhi4>
     c9e:	cb 01       	movw	r24, r22
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	68 0f       	add	r22, r24
     caa:	79 1f       	adc	r23, r25
     cac:	73 87       	std	Z+11, r23	; 0x0b
     cae:	62 87       	std	Z+10, r22	; 0x0a
     cb0:	6d c0       	rjmp	.+218    	; 0xd8c <_ZL5proc1Pv+0x55c>
     cb2:	f3 e0       	ldi	r31, 0x03	; 3
     cb4:	ff 12       	cpse	r15, r31
     cb6:	3f c0       	rjmp	.+126    	; 0xd36 <_ZL5proc1Pv+0x506>
     cb8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	f9 f4       	brne	.+62     	; 0xcfc <_ZL5proc1Pv+0x4cc>
     cbe:	c6 01       	movw	r24, r12
     cc0:	cb db       	rcall	.-2154   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	c0 f1       	brcs	.+112    	; 0xd36 <_ZL5proc1Pv+0x506>
     cc6:	8e 01       	movw	r16, r28
     cc8:	0d 5f       	subi	r16, 0xFD	; 253
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
     ccc:	c6 01       	movw	r24, r12
     cce:	98 db       	rcall	.-2256   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     cd0:	f8 01       	movw	r30, r16
     cd2:	81 93       	st	Z+, r24
     cd4:	8f 01       	movw	r16, r30
     cd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cda:	e8 17       	cp	r30, r24
     cdc:	f9 07       	cpc	r31, r25
     cde:	b1 f7       	brne	.-20     	; 0xccc <_ZL5proc1Pv+0x49c>
     ce0:	be 01       	movw	r22, r28
     ce2:	6d 5e       	subi	r22, 0xED	; 237
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	ce 01       	movw	r24, r28
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	b9 da       	rcall	.-2702   	; 0x25e <_Z16getFunction3DataPcP7GetData>
     cec:	8e 89       	ldd	r24, Y+22	; 0x16
     cee:	9f 89       	ldd	r25, Y+23	; 0x17
     cf0:	f5 01       	movw	r30, r10
     cf2:	97 87       	std	Z+15, r25	; 0x0f
     cf4:	86 87       	std	Z+14, r24	; 0x0e
     cf6:	e5 2c       	mov	r14, r5
     cf8:	f5 2c       	mov	r15, r5
     cfa:	1d c0       	rjmp	.+58     	; 0xd36 <_ZL5proc1Pv+0x506>
     cfc:	fc 8d       	ldd	r31, Y+28	; 0x1c
     cfe:	f6 30       	cpi	r31, 0x06	; 6
     d00:	d1 f4       	brne	.+52     	; 0xd36 <_ZL5proc1Pv+0x506>
     d02:	c6 01       	movw	r24, r12
     d04:	a9 db       	rcall	.-2222   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     d06:	86 30       	cpi	r24, 0x06	; 6
     d08:	58 f0       	brcs	.+22     	; 0xd20 <_ZL5proc1Pv+0x4f0>
     d0a:	8e 01       	movw	r16, r28
     d0c:	0d 5f       	subi	r16, 0xFD	; 253
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	c6 01       	movw	r24, r12
     d12:	76 db       	rcall	.-2324   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
     d14:	f8 01       	movw	r30, r16
     d16:	81 93       	st	Z+, r24
     d18:	8f 01       	movw	r16, r30
     d1a:	e2 15       	cp	r30, r2
     d1c:	f3 05       	cpc	r31, r3
     d1e:	c1 f7       	brne	.-16     	; 0xd10 <_ZL5proc1Pv+0x4e0>
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	98 2f       	mov	r25, r24
     d26:	88 27       	eor	r24, r24
     d28:	2e 81       	ldd	r18, Y+6	; 0x06
     d2a:	82 2b       	or	r24, r18
     d2c:	f5 01       	movw	r30, r10
     d2e:	91 8b       	std	Z+17, r25	; 0x11
     d30:	80 8b       	std	Z+16, r24	; 0x10
     d32:	e5 2c       	mov	r14, r5
     d34:	f5 2c       	mov	r15, r5
     d36:	8c e2       	ldi	r24, 0x2C	; 44
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskDelay>
     d3e:	84 01       	movw	r16, r8
     d40:	be ce       	rjmp	.-644    	; 0xabe <_ZL5proc1Pv+0x28e>
     d42:	f5 01       	movw	r30, r10
     d44:	04 81       	ldd	r16, Z+4	; 0x04
     d46:	15 81       	ldd	r17, Z+5	; 0x05
     d48:	06 15       	cp	r16, r6
     d4a:	17 05       	cpc	r17, r7
     d4c:	b9 f1       	breq	.+110    	; 0xdbc <_ZL5proc1Pv+0x58c>
     d4e:	38 01       	movw	r6, r16
     d50:	e4 2c       	mov	r14, r4
     d52:	ea ce       	rjmp	.-556    	; 0xb28 <_ZL5proc1Pv+0x2f8>
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	09 f4       	brne	.+2      	; 0xd5a <_ZL5proc1Pv+0x52a>
     d58:	46 c0       	rjmp	.+140    	; 0xde6 <_ZL5proc1Pv+0x5b6>
     d5a:	0f 2e       	mov	r0, r31
     d5c:	f3 e0       	ldi	r31, 0x03	; 3
     d5e:	ff 2e       	mov	r15, r31
     d60:	f0 2d       	mov	r31, r0
     d62:	24 cf       	rjmp	.-440    	; 0xbac <_ZL5proc1Pv+0x37c>
     d64:	f4 2c       	mov	r15, r4
     d66:	43 c0       	rjmp	.+134    	; 0xdee <_ZL5proc1Pv+0x5be>
     d68:	fc 8d       	ldd	r31, Y+28	; 0x1c
     d6a:	f6 30       	cpi	r31, 0x06	; 6
     d6c:	21 f7       	brne	.-56     	; 0xd36 <_ZL5proc1Pv+0x506>
     d6e:	4a cf       	rjmp	.-364    	; 0xc04 <_ZL5proc1Pv+0x3d4>
     d70:	86 e0       	ldi	r24, 0x06	; 6
     d72:	8c 8f       	std	Y+28, r24	; 0x1c
     d74:	e5 2c       	mov	r14, r5
     d76:	f5 2c       	mov	r15, r5
     d78:	de cf       	rjmp	.-68     	; 0xd36 <_ZL5proc1Pv+0x506>
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	9c 8f       	std	Y+28, r25	; 0x1c
     d7e:	e5 2c       	mov	r14, r5
     d80:	f5 2c       	mov	r15, r5
     d82:	d9 cf       	rjmp	.-78     	; 0xd36 <_ZL5proc1Pv+0x506>
     d84:	ec 8d       	ldd	r30, Y+28	; 0x1c
     d86:	e6 30       	cpi	r30, 0x06	; 6
     d88:	b1 f6       	brne	.-84     	; 0xd36 <_ZL5proc1Pv+0x506>
     d8a:	69 cf       	rjmp	.-302    	; 0xc5e <_ZL5proc1Pv+0x42e>
     d8c:	e5 2c       	mov	r14, r5
     d8e:	f5 2c       	mov	r15, r5
     d90:	d2 cf       	rjmp	.-92     	; 0xd36 <_ZL5proc1Pv+0x506>
     d92:	c6 01       	movw	r24, r12
     d94:	61 db       	rcall	.-2366   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     d96:	87 30       	cpi	r24, 0x07	; 7
     d98:	08 f0       	brcs	.+2      	; 0xd9c <_ZL5proc1Pv+0x56c>
     d9a:	c4 cd       	rjmp	.-1144   	; 0x924 <_ZL5proc1Pv+0xf4>
     d9c:	e2 cd       	rjmp	.-1084   	; 0x962 <_ZL5proc1Pv+0x132>
     d9e:	c6 01       	movw	r24, r12
     da0:	5b db       	rcall	.-2378   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     da2:	df cd       	rjmp	.-1090   	; 0x962 <_ZL5proc1Pv+0x132>
     da4:	c6 01       	movw	r24, r12
     da6:	58 db       	rcall	.-2384   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     da8:	f8 2c       	mov	r15, r8
     daa:	46 ce       	rjmp	.-884    	; 0xa38 <_ZL5proc1Pv+0x208>
     dac:	c6 01       	movw	r24, r12
     dae:	54 db       	rcall	.-2392   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
     db0:	87 30       	cpi	r24, 0x07	; 7
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <_ZL5proc1Pv+0x586>
     db4:	19 ce       	rjmp	.-974    	; 0x9e8 <_ZL5proc1Pv+0x1b8>
     db6:	23 2c       	mov	r2, r3
     db8:	f8 2c       	mov	r15, r8
     dba:	3e ce       	rjmp	.-900    	; 0xa38 <_ZL5proc1Pv+0x208>
     dbc:	0f 2e       	mov	r0, r31
     dbe:	f5 e0       	ldi	r31, 0x05	; 5
     dc0:	ef 2e       	mov	r14, r31
     dc2:	f0 2d       	mov	r31, r0
     dc4:	b1 ce       	rjmp	.-670    	; 0xb28 <_ZL5proc1Pv+0x2f8>
     dc6:	83 30       	cpi	r24, 0x03	; 3
     dc8:	09 f0       	breq	.+2      	; 0xdcc <_ZL5proc1Pv+0x59c>
     dca:	f0 ce       	rjmp	.-544    	; 0xbac <_ZL5proc1Pv+0x37c>
     dcc:	2c cf       	rjmp	.-424    	; 0xc26 <_ZL5proc1Pv+0x3f6>
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <_ZL5proc1Pv+0x5a4>
     dd2:	f6 ce       	rjmp	.-532    	; 0xbc0 <_ZL5proc1Pv+0x390>
     dd4:	f4 2c       	mov	r15, r4
     dd6:	ea ce       	rjmp	.-556    	; 0xbac <_ZL5proc1Pv+0x37c>
     dd8:	f1 e0       	ldi	r31, 0x01	; 1
     dda:	ff 16       	cp	r15, r31
     ddc:	09 f4       	brne	.+2      	; 0xde0 <_ZL5proc1Pv+0x5b0>
     dde:	12 cf       	rjmp	.-476    	; 0xc04 <_ZL5proc1Pv+0x3d4>
     de0:	86 e0       	ldi	r24, 0x06	; 6
     de2:	8c 8f       	std	Y+28, r24	; 0x1c
     de4:	22 cf       	rjmp	.-444    	; 0xc2a <_ZL5proc1Pv+0x3fa>
     de6:	0f 2e       	mov	r0, r31
     de8:	f3 e0       	ldi	r31, 0x03	; 3
     dea:	ff 2e       	mov	r15, r31
     dec:	f0 2d       	mov	r31, r0
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	f9 16       	cp	r15, r25
     df2:	09 f4       	brne	.+2      	; 0xdf6 <_ZL5proc1Pv+0x5c6>
     df4:	21 cf       	rjmp	.-446    	; 0xc38 <_ZL5proc1Pv+0x408>
     df6:	e3 e0       	ldi	r30, 0x03	; 3
     df8:	ec 8f       	std	Y+28, r30	; 0x1c
     dfa:	5b cf       	rjmp	.-330    	; 0xcb2 <_ZL5proc1Pv+0x482>
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	09 f4       	brne	.+2      	; 0xe02 <_ZL5proc1Pv+0x5d2>
     e00:	1b cf       	rjmp	.-458    	; 0xc38 <_ZL5proc1Pv+0x408>
     e02:	68 94       	set
     e04:	ff 24       	eor	r15, r15
     e06:	f1 f8       	bld	r15, 1
     e08:	d1 ce       	rjmp	.-606    	; 0xbac <_ZL5proc1Pv+0x37c>

00000e0a <_Z8Uart_ISR8Dev_typej>:
     e0a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <DataStruct>
     e0e:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <DataStruct+0x1>
     e12:	95 ca       	rjmp	.-2774   	; 0x33e <_ZN12SerialBuffer11SerialstoreEc>
     e14:	08 95       	ret

00000e16 <_Z9RS485_ISR8Dev_typej>:
     e16:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <DataStruct+0x2>
     e1a:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <DataStruct+0x3>
     e1e:	8f ca       	rjmp	.-2786   	; 0x33e <_ZN12SerialBuffer11SerialstoreEc>
     e20:	08 95       	ret

00000e22 <_ZL5proc2Pv>:
     e22:	80 ee       	ldi	r24, 0xE0	; 224
     e24:	84 bb       	out	0x14, r24	; 20
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	85 bb       	out	0x15, r24	; 21
     e2a:	10 bc       	out	0x20, r1	; 32
     e2c:	e6 e5       	ldi	r30, 0x56	; 86
     e2e:	f1 e0       	ldi	r31, 0x01	; 1
     e30:	98 9b       	sbis	0x13, 0	; 19
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <_ZL5proc2Pv+0x1c>
     e34:	80 81       	ld	r24, Z
     e36:	80 68       	ori	r24, 0x80	; 128
     e38:	80 83       	st	Z, r24
     e3a:	ad 9a       	sbi	0x15, 5	; 21
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <_ZL5proc2Pv+0x26>
     e3e:	80 81       	ld	r24, Z
     e40:	8f 77       	andi	r24, 0x7F	; 127
     e42:	80 83       	st	Z, r24
     e44:	ad 98       	cbi	0x15, 5	; 21
     e46:	ae 98       	cbi	0x15, 6	; 21
     e48:	99 9b       	sbis	0x13, 1	; 19
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <_ZL5proc2Pv+0x32>
     e4c:	81 81       	ldd	r24, Z+1	; 0x01
     e4e:	81 60       	ori	r24, 0x01	; 1
     e50:	81 83       	std	Z+1, r24	; 0x01
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <_ZL5proc2Pv+0x38>
     e54:	81 81       	ldd	r24, Z+1	; 0x01
     e56:	8e 7f       	andi	r24, 0xFE	; 254
     e58:	81 83       	std	Z+1, r24	; 0x01
     e5a:	9a 9b       	sbis	0x13, 2	; 19
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <_ZL5proc2Pv+0x44>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	82 60       	ori	r24, 0x02	; 2
     e62:	81 83       	std	Z+1, r24	; 0x01
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <_ZL5proc2Pv+0x4a>
     e66:	81 81       	ldd	r24, Z+1	; 0x01
     e68:	8d 7f       	andi	r24, 0xFD	; 253
     e6a:	81 83       	std	Z+1, r24	; 0x01
     e6c:	9b 9b       	sbis	0x13, 3	; 19
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <_ZL5proc2Pv+0x56>
     e70:	81 81       	ldd	r24, Z+1	; 0x01
     e72:	84 60       	ori	r24, 0x04	; 4
     e74:	81 83       	std	Z+1, r24	; 0x01
     e76:	dc cf       	rjmp	.-72     	; 0xe30 <_ZL5proc2Pv+0xe>
     e78:	81 81       	ldd	r24, Z+1	; 0x01
     e7a:	8b 7f       	andi	r24, 0xFB	; 251
     e7c:	81 83       	std	Z+1, r24	; 0x01
     e7e:	d8 cf       	rjmp	.-80     	; 0xe30 <_ZL5proc2Pv+0xe>

00000e80 <_Z8Init_Devv>:
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	88 e0       	ldi	r24, 0x08	; 8
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	2c db       	rcall	.-2472   	; 0x4e2 <_ZN11Dev_ManagernwEj>
     e8a:	ec 01       	movw	r28, r24
     e8c:	fb da       	rcall	.-2570   	; 0x484 <_ZN11Dev_ManagerC1Ev>
     e8e:	d0 93 8b 01 	sts	0x018B, r29	; 0x80018b <dev+0x1>
     e92:	c0 93 8a 01 	sts	0x018A, r28	; 0x80018a <dev>
     e96:	86 e0       	ldi	r24, 0x06	; 6
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	7a dc       	rcall	.-1804   	; 0x790 <_ZN10UartDrivernwEj>
     e9c:	ec 01       	movw	r28, r24
     e9e:	68 dc       	rcall	.-1840   	; 0x770 <_ZN10UartDriverC1Ev>
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	be 01       	movw	r22, r28
     ea4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <dev>
     ea8:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <dev+0x1>
     eac:	11 db       	rcall	.-2526   	; 0x4d0 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
     eae:	86 e0       	ldi	r24, 0x06	; 6
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	f1 db       	rcall	.-2078   	; 0x696 <_ZN11RS485DrivernwEj>
     eb4:	ec 01       	movw	r28, r24
     eb6:	df db       	rcall	.-2114   	; 0x676 <_ZN11RS485DriverC1Ev>
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	be 01       	movw	r22, r28
     ebc:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <dev>
     ec0:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <dev+0x1>
     ec4:	05 db       	rcall	.-2550   	; 0x4d0 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <dev>
     ecc:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <dev+0x1>
     ed0:	1e db       	rcall	.-2500   	; 0x50e <_ZN11Dev_Manager11Device_InitE8Dev_type>
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <dev>
     ed8:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <dev+0x1>
     edc:	18 db       	rcall	.-2512   	; 0x50e <_ZN11Dev_Manager11Device_InitE8Dev_type>
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <main>:
     ee4:	cf 92       	push	r12
     ee6:	df 92       	push	r13
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	f8 94       	cli
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     efa:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     efe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     f02:	88 9a       	sbi	0x11, 0	; 17
     f04:	82 b9       	out	0x02, r24	; 2
     f06:	13 b8       	out	0x03, r1	; 3
     f08:	87 bb       	out	0x17, r24	; 23
     f0a:	88 bb       	out	0x18, r24	; 24
     f0c:	b9 df       	rcall	.-142    	; 0xe80 <_Z8Init_Devv>
     f0e:	45 e0       	ldi	r20, 0x05	; 5
     f10:	57 e0       	ldi	r21, 0x07	; 7
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <dev>
     f18:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <dev+0x1>
     f1c:	0a db       	rcall	.-2540   	; 0x532 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
     f1e:	4b e0       	ldi	r20, 0x0B	; 11
     f20:	57 e0       	ldi	r21, 0x07	; 7
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <dev>
     f28:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <dev+0x1>
     f2c:	02 db       	rcall	.-2556   	; 0x532 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
     f2e:	88 e8       	ldi	r24, 0x88	; 136
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	03 da       	rcall	.-3066   	; 0x33a <_ZN12SerialBuffernwEj>
     f34:	6c 01       	movw	r12, r24
     f36:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <dev>
     f3a:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <dev+0x1>
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	d7 d9       	rcall	.-3154   	; 0x2f0 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>
     f42:	88 e8       	ldi	r24, 0x88	; 136
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	f9 d9       	rcall	.-3086   	; 0x33a <_ZN12SerialBuffernwEj>
     f48:	ec 01       	movw	r28, r24
     f4a:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <dev>
     f4e:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <dev+0x1>
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	cd d9       	rcall	.-3174   	; 0x2f0 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>
     f56:	e6 e8       	ldi	r30, 0x86	; 134
     f58:	f1 e0       	ldi	r31, 0x01	; 1
     f5a:	d1 82       	std	Z+1, r13	; 0x01
     f5c:	c0 82       	st	Z, r12
     f5e:	d3 83       	std	Z+3, r29	; 0x03
     f60:	c2 83       	std	Z+2, r28	; 0x02
     f62:	78 94       	sei
     f64:	e1 2c       	mov	r14, r1
     f66:	f1 2c       	mov	r15, r1
     f68:	02 e0       	ldi	r16, 0x02	; 2
     f6a:	96 01       	movw	r18, r12
     f6c:	40 ef       	ldi	r20, 0xF0	; 240
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	68 e1       	ldi	r22, 0x18	; 24
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	82 e4       	ldi	r24, 0x42	; 66
     f76:	98 e0       	ldi	r25, 0x08	; 8
     f78:	c7 d6       	rcall	.+3470   	; 0x1d08 <xTaskCreate>
     f7a:	9e 01       	movw	r18, r28
     f7c:	40 ef       	ldi	r20, 0xF0	; 240
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	6e e1       	ldi	r22, 0x1E	; 30
     f82:	71 e0       	ldi	r23, 0x01	; 1
     f84:	88 e1       	ldi	r24, 0x18	; 24
     f86:	94 e0       	ldi	r25, 0x04	; 4
     f88:	bf d6       	rcall	.+3454   	; 0x1d08 <xTaskCreate>
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 ef       	ldi	r20, 0xF0	; 240
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	64 e2       	ldi	r22, 0x24	; 36
     f94:	71 e0       	ldi	r23, 0x01	; 1
     f96:	81 e1       	ldi	r24, 0x11	; 17
     f98:	97 e0       	ldi	r25, 0x07	; 7
     f9a:	b6 d6       	rcall	.+3436   	; 0x1d08 <xTaskCreate>
     f9c:	b3 d7       	rcall	.+3942   	; 0x1f04 <vTaskStartScheduler>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	cf 90       	pop	r12
     fb0:	08 95       	ret

00000fb2 <_Z17func05_output_ctlPci>:
     fb2:	ab 01       	movw	r20, r22
     fb4:	42 50       	subi	r20, 0x02	; 2
     fb6:	51 09       	sbc	r21, r1
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	43 30       	cpi	r20, 0x03	; 3
     fbc:	51 05       	cpc	r21, r1
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <_Z17func05_output_ctlPci+0x10>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	fc 01       	movw	r30, r24
     fc4:	e6 0f       	add	r30, r22
     fc6:	f7 1f       	adc	r31, r23
     fc8:	80 81       	ld	r24, Z
     fca:	88 23       	and	r24, r24
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <_Z17func05_output_ctlPci+0x1e>
     fce:	3f c0       	rjmp	.+126    	; 0x104e <_Z17func05_output_ctlPci+0x9c>
     fd0:	e6 e5       	ldi	r30, 0x56	; 86
     fd2:	f1 e0       	ldi	r31, 0x01	; 1
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	06 2e       	mov	r0, r22
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <_Z17func05_output_ctlPci+0x2e>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <_Z17func05_output_ctlPci+0x2a>
     fe4:	90 81       	ld	r25, Z
     fe6:	89 2b       	or	r24, r25
     fe8:	80 83       	st	Z, r24
     fea:	22 23       	and	r18, r18
     fec:	61 f0       	breq	.+24     	; 0x1006 <_Z17func05_output_ctlPci+0x54>
     fee:	28 b3       	in	r18, 0x18	; 24
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	06 2e       	mov	r0, r22
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <_Z17func05_output_ctlPci+0x4a>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <_Z17func05_output_ctlPci+0x46>
    1000:	80 95       	com	r24
    1002:	82 23       	and	r24, r18
    1004:	88 bb       	out	0x18, r24	; 24
    1006:	62 30       	cpi	r22, 0x02	; 2
    1008:	71 05       	cpc	r23, r1
    100a:	39 f4       	brne	.+14     	; 0x101a <_Z17func05_output_ctlPci+0x68>
    100c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <inverter>
    1010:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <mem4+0x7>
    1014:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <mem4+0x6>
    1018:	08 95       	ret
    101a:	63 30       	cpi	r22, 0x03	; 3
    101c:	71 05       	cpc	r23, r1
    101e:	51 f4       	brne	.+20     	; 0x1034 <_Z17func05_output_ctlPci+0x82>
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <inverter>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <mem4+0x7>
    102e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <mem4+0x6>
    1032:	08 95       	ret
    1034:	64 30       	cpi	r22, 0x04	; 4
    1036:	71 05       	cpc	r23, r1
    1038:	21 f5       	brne	.+72     	; 0x1082 <_Z17func05_output_ctlPci+0xd0>
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <inverter>
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <mem4+0x7>
    1048:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <mem4+0x6>
    104c:	08 95       	ret
    104e:	e6 e5       	ldi	r30, 0x56	; 86
    1050:	f1 e0       	ldi	r31, 0x01	; 1
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	06 2e       	mov	r0, r22
    1058:	02 c0       	rjmp	.+4      	; 0x105e <_Z17func05_output_ctlPci+0xac>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <_Z17func05_output_ctlPci+0xa8>
    1062:	80 95       	com	r24
    1064:	90 81       	ld	r25, Z
    1066:	89 23       	and	r24, r25
    1068:	80 83       	st	Z, r24
    106a:	22 23       	and	r18, r18
    106c:	51 f0       	breq	.+20     	; 0x1082 <_Z17func05_output_ctlPci+0xd0>
    106e:	28 b3       	in	r18, 0x18	; 24
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <_Z17func05_output_ctlPci+0xc8>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	6a 95       	dec	r22
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <_Z17func05_output_ctlPci+0xc4>
    107e:	82 2b       	or	r24, r18
    1080:	88 bb       	out	0x18, r24	; 24
    1082:	08 95       	ret

00001084 <_ZL4procPv>:
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	2a 97       	sbiw	r28, 0x0a	; 10
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	7c 01       	movw	r14, r24
    109a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <mem1>
    109e:	84 ef       	ldi	r24, 0xF4	; 244
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <mem4+0x1>
    10a6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <mem4>
    10aa:	b1 2c       	mov	r11, r1
    10ac:	2e 01       	movw	r4, r28
    10ae:	8c e0       	ldi	r24, 0x0C	; 12
    10b0:	48 0e       	add	r4, r24
    10b2:	51 1c       	adc	r5, r1
    10b4:	05 e6       	ldi	r16, 0x65	; 101
    10b6:	10 e0       	ldi	r17, 0x00	; 0
    10b8:	dd 24       	eor	r13, r13
    10ba:	da 94       	dec	r13
    10bc:	7d 2c       	mov	r7, r13
    10be:	31 2c       	mov	r3, r1
    10c0:	cc 24       	eor	r12, r12
    10c2:	c3 94       	inc	r12
    10c4:	4e 01       	movw	r8, r28
    10c6:	99 e0       	ldi	r25, 0x09	; 9
    10c8:	89 0e       	add	r8, r25
    10ca:	91 1c       	adc	r9, r1
    10cc:	0f 2e       	mov	r0, r31
    10ce:	f5 e0       	ldi	r31, 0x05	; 5
    10d0:	2f 2e       	mov	r2, r31
    10d2:	f0 2d       	mov	r31, r0
    10d4:	68 94       	set
    10d6:	66 24       	eor	r6, r6
    10d8:	62 f8       	bld	r6, 2
    10da:	0d c0       	rjmp	.+26     	; 0x10f6 <_ZL4procPv+0x72>
    10dc:	ac 2c       	mov	r10, r12
    10de:	bc 2c       	mov	r11, r12
    10e0:	0a c0       	rjmp	.+20     	; 0x10f6 <_ZL4procPv+0x72>
    10e2:	a6 2c       	mov	r10, r6
    10e4:	bc 2c       	mov	r11, r12
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <_ZL4procPv+0x72>
    10e8:	a2 2c       	mov	r10, r2
    10ea:	bc 2c       	mov	r11, r12
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <_ZL4procPv+0x72>
    10ee:	68 94       	set
    10f0:	aa 24       	eor	r10, r10
    10f2:	a4 f8       	bld	r10, 4
    10f4:	bc 2c       	mov	r11, r12
    10f6:	b1 10       	cpse	r11, r1
    10f8:	41 c0       	rjmp	.+130    	; 0x117c <__stack+0x7d>
    10fa:	c7 01       	movw	r24, r14
    10fc:	ad d9       	rcall	.-3238   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	d0 f3       	brcs	.-12     	; 0x10f6 <_ZL4procPv+0x72>
    1102:	f8 01       	movw	r30, r16
    1104:	d0 82       	st	Z, r13
    1106:	c7 01       	movw	r24, r14
    1108:	7b d9       	rcall	.-3338   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	f8 01       	movw	r30, r16
    110e:	10 82       	st	Z, r1
    1110:	d0 82       	st	Z, r13
    1112:	c7 01       	movw	r24, r14
    1114:	75 d9       	rcall	.-3350   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
    1116:	8a 83       	std	Y+2, r24	; 0x02
    1118:	f8 01       	movw	r30, r16
    111a:	10 82       	st	Z, r1
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	69 f0       	breq	.+26     	; 0x113c <__stack+0x3d>
    1122:	c0 92 37 01 	sts	0x0137, r12	; 0x800137 <buffer_flag>
    1126:	c3 b8       	out	0x03, r12	; 3
    1128:	e2 e4       	ldi	r30, 0x42	; 66
    112a:	f1 e0       	ldi	r31, 0x01	; 1
    112c:	82 85       	ldd	r24, Z+10	; 0x0a
    112e:	93 85       	ldd	r25, Z+11	; 0x0b
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	93 87       	std	Z+11, r25	; 0x0b
    1134:	82 87       	std	Z+10, r24	; 0x0a
    1136:	c7 01       	movw	r24, r14
    1138:	9a d9       	rcall	.-3276   	; 0x46e <_ZN12SerialBuffer11SerialFlushEv>
    113a:	13 b8       	out	0x03, r1	; 3
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	11 f1       	breq	.+68     	; 0x1186 <__stack+0x87>
    1142:	84 30       	cpi	r24, 0x04	; 4
    1144:	09 f4       	brne	.+2      	; 0x1148 <__stack+0x49>
    1146:	47 c0       	rjmp	.+142    	; 0x11d6 <__stack+0xd7>
    1148:	85 30       	cpi	r24, 0x05	; 5
    114a:	09 f4       	brne	.+2      	; 0x114e <__stack+0x4f>
    114c:	6c c0       	rjmp	.+216    	; 0x1226 <__stack+0x127>
    114e:	80 31       	cpi	r24, 0x10	; 16
    1150:	09 f4       	brne	.+2      	; 0x1154 <__stack+0x55>
    1152:	9f c0       	rjmp	.+318    	; 0x1292 <__stack+0x193>
    1154:	2c 2d       	mov	r18, r12
    1156:	4c 2d       	mov	r20, r12
    1158:	60 e6       	ldi	r22, 0x60	; 96
    115a:	71 e0       	ldi	r23, 0x01	; 1
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	6e d8       	rcall	.-3876   	; 0x23e <_Z16GetExceptionCodePcP16RspExceptionCodecc>
    1162:	45 e0       	ldi	r20, 0x05	; 5
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	60 e6       	ldi	r22, 0x60	; 96
    1168:	71 e0       	ldi	r23, 0x01	; 1
    116a:	c7 01       	movw	r24, r14
    116c:	0d d9       	rcall	.-3558   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
    116e:	c0 92 37 01 	sts	0x0137, r12	; 0x800137 <buffer_flag>
    1172:	63 b8       	out	0x03, r6	; 3
    1174:	c7 01       	movw	r24, r14
    1176:	7b d9       	rcall	.-3338   	; 0x46e <_ZN12SerialBuffer11SerialFlushEv>
    1178:	13 b8       	out	0x03, r1	; 3
    117a:	bd cf       	rjmp	.-134    	; 0x10f6 <_ZL4procPv+0x72>
    117c:	f1 e0       	ldi	r31, 0x01	; 1
    117e:	bf 12       	cpse	r11, r31
    1180:	ba cf       	rjmp	.-140    	; 0x10f6 <_ZL4procPv+0x72>
    1182:	af 12       	cpse	r10, r31
    1184:	25 c0       	rjmp	.+74     	; 0x11d0 <__stack+0xd1>
    1186:	c7 01       	movw	r24, r14
    1188:	67 d9       	rcall	.-3378   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
    118a:	86 30       	cpi	r24, 0x06	; 6
    118c:	08 f4       	brcc	.+2      	; 0x1190 <__stack+0x91>
    118e:	a6 cf       	rjmp	.-180    	; 0x10dc <_ZL4procPv+0x58>
    1190:	ce 01       	movw	r24, r28
    1192:	03 96       	adiw	r24, 0x03	; 3
    1194:	5c 01       	movw	r10, r24
    1196:	f8 01       	movw	r30, r16
    1198:	70 82       	st	Z, r7
    119a:	c7 01       	movw	r24, r14
    119c:	31 d9       	rcall	.-3486   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
    119e:	f5 01       	movw	r30, r10
    11a0:	81 93       	st	Z+, r24
    11a2:	5f 01       	movw	r10, r30
    11a4:	f8 01       	movw	r30, r16
    11a6:	10 82       	st	Z, r1
    11a8:	a8 14       	cp	r10, r8
    11aa:	b9 04       	cpc	r11, r9
    11ac:	a1 f7       	brne	.-24     	; 0x1196 <__stack+0x97>
    11ae:	46 e5       	ldi	r20, 0x56	; 86
    11b0:	51 e0       	ldi	r21, 0x01	; 1
    11b2:	6f e7       	ldi	r22, 0x7F	; 127
    11b4:	71 e0       	ldi	r23, 0x01	; 1
    11b6:	ce 01       	movw	r24, r28
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	0e 94 83 00 	call	0x106	; 0x106 <_Z13GetFunc01DataPcP17GetFunctionCode01S_>
    11be:	47 e0       	ldi	r20, 0x07	; 7
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	6f e7       	ldi	r22, 0x7F	; 127
    11c4:	71 e0       	ldi	r23, 0x01	; 1
    11c6:	c7 01       	movw	r24, r14
    11c8:	df d8       	rcall	.-3650   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
    11ca:	ac 2c       	mov	r10, r12
    11cc:	b3 2c       	mov	r11, r3
    11ce:	93 cf       	rjmp	.-218    	; 0x10f6 <_ZL4procPv+0x72>
    11d0:	f4 e0       	ldi	r31, 0x04	; 4
    11d2:	af 12       	cpse	r10, r31
    11d4:	25 c0       	rjmp	.+74     	; 0x1220 <__stack+0x121>
    11d6:	c7 01       	movw	r24, r14
    11d8:	3f d9       	rcall	.-3458   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
    11da:	86 30       	cpi	r24, 0x06	; 6
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <__stack+0xe1>
    11de:	81 cf       	rjmp	.-254    	; 0x10e2 <_ZL4procPv+0x5e>
    11e0:	ce 01       	movw	r24, r28
    11e2:	03 96       	adiw	r24, 0x03	; 3
    11e4:	5c 01       	movw	r10, r24
    11e6:	f8 01       	movw	r30, r16
    11e8:	70 82       	st	Z, r7
    11ea:	c7 01       	movw	r24, r14
    11ec:	09 d9       	rcall	.-3566   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
    11ee:	f5 01       	movw	r30, r10
    11f0:	81 93       	st	Z+, r24
    11f2:	5f 01       	movw	r10, r30
    11f4:	f8 01       	movw	r30, r16
    11f6:	10 82       	st	Z, r1
    11f8:	a8 14       	cp	r10, r8
    11fa:	b9 04       	cpc	r11, r9
    11fc:	a1 f7       	brne	.-24     	; 0x11e6 <__stack+0xe7>
    11fe:	42 e4       	ldi	r20, 0x42	; 66
    1200:	51 e0       	ldi	r21, 0x01	; 1
    1202:	60 e7       	ldi	r22, 0x70	; 112
    1204:	71 e0       	ldi	r23, 0x01	; 1
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 a2 00 	call	0x144	; 0x144 <_Z13GetFunc04DataPcP17GetFunctionCode04Pi>
    120e:	47 e0       	ldi	r20, 0x07	; 7
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	60 e7       	ldi	r22, 0x70	; 112
    1214:	71 e0       	ldi	r23, 0x01	; 1
    1216:	c7 01       	movw	r24, r14
    1218:	b7 d8       	rcall	.-3730   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
    121a:	a6 2c       	mov	r10, r6
    121c:	b3 2c       	mov	r11, r3
    121e:	6b cf       	rjmp	.-298    	; 0x10f6 <_ZL4procPv+0x72>
    1220:	f5 e0       	ldi	r31, 0x05	; 5
    1222:	af 12       	cpse	r10, r31
    1224:	33 c0       	rjmp	.+102    	; 0x128c <__stack+0x18d>
    1226:	c7 01       	movw	r24, r14
    1228:	17 d9       	rcall	.-3538   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
    122a:	86 30       	cpi	r24, 0x06	; 6
    122c:	08 f4       	brcc	.+2      	; 0x1230 <__stack+0x131>
    122e:	5c cf       	rjmp	.-328    	; 0x10e8 <_ZL4procPv+0x64>
    1230:	ce 01       	movw	r24, r28
    1232:	03 96       	adiw	r24, 0x03	; 3
    1234:	5c 01       	movw	r10, r24
    1236:	f8 01       	movw	r30, r16
    1238:	70 82       	st	Z, r7
    123a:	c7 01       	movw	r24, r14
    123c:	e1 d8       	rcall	.-3646   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
    123e:	f5 01       	movw	r30, r10
    1240:	81 93       	st	Z+, r24
    1242:	5f 01       	movw	r10, r30
    1244:	f8 01       	movw	r30, r16
    1246:	10 82       	st	Z, r1
    1248:	a8 14       	cp	r10, r8
    124a:	b9 04       	cpc	r11, r9
    124c:	a1 f7       	brne	.-24     	; 0x1236 <__stack+0x137>
    124e:	67 e7       	ldi	r22, 0x77	; 119
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	ce 01       	movw	r24, r28
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	0e 94 c3 00 	call	0x186	; 0x186 <_Z13GetFunc05DataPcP17GetFunctionCode05>
    125a:	e7 e7       	ldi	r30, 0x77	; 119
    125c:	f1 e0       	ldi	r31, 0x01	; 1
    125e:	62 81       	ldd	r22, Z+2	; 0x02
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	76 2f       	mov	r23, r22
    1264:	66 27       	eor	r22, r22
    1266:	83 81       	ldd	r24, Z+3	; 0x03
    1268:	68 2b       	or	r22, r24
    126a:	db 01       	movw	r26, r22
    126c:	a8 5c       	subi	r26, 0xC8	; 200
    126e:	be 4f       	sbci	r27, 0xFE	; 254
    1270:	84 81       	ldd	r24, Z+4	; 0x04
    1272:	8c 93       	st	X, r24
    1274:	88 e3       	ldi	r24, 0x38	; 56
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	9c de       	rcall	.-712    	; 0xfb2 <_Z17func05_output_ctlPci>
    127a:	48 e0       	ldi	r20, 0x08	; 8
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	67 e7       	ldi	r22, 0x77	; 119
    1280:	71 e0       	ldi	r23, 0x01	; 1
    1282:	c7 01       	movw	r24, r14
    1284:	81 d8       	rcall	.-3838   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
    1286:	a2 2c       	mov	r10, r2
    1288:	b3 2c       	mov	r11, r3
    128a:	35 cf       	rjmp	.-406    	; 0x10f6 <_ZL4procPv+0x72>
    128c:	f0 e1       	ldi	r31, 0x10	; 16
    128e:	af 12       	cpse	r10, r31
    1290:	32 cf       	rjmp	.-412    	; 0x10f6 <_ZL4procPv+0x72>
    1292:	c7 01       	movw	r24, r14
    1294:	e1 d8       	rcall	.-3646   	; 0x458 <_ZN12SerialBuffer15SerialAvailableEv>
    1296:	89 30       	cpi	r24, 0x09	; 9
    1298:	08 f4       	brcc	.+2      	; 0x129c <__stack+0x19d>
    129a:	29 cf       	rjmp	.-430    	; 0x10ee <_ZL4procPv+0x6a>
    129c:	ce 01       	movw	r24, r28
    129e:	03 96       	adiw	r24, 0x03	; 3
    12a0:	5c 01       	movw	r10, r24
    12a2:	f8 01       	movw	r30, r16
    12a4:	70 82       	st	Z, r7
    12a6:	c7 01       	movw	r24, r14
    12a8:	ab d8       	rcall	.-3754   	; 0x400 <_ZN12SerialBuffer10SerialReadEv>
    12aa:	f5 01       	movw	r30, r10
    12ac:	81 93       	st	Z+, r24
    12ae:	5f 01       	movw	r10, r30
    12b0:	f8 01       	movw	r30, r16
    12b2:	10 82       	st	Z, r1
    12b4:	a4 14       	cp	r10, r4
    12b6:	b5 04       	cpc	r11, r5
    12b8:	a1 f7       	brne	.-24     	; 0x12a2 <__stack+0x1a3>
    12ba:	42 e4       	ldi	r20, 0x42	; 66
    12bc:	51 e0       	ldi	r21, 0x01	; 1
    12be:	65 e6       	ldi	r22, 0x65	; 101
    12c0:	71 e0       	ldi	r23, 0x01	; 1
    12c2:	ce 01       	movw	r24, r28
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z13GetFucc10DataPcP17GetFunctionCode10Pi>
    12ca:	68 e5       	ldi	r22, 0x58	; 88
    12cc:	71 e0       	ldi	r23, 0x01	; 1
    12ce:	ce 01       	movw	r24, r28
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	0e 94 06 01 	call	0x20c	; 0x20c <_Z18ResponseFucc10DataPcP22ResponseFunctionCode10>
    12d6:	48 e0       	ldi	r20, 0x08	; 8
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	68 e5       	ldi	r22, 0x58	; 88
    12dc:	71 e0       	ldi	r23, 0x01	; 1
    12de:	c7 01       	movw	r24, r14
    12e0:	53 d8       	rcall	.-3930   	; 0x388 <_ZN12SerialBuffer11SerialWriteEPKci>
    12e2:	68 94       	set
    12e4:	aa 24       	eor	r10, r10
    12e6:	a4 f8       	bld	r10, 4
    12e8:	b3 2c       	mov	r11, r3
    12ea:	05 cf       	rjmp	.-502    	; 0x10f6 <_ZL4procPv+0x72>

000012ec <vApplicationStackOverflowHook>:
}*/



void vApplicationStackOverflowHook( TaskHandle_t xTask, signed char *pcTaskName )
{
    12ec:	08 95       	ret

000012ee <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    12f4:	2f d6       	rcall	.+3166   	; 0x1f54 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    12f6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <pucAlignedHeap.1950>
    12fa:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <pucAlignedHeap.1950+0x1>
    12fe:	89 2b       	or	r24, r25
    1300:	31 f4       	brne	.+12     	; 0x130e <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1302:	81 e9       	ldi	r24, 0x91	; 145
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <pucAlignedHeap.1950+0x1>
    130a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <pucAlignedHeap.1950>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    130e:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <xNextFreeByte>
    1312:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <xNextFreeByte+0x1>
    1316:	ce 01       	movw	r24, r28
    1318:	82 0f       	add	r24, r18
    131a:	93 1f       	adc	r25, r19
    131c:	8f 3c       	cpi	r24, 0xCF	; 207
    131e:	47 e0       	ldi	r20, 0x07	; 7
    1320:	94 07       	cpc	r25, r20
    1322:	70 f4       	brcc	.+28     	; 0x1340 <pvPortMalloc+0x52>
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	70 f4       	brcc	.+28     	; 0x1346 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    132a:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <pucAlignedHeap.1950>
    132e:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <pucAlignedHeap.1950+0x1>
    1332:	c2 0f       	add	r28, r18
    1334:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    1336:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <xNextFreeByte+0x1>
    133a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <xNextFreeByte>
    133e:	05 c0       	rjmp	.+10     	; 0x134a <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1340:	c0 e0       	ldi	r28, 0x00	; 0
    1342:	d0 e0       	ldi	r29, 0x00	; 0
    1344:	02 c0       	rjmp	.+4      	; 0x134a <pvPortMalloc+0x5c>
    1346:	c0 e0       	ldi	r28, 0x00	; 0
    1348:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    134a:	c1 d6       	rcall	.+3458   	; 0x20ce <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    134c:	ce 01       	movw	r24, r28
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	08 95       	ret

00001354 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1354:	08 95       	ret

00001356 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1356:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1358:	03 96       	adiw	r24, 0x03	; 3
    135a:	92 83       	std	Z+2, r25	; 0x02
    135c:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    135e:	2f ef       	ldi	r18, 0xFF	; 255
    1360:	3f ef       	ldi	r19, 0xFF	; 255
    1362:	34 83       	std	Z+4, r19	; 0x04
    1364:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1366:	96 83       	std	Z+6, r25	; 0x06
    1368:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    136a:	90 87       	std	Z+8, r25	; 0x08
    136c:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    136e:	10 82       	st	Z, r1
    1370:	08 95       	ret

00001372 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1372:	fc 01       	movw	r30, r24
    1374:	11 86       	std	Z+9, r1	; 0x09
    1376:	10 86       	std	Z+8, r1	; 0x08
    1378:	08 95       	ret

0000137a <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	9c 01       	movw	r18, r24
    1380:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1382:	dc 01       	movw	r26, r24
    1384:	11 96       	adiw	r26, 0x01	; 1
    1386:	cd 91       	ld	r28, X+
    1388:	dc 91       	ld	r29, X
    138a:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    138c:	d3 83       	std	Z+3, r29	; 0x03
    138e:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	95 83       	std	Z+5, r25	; 0x05
    1396:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	9d 81       	ldd	r25, Y+5	; 0x05
    139c:	dc 01       	movw	r26, r24
    139e:	13 96       	adiw	r26, 0x03	; 3
    13a0:	7c 93       	st	X, r23
    13a2:	6e 93       	st	-X, r22
    13a4:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    13a6:	7d 83       	std	Y+5, r23	; 0x05
    13a8:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    13aa:	31 87       	std	Z+9, r19	; 0x09
    13ac:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    13ae:	f9 01       	movw	r30, r18
    13b0:	80 81       	ld	r24, Z
    13b2:	8f 5f       	subi	r24, 0xFF	; 255
    13b4:	80 83       	st	Z, r24
}
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    13c2:	48 81       	ld	r20, Y
    13c4:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    13c6:	4f 3f       	cpi	r20, 0xFF	; 255
    13c8:	2f ef       	ldi	r18, 0xFF	; 255
    13ca:	52 07       	cpc	r21, r18
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    13ce:	fc 01       	movw	r30, r24
    13d0:	a7 81       	ldd	r26, Z+7	; 0x07
    13d2:	b0 85       	ldd	r27, Z+8	; 0x08
    13d4:	0d c0       	rjmp	.+26     	; 0x13f0 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13d6:	dc 01       	movw	r26, r24
    13d8:	13 96       	adiw	r26, 0x03	; 3
    13da:	01 c0       	rjmp	.+2      	; 0x13de <vListInsert+0x22>
    13dc:	df 01       	movw	r26, r30
    13de:	12 96       	adiw	r26, 0x02	; 2
    13e0:	ed 91       	ld	r30, X+
    13e2:	fc 91       	ld	r31, X
    13e4:	13 97       	sbiw	r26, 0x03	; 3
    13e6:	20 81       	ld	r18, Z
    13e8:	31 81       	ldd	r19, Z+1	; 0x01
    13ea:	42 17       	cp	r20, r18
    13ec:	53 07       	cpc	r21, r19
    13ee:	b0 f7       	brcc	.-20     	; 0x13dc <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    13f0:	12 96       	adiw	r26, 0x02	; 2
    13f2:	ed 91       	ld	r30, X+
    13f4:	fc 91       	ld	r31, X
    13f6:	13 97       	sbiw	r26, 0x03	; 3
    13f8:	fb 83       	std	Y+3, r31	; 0x03
    13fa:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    13fc:	d5 83       	std	Z+5, r29	; 0x05
    13fe:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1400:	bd 83       	std	Y+5, r27	; 0x05
    1402:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1404:	13 96       	adiw	r26, 0x03	; 3
    1406:	dc 93       	st	X, r29
    1408:	ce 93       	st	-X, r28
    140a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    140c:	99 87       	std	Y+9, r25	; 0x09
    140e:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1410:	fc 01       	movw	r30, r24
    1412:	20 81       	ld	r18, Z
    1414:	2f 5f       	subi	r18, 0xFF	; 255
    1416:	20 83       	st	Z, r18
}
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1424:	a0 85       	ldd	r26, Z+8	; 0x08
    1426:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1428:	c2 81       	ldd	r28, Z+2	; 0x02
    142a:	d3 81       	ldd	r29, Z+3	; 0x03
    142c:	84 81       	ldd	r24, Z+4	; 0x04
    142e:	95 81       	ldd	r25, Z+5	; 0x05
    1430:	9d 83       	std	Y+5, r25	; 0x05
    1432:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1434:	c4 81       	ldd	r28, Z+4	; 0x04
    1436:	d5 81       	ldd	r29, Z+5	; 0x05
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	93 81       	ldd	r25, Z+3	; 0x03
    143c:	9b 83       	std	Y+3, r25	; 0x03
    143e:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1440:	11 96       	adiw	r26, 0x01	; 1
    1442:	cd 91       	ld	r28, X+
    1444:	dc 91       	ld	r29, X
    1446:	12 97       	sbiw	r26, 0x02	; 2
    1448:	ce 17       	cp	r28, r30
    144a:	df 07       	cpc	r29, r31
    144c:	31 f4       	brne	.+12     	; 0x145a <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	9d 81       	ldd	r25, Y+5	; 0x05
    1452:	12 96       	adiw	r26, 0x02	; 2
    1454:	9c 93       	st	X, r25
    1456:	8e 93       	st	-X, r24
    1458:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    145a:	11 86       	std	Z+9, r1	; 0x09
    145c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    145e:	8c 91       	ld	r24, X
    1460:	81 50       	subi	r24, 0x01	; 1
    1462:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    146a:	31 e1       	ldi	r19, 0x11	; 17
    146c:	fc 01       	movw	r30, r24
    146e:	30 83       	st	Z, r19
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	22 e2       	ldi	r18, 0x22	; 34
    1474:	20 83       	st	Z, r18
    1476:	31 97       	sbiw	r30, 0x01	; 1
    1478:	a3 e3       	ldi	r26, 0x33	; 51
    147a:	a0 83       	st	Z, r26
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	60 83       	st	Z, r22
    1480:	31 97       	sbiw	r30, 0x01	; 1
    1482:	70 83       	st	Z, r23
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	10 82       	st	Z, r1
    1488:	31 97       	sbiw	r30, 0x01	; 1
    148a:	60 e8       	ldi	r22, 0x80	; 128
    148c:	60 83       	st	Z, r22
    148e:	31 97       	sbiw	r30, 0x01	; 1
    1490:	10 82       	st	Z, r1
    1492:	31 97       	sbiw	r30, 0x01	; 1
    1494:	62 e0       	ldi	r22, 0x02	; 2
    1496:	60 83       	st	Z, r22
    1498:	31 97       	sbiw	r30, 0x01	; 1
    149a:	63 e0       	ldi	r22, 0x03	; 3
    149c:	60 83       	st	Z, r22
    149e:	31 97       	sbiw	r30, 0x01	; 1
    14a0:	64 e0       	ldi	r22, 0x04	; 4
    14a2:	60 83       	st	Z, r22
    14a4:	31 97       	sbiw	r30, 0x01	; 1
    14a6:	65 e0       	ldi	r22, 0x05	; 5
    14a8:	60 83       	st	Z, r22
    14aa:	31 97       	sbiw	r30, 0x01	; 1
    14ac:	66 e0       	ldi	r22, 0x06	; 6
    14ae:	60 83       	st	Z, r22
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	67 e0       	ldi	r22, 0x07	; 7
    14b4:	60 83       	st	Z, r22
    14b6:	31 97       	sbiw	r30, 0x01	; 1
    14b8:	68 e0       	ldi	r22, 0x08	; 8
    14ba:	60 83       	st	Z, r22
    14bc:	31 97       	sbiw	r30, 0x01	; 1
    14be:	69 e0       	ldi	r22, 0x09	; 9
    14c0:	60 83       	st	Z, r22
    14c2:	31 97       	sbiw	r30, 0x01	; 1
    14c4:	60 e1       	ldi	r22, 0x10	; 16
    14c6:	60 83       	st	Z, r22
    14c8:	31 97       	sbiw	r30, 0x01	; 1
    14ca:	30 83       	st	Z, r19
    14cc:	31 97       	sbiw	r30, 0x01	; 1
    14ce:	32 e1       	ldi	r19, 0x12	; 18
    14d0:	30 83       	st	Z, r19
    14d2:	31 97       	sbiw	r30, 0x01	; 1
    14d4:	33 e1       	ldi	r19, 0x13	; 19
    14d6:	30 83       	st	Z, r19
    14d8:	31 97       	sbiw	r30, 0x01	; 1
    14da:	34 e1       	ldi	r19, 0x14	; 20
    14dc:	30 83       	st	Z, r19
    14de:	31 97       	sbiw	r30, 0x01	; 1
    14e0:	35 e1       	ldi	r19, 0x15	; 21
    14e2:	30 83       	st	Z, r19
    14e4:	31 97       	sbiw	r30, 0x01	; 1
    14e6:	36 e1       	ldi	r19, 0x16	; 22
    14e8:	30 83       	st	Z, r19
    14ea:	31 97       	sbiw	r30, 0x01	; 1
    14ec:	37 e1       	ldi	r19, 0x17	; 23
    14ee:	30 83       	st	Z, r19
    14f0:	31 97       	sbiw	r30, 0x01	; 1
    14f2:	38 e1       	ldi	r19, 0x18	; 24
    14f4:	30 83       	st	Z, r19
    14f6:	31 97       	sbiw	r30, 0x01	; 1
    14f8:	39 e1       	ldi	r19, 0x19	; 25
    14fa:	30 83       	st	Z, r19
    14fc:	31 97       	sbiw	r30, 0x01	; 1
    14fe:	30 e2       	ldi	r19, 0x20	; 32
    1500:	30 83       	st	Z, r19
    1502:	31 97       	sbiw	r30, 0x01	; 1
    1504:	31 e2       	ldi	r19, 0x21	; 33
    1506:	30 83       	st	Z, r19
    1508:	31 97       	sbiw	r30, 0x01	; 1
    150a:	20 83       	st	Z, r18
    150c:	31 97       	sbiw	r30, 0x01	; 1
    150e:	23 e2       	ldi	r18, 0x23	; 35
    1510:	20 83       	st	Z, r18
    1512:	31 97       	sbiw	r30, 0x01	; 1
    1514:	40 83       	st	Z, r20
    1516:	31 97       	sbiw	r30, 0x01	; 1
    1518:	50 83       	st	Z, r21
    151a:	31 97       	sbiw	r30, 0x01	; 1
    151c:	26 e2       	ldi	r18, 0x26	; 38
    151e:	20 83       	st	Z, r18
    1520:	31 97       	sbiw	r30, 0x01	; 1
    1522:	27 e2       	ldi	r18, 0x27	; 39
    1524:	20 83       	st	Z, r18
    1526:	31 97       	sbiw	r30, 0x01	; 1
    1528:	28 e2       	ldi	r18, 0x28	; 40
    152a:	20 83       	st	Z, r18
    152c:	31 97       	sbiw	r30, 0x01	; 1
    152e:	29 e2       	ldi	r18, 0x29	; 41
    1530:	20 83       	st	Z, r18
    1532:	31 97       	sbiw	r30, 0x01	; 1
    1534:	20 e3       	ldi	r18, 0x30	; 48
    1536:	20 83       	st	Z, r18
    1538:	31 97       	sbiw	r30, 0x01	; 1
    153a:	21 e3       	ldi	r18, 0x31	; 49
    153c:	20 83       	st	Z, r18
    153e:	86 97       	sbiw	r24, 0x26	; 38
    1540:	08 95       	ret

00001542 <xPortStartScheduler>:
    1542:	1b bc       	out	0x2b, r1	; 43
    1544:	89 ef       	ldi	r24, 0xF9	; 249
    1546:	8a bd       	out	0x2a, r24	; 42
    1548:	8b e0       	ldi	r24, 0x0B	; 11
    154a:	8e bd       	out	0x2e, r24	; 46
    154c:	87 b7       	in	r24, 0x37	; 55
    154e:	80 61       	ori	r24, 0x10	; 16
    1550:	87 bf       	out	0x37, r24	; 55
    1552:	a0 91 c4 09 	lds	r26, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    1556:	b0 91 c5 09 	lds	r27, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    155a:	cd 91       	ld	r28, X+
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	dd 91       	ld	r29, X+
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	ff 91       	pop	r31
    1564:	ef 91       	pop	r30
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	bf 91       	pop	r27
    156c:	af 91       	pop	r26
    156e:	9f 91       	pop	r25
    1570:	8f 91       	pop	r24
    1572:	7f 91       	pop	r23
    1574:	6f 91       	pop	r22
    1576:	5f 91       	pop	r21
    1578:	4f 91       	pop	r20
    157a:	3f 91       	pop	r19
    157c:	2f 91       	pop	r18
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	bf 90       	pop	r11
    158c:	af 90       	pop	r10
    158e:	9f 90       	pop	r9
    1590:	8f 90       	pop	r8
    1592:	7f 90       	pop	r7
    1594:	6f 90       	pop	r6
    1596:	5f 90       	pop	r5
    1598:	4f 90       	pop	r4
    159a:	3f 90       	pop	r3
    159c:	2f 90       	pop	r2
    159e:	1f 90       	pop	r1
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0
    15a6:	08 95       	ret
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	08 95       	ret

000015ac <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	0f 92       	push	r0
    15b4:	1f 92       	push	r1
    15b6:	11 24       	eor	r1, r1
    15b8:	2f 92       	push	r2
    15ba:	3f 92       	push	r3
    15bc:	4f 92       	push	r4
    15be:	5f 92       	push	r5
    15c0:	6f 92       	push	r6
    15c2:	7f 92       	push	r7
    15c4:	8f 92       	push	r8
    15c6:	9f 92       	push	r9
    15c8:	af 92       	push	r10
    15ca:	bf 92       	push	r11
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	ef 93       	push	r30
    15f2:	ff 93       	push	r31
    15f4:	a0 91 c4 09 	lds	r26, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    15f8:	b0 91 c5 09 	lds	r27, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    15fc:	0d b6       	in	r0, 0x3d	; 61
    15fe:	0d 92       	st	X+, r0
    1600:	0e b6       	in	r0, 0x3e	; 62
    1602:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1604:	24 d6       	rcall	.+3144   	; 0x224e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1606:	a0 91 c4 09 	lds	r26, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    160a:	b0 91 c5 09 	lds	r27, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    160e:	cd 91       	ld	r28, X+
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	dd 91       	ld	r29, X+
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	ff 91       	pop	r31
    1618:	ef 91       	pop	r30
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	bf 91       	pop	r27
    1620:	af 91       	pop	r26
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	7f 91       	pop	r23
    1628:	6f 91       	pop	r22
    162a:	5f 91       	pop	r21
    162c:	4f 91       	pop	r20
    162e:	3f 91       	pop	r19
    1630:	2f 91       	pop	r18
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	9f 90       	pop	r9
    1644:	8f 90       	pop	r8
    1646:	7f 90       	pop	r7
    1648:	6f 90       	pop	r6
    164a:	5f 90       	pop	r5
    164c:	4f 90       	pop	r4
    164e:	3f 90       	pop	r3
    1650:	2f 90       	pop	r2
    1652:	1f 90       	pop	r1
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0

	asm volatile ( "ret" );
    165a:	08 95       	ret

0000165c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    165c:	0f 92       	push	r0
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	0f 92       	push	r0
    1664:	1f 92       	push	r1
    1666:	11 24       	eor	r1, r1
    1668:	2f 92       	push	r2
    166a:	3f 92       	push	r3
    166c:	4f 92       	push	r4
    166e:	5f 92       	push	r5
    1670:	6f 92       	push	r6
    1672:	7f 92       	push	r7
    1674:	8f 92       	push	r8
    1676:	9f 92       	push	r9
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
    16a4:	a0 91 c4 09 	lds	r26, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    16a8:	b0 91 c5 09 	lds	r27, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    16ac:	0d b6       	in	r0, 0x3d	; 61
    16ae:	0d 92       	st	X+, r0
    16b0:	0e b6       	in	r0, 0x3e	; 62
    16b2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    16b4:	55 d4       	rcall	.+2218   	; 0x1f60 <xTaskIncrementTick>
    16b6:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    16b8:	ca d5       	rcall	.+2964   	; 0x224e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    16ba:	a0 91 c4 09 	lds	r26, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    16be:	b0 91 c5 09 	lds	r27, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    16c2:	cd 91       	ld	r28, X+
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	dd 91       	ld	r29, X+
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	ff 91       	pop	r31
    16cc:	ef 91       	pop	r30
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	7f 90       	pop	r7
    16fc:	6f 90       	pop	r6
    16fe:	5f 90       	pop	r5
    1700:	4f 90       	pop	r4
    1702:	3f 90       	pop	r3
    1704:	2f 90       	pop	r2
    1706:	1f 90       	pop	r1
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    170e:	08 95       	ret

00001710 <__vector_12>:
	
	//TIMER1_COMPA_vect
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    1710:	a5 df       	rcall	.-182    	; 0x165c <vPortYieldFromTick>
		asm volatile ( "reti" );
    1712:	18 95       	reti

00001714 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	ec 01       	movw	r28, r24
    171e:	04 2f       	mov	r16, r20
    1720:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1722:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1724:	81 11       	cpse	r24, r1
    1726:	0b c0       	rjmp	.+22     	; 0x173e <prvCopyDataToQueue+0x2a>
    1728:	88 81       	ld	r24, Y
    172a:	99 81       	ldd	r25, Y+1	; 0x01
    172c:	89 2b       	or	r24, r25
    172e:	09 f0       	breq	.+2      	; 0x1732 <prvCopyDataToQueue+0x1e>
    1730:	41 c0       	rjmp	.+130    	; 0x17b4 <prvCopyDataToQueue+0xa0>
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	9b 81       	ldd	r25, Y+3	; 0x03
    1736:	0b d7       	rcall	.+3606   	; 0x254e <xTaskPriorityDisinherit>
    1738:	1b 82       	std	Y+3, r1	; 0x03
    173a:	1a 82       	std	Y+2, r1	; 0x02
    173c:	42 c0       	rjmp	.+132    	; 0x17c2 <prvCopyDataToQueue+0xae>
    173e:	41 11       	cpse	r20, r1
    1740:	17 c0       	rjmp	.+46     	; 0x1770 <prvCopyDataToQueue+0x5c>
    1742:	48 2f       	mov	r20, r24
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	7a d7       	rcall	.+3828   	; 0x2640 <memcpy>
    174c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	82 0f       	add	r24, r18
    1754:	91 1d       	adc	r25, r1
    1756:	9d 83       	std	Y+5, r25	; 0x05
    1758:	8c 83       	std	Y+4, r24	; 0x04
    175a:	2a 81       	ldd	r18, Y+2	; 0x02
    175c:	3b 81       	ldd	r19, Y+3	; 0x03
    175e:	82 17       	cp	r24, r18
    1760:	93 07       	cpc	r25, r19
    1762:	50 f1       	brcs	.+84     	; 0x17b8 <prvCopyDataToQueue+0xa4>
    1764:	88 81       	ld	r24, Y
    1766:	99 81       	ldd	r25, Y+1	; 0x01
    1768:	9d 83       	std	Y+5, r25	; 0x05
    176a:	8c 83       	std	Y+4, r24	; 0x04
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	29 c0       	rjmp	.+82     	; 0x17c2 <prvCopyDataToQueue+0xae>
    1770:	48 2f       	mov	r20, r24
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	8e 81       	ldd	r24, Y+6	; 0x06
    1776:	9f 81       	ldd	r25, Y+7	; 0x07
    1778:	63 d7       	rcall	.+3782   	; 0x2640 <memcpy>
    177a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	91 95       	neg	r25
    1780:	81 95       	neg	r24
    1782:	91 09       	sbc	r25, r1
    1784:	2e 81       	ldd	r18, Y+6	; 0x06
    1786:	3f 81       	ldd	r19, Y+7	; 0x07
    1788:	28 0f       	add	r18, r24
    178a:	39 1f       	adc	r19, r25
    178c:	3f 83       	std	Y+7, r19	; 0x07
    178e:	2e 83       	std	Y+6, r18	; 0x06
    1790:	48 81       	ld	r20, Y
    1792:	59 81       	ldd	r21, Y+1	; 0x01
    1794:	24 17       	cp	r18, r20
    1796:	35 07       	cpc	r19, r21
    1798:	30 f4       	brcc	.+12     	; 0x17a6 <prvCopyDataToQueue+0x92>
    179a:	2a 81       	ldd	r18, Y+2	; 0x02
    179c:	3b 81       	ldd	r19, Y+3	; 0x03
    179e:	82 0f       	add	r24, r18
    17a0:	93 1f       	adc	r25, r19
    17a2:	9f 83       	std	Y+7, r25	; 0x07
    17a4:	8e 83       	std	Y+6, r24	; 0x06
    17a6:	02 30       	cpi	r16, 0x02	; 2
    17a8:	49 f4       	brne	.+18     	; 0x17bc <prvCopyDataToQueue+0xa8>
    17aa:	11 23       	and	r17, r17
    17ac:	49 f0       	breq	.+18     	; 0x17c0 <prvCopyDataToQueue+0xac>
    17ae:	11 50       	subi	r17, 0x01	; 1
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	07 c0       	rjmp	.+14     	; 0x17c2 <prvCopyDataToQueue+0xae>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <prvCopyDataToQueue+0xae>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	03 c0       	rjmp	.+6      	; 0x17c2 <prvCopyDataToQueue+0xae>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <prvCopyDataToQueue+0xae>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	1f 5f       	subi	r17, 0xFF	; 255
    17c4:	1a 8f       	std	Y+26, r17	; 0x1a
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <prvCopyDataFromQueue>:
    17d0:	fc 01       	movw	r30, r24
    17d2:	44 8d       	ldd	r20, Z+28	; 0x1c
    17d4:	44 23       	and	r20, r20
    17d6:	a1 f0       	breq	.+40     	; 0x1800 <prvCopyDataFromQueue+0x30>
    17d8:	50 e0       	ldi	r21, 0x00	; 0
    17da:	26 81       	ldd	r18, Z+6	; 0x06
    17dc:	37 81       	ldd	r19, Z+7	; 0x07
    17de:	24 0f       	add	r18, r20
    17e0:	35 1f       	adc	r19, r21
    17e2:	37 83       	std	Z+7, r19	; 0x07
    17e4:	26 83       	std	Z+6, r18	; 0x06
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	28 17       	cp	r18, r24
    17ec:	39 07       	cpc	r19, r25
    17ee:	20 f0       	brcs	.+8      	; 0x17f8 <prvCopyDataFromQueue+0x28>
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	97 83       	std	Z+7, r25	; 0x07
    17f6:	86 83       	std	Z+6, r24	; 0x06
    17f8:	cb 01       	movw	r24, r22
    17fa:	66 81       	ldd	r22, Z+6	; 0x06
    17fc:	77 81       	ldd	r23, Z+7	; 0x07
    17fe:	20 c7       	rjmp	.+3648   	; 0x2640 <memcpy>
    1800:	08 95       	ret

00001802 <prvUnlockQueue>:
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	8c 01       	movw	r16, r24
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	0f 92       	push	r0
    1814:	fc 01       	movw	r30, r24
    1816:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1818:	1c 16       	cp	r1, r28
    181a:	9c f4       	brge	.+38     	; 0x1842 <prvUnlockQueue+0x40>
    181c:	81 89       	ldd	r24, Z+17	; 0x11
    181e:	81 11       	cpse	r24, r1
    1820:	06 c0       	rjmp	.+12     	; 0x182e <prvUnlockQueue+0x2c>
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <prvUnlockQueue+0x40>
    1824:	f8 01       	movw	r30, r16
    1826:	91 89       	ldd	r25, Z+17	; 0x11
    1828:	91 11       	cpse	r25, r1
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <prvUnlockQueue+0x34>
    182c:	0a c0       	rjmp	.+20     	; 0x1842 <prvUnlockQueue+0x40>
    182e:	78 01       	movw	r14, r16
    1830:	f1 e1       	ldi	r31, 0x11	; 17
    1832:	ef 0e       	add	r14, r31
    1834:	f1 1c       	adc	r15, r1
    1836:	c7 01       	movw	r24, r14
    1838:	9b d5       	rcall	.+2870   	; 0x2370 <xTaskRemoveFromEventList>
    183a:	81 11       	cpse	r24, r1
    183c:	22 d6       	rcall	.+3140   	; 0x2482 <vTaskMissedYield>
    183e:	c1 50       	subi	r28, 0x01	; 1
    1840:	89 f7       	brne	.-30     	; 0x1824 <prvUnlockQueue+0x22>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	f8 01       	movw	r30, r16
    1846:	86 8f       	std	Z+30, r24	; 0x1e
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	0f 92       	push	r0
    1852:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1854:	1c 16       	cp	r1, r28
    1856:	9c f4       	brge	.+38     	; 0x187e <prvUnlockQueue+0x7c>
    1858:	80 85       	ldd	r24, Z+8	; 0x08
    185a:	81 11       	cpse	r24, r1
    185c:	06 c0       	rjmp	.+12     	; 0x186a <prvUnlockQueue+0x68>
    185e:	0f c0       	rjmp	.+30     	; 0x187e <prvUnlockQueue+0x7c>
    1860:	f8 01       	movw	r30, r16
    1862:	90 85       	ldd	r25, Z+8	; 0x08
    1864:	91 11       	cpse	r25, r1
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <prvUnlockQueue+0x70>
    1868:	0a c0       	rjmp	.+20     	; 0x187e <prvUnlockQueue+0x7c>
    186a:	78 01       	movw	r14, r16
    186c:	f8 e0       	ldi	r31, 0x08	; 8
    186e:	ef 0e       	add	r14, r31
    1870:	f1 1c       	adc	r15, r1
    1872:	c7 01       	movw	r24, r14
    1874:	7d d5       	rcall	.+2810   	; 0x2370 <xTaskRemoveFromEventList>
    1876:	81 11       	cpse	r24, r1
    1878:	04 d6       	rcall	.+3080   	; 0x2482 <vTaskMissedYield>
    187a:	c1 50       	subi	r28, 0x01	; 1
    187c:	89 f7       	brne	.-30     	; 0x1860 <prvUnlockQueue+0x5e>
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	f8 01       	movw	r30, r16
    1882:	85 8f       	std	Z+29, r24	; 0x1d
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	08 95       	ret

00001894 <xQueueGenericReset>:
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	ec 01       	movw	r28, r24
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	0f 92       	push	r0
    18a0:	48 81       	ld	r20, Y
    18a2:	59 81       	ldd	r21, Y+1	; 0x01
    18a4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18aa:	72 9f       	mul	r23, r18
    18ac:	c0 01       	movw	r24, r0
    18ae:	73 9f       	mul	r23, r19
    18b0:	90 0d       	add	r25, r0
    18b2:	11 24       	eor	r1, r1
    18b4:	fa 01       	movw	r30, r20
    18b6:	e8 0f       	add	r30, r24
    18b8:	f9 1f       	adc	r31, r25
    18ba:	fb 83       	std	Y+3, r31	; 0x03
    18bc:	ea 83       	std	Y+2, r30	; 0x02
    18be:	1a 8e       	std	Y+26, r1	; 0x1a
    18c0:	5d 83       	std	Y+5, r21	; 0x05
    18c2:	4c 83       	std	Y+4, r20	; 0x04
    18c4:	82 1b       	sub	r24, r18
    18c6:	93 0b       	sbc	r25, r19
    18c8:	84 0f       	add	r24, r20
    18ca:	95 1f       	adc	r25, r21
    18cc:	9f 83       	std	Y+7, r25	; 0x07
    18ce:	8e 83       	std	Y+6, r24	; 0x06
    18d0:	8f ef       	ldi	r24, 0xFF	; 255
    18d2:	8d 8f       	std	Y+29, r24	; 0x1d
    18d4:	8e 8f       	std	Y+30, r24	; 0x1e
    18d6:	61 11       	cpse	r22, r1
    18d8:	0a c0       	rjmp	.+20     	; 0x18ee <xQueueGenericReset+0x5a>
    18da:	88 85       	ldd	r24, Y+8	; 0x08
    18dc:	88 23       	and	r24, r24
    18de:	69 f0       	breq	.+26     	; 0x18fa <xQueueGenericReset+0x66>
    18e0:	ce 01       	movw	r24, r28
    18e2:	08 96       	adiw	r24, 0x08	; 8
    18e4:	45 d5       	rcall	.+2698   	; 0x2370 <xTaskRemoveFromEventList>
    18e6:	88 23       	and	r24, r24
    18e8:	41 f0       	breq	.+16     	; 0x18fa <xQueueGenericReset+0x66>
    18ea:	60 de       	rcall	.-832    	; 0x15ac <vPortYield>
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <xQueueGenericReset+0x66>
    18ee:	ce 01       	movw	r24, r28
    18f0:	08 96       	adiw	r24, 0x08	; 8
    18f2:	31 dd       	rcall	.-1438   	; 0x1356 <vListInitialise>
    18f4:	ce 01       	movw	r24, r28
    18f6:	41 96       	adiw	r24, 0x11	; 17
    18f8:	2e dd       	rcall	.-1444   	; 0x1356 <vListInitialise>
    18fa:	0f 90       	pop	r0
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <xQueueGenericCreate>:
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	08 2f       	mov	r16, r24
    1910:	16 2f       	mov	r17, r22
    1912:	66 23       	and	r22, r22
    1914:	b1 f0       	breq	.+44     	; 0x1942 <xQueueGenericCreate+0x3c>
    1916:	86 9f       	mul	r24, r22
    1918:	c0 01       	movw	r24, r0
    191a:	11 24       	eor	r1, r1
    191c:	4f 96       	adiw	r24, 0x1f	; 31
    191e:	e7 dc       	rcall	.-1586   	; 0x12ee <pvPortMalloc>
    1920:	ec 01       	movw	r28, r24
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	39 f4       	brne	.+14     	; 0x1934 <xQueueGenericCreate+0x2e>
    1926:	13 c0       	rjmp	.+38     	; 0x194e <xQueueGenericCreate+0x48>
    1928:	0b 8f       	std	Y+27, r16	; 0x1b
    192a:	1c 8f       	std	Y+28, r17	; 0x1c
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	ce 01       	movw	r24, r28
    1930:	b1 df       	rcall	.-158    	; 0x1894 <xQueueGenericReset>
    1932:	0d c0       	rjmp	.+26     	; 0x194e <xQueueGenericCreate+0x48>
    1934:	4f 96       	adiw	r24, 0x1f	; 31
    1936:	99 83       	std	Y+1, r25	; 0x01
    1938:	88 83       	st	Y, r24
    193a:	f6 cf       	rjmp	.-20     	; 0x1928 <xQueueGenericCreate+0x22>
    193c:	d9 83       	std	Y+1, r29	; 0x01
    193e:	c8 83       	st	Y, r28
    1940:	f3 cf       	rjmp	.-26     	; 0x1928 <xQueueGenericCreate+0x22>
    1942:	8f e1       	ldi	r24, 0x1F	; 31
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	d3 dc       	rcall	.-1626   	; 0x12ee <pvPortMalloc>
    1948:	ec 01       	movw	r28, r24
    194a:	89 2b       	or	r24, r25
    194c:	b9 f7       	brne	.-18     	; 0x193c <xQueueGenericCreate+0x36>
    194e:	ce 01       	movw	r24, r28
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	08 95       	ret

0000195a <xQueueGenericSend>:
    195a:	9f 92       	push	r9
    195c:	af 92       	push	r10
    195e:	bf 92       	push	r11
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	00 d0       	rcall	.+0      	; 0x1972 <xQueueGenericSend+0x18>
    1972:	00 d0       	rcall	.+0      	; 0x1974 <xQueueGenericSend+0x1a>
    1974:	1f 92       	push	r1
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	8c 01       	movw	r16, r24
    197c:	6b 01       	movw	r12, r22
    197e:	5d 83       	std	Y+5, r21	; 0x05
    1980:	4c 83       	std	Y+4, r20	; 0x04
    1982:	a2 2e       	mov	r10, r18
    1984:	b1 2c       	mov	r11, r1
    1986:	99 24       	eor	r9, r9
    1988:	93 94       	inc	r9
    198a:	7c 01       	movw	r14, r24
    198c:	88 e0       	ldi	r24, 0x08	; 8
    198e:	e8 0e       	add	r14, r24
    1990:	f1 1c       	adc	r15, r1
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	f8 01       	movw	r30, r16
    199a:	32 8d       	ldd	r19, Z+26	; 0x1a
    199c:	93 8d       	ldd	r25, Z+27	; 0x1b
    199e:	39 17       	cp	r19, r25
    19a0:	18 f0       	brcs	.+6      	; 0x19a8 <xQueueGenericSend+0x4e>
    19a2:	f2 e0       	ldi	r31, 0x02	; 2
    19a4:	af 12       	cpse	r10, r31
    19a6:	15 c0       	rjmp	.+42     	; 0x19d2 <xQueueGenericSend+0x78>
    19a8:	4a 2d       	mov	r20, r10
    19aa:	b6 01       	movw	r22, r12
    19ac:	c8 01       	movw	r24, r16
    19ae:	b2 de       	rcall	.-668    	; 0x1714 <prvCopyDataToQueue>
    19b0:	f8 01       	movw	r30, r16
    19b2:	91 89       	ldd	r25, Z+17	; 0x11
    19b4:	99 23       	and	r25, r25
    19b6:	39 f0       	breq	.+14     	; 0x19c6 <xQueueGenericSend+0x6c>
    19b8:	c8 01       	movw	r24, r16
    19ba:	41 96       	adiw	r24, 0x11	; 17
    19bc:	d9 d4       	rcall	.+2482   	; 0x2370 <xTaskRemoveFromEventList>
    19be:	88 23       	and	r24, r24
    19c0:	21 f0       	breq	.+8      	; 0x19ca <xQueueGenericSend+0x70>
    19c2:	f4 dd       	rcall	.-1048   	; 0x15ac <vPortYield>
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <xQueueGenericSend+0x70>
    19c6:	81 11       	cpse	r24, r1
    19c8:	f1 dd       	rcall	.-1054   	; 0x15ac <vPortYield>
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	45 c0       	rjmp	.+138    	; 0x1a5c <xQueueGenericSend+0x102>
    19d2:	ec 81       	ldd	r30, Y+4	; 0x04
    19d4:	fd 81       	ldd	r31, Y+5	; 0x05
    19d6:	ef 2b       	or	r30, r31
    19d8:	21 f4       	brne	.+8      	; 0x19e2 <xQueueGenericSend+0x88>
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	3d c0       	rjmp	.+122    	; 0x1a5c <xQueueGenericSend+0x102>
    19e2:	b1 10       	cpse	r11, r1
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <xQueueGenericSend+0x94>
    19e6:	ce 01       	movw	r24, r28
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	08 d5       	rcall	.+2576   	; 0x23fc <vTaskSetTimeOutState>
    19ec:	b9 2c       	mov	r11, r9
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	b0 d2       	rcall	.+1376   	; 0x1f54 <vTaskSuspendAll>
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	0f 92       	push	r0
    19fa:	f8 01       	movw	r30, r16
    19fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    19fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <xQueueGenericSend+0xaa>
    1a02:	15 8e       	std	Z+29, r1	; 0x1d
    1a04:	f8 01       	movw	r30, r16
    1a06:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a08:	8f 3f       	cpi	r24, 0xFF	; 255
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <xQueueGenericSend+0xb4>
    1a0c:	16 8e       	std	Z+30, r1	; 0x1e
    1a0e:	0f 90       	pop	r0
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	be 01       	movw	r22, r28
    1a14:	6c 5f       	subi	r22, 0xFC	; 252
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	ce 01       	movw	r24, r28
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	fa d4       	rcall	.+2548   	; 0x2412 <xTaskCheckForTimeOut>
    1a1e:	81 11       	cpse	r24, r1
    1a20:	19 c0       	rjmp	.+50     	; 0x1a54 <xQueueGenericSend+0xfa>
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	0f 92       	push	r0
    1a28:	f8 01       	movw	r30, r16
    1a2a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a32:	98 13       	cpse	r25, r24
    1a34:	0b c0       	rjmp	.+22     	; 0x1a4c <xQueueGenericSend+0xf2>
    1a36:	6c 81       	ldd	r22, Y+4	; 0x04
    1a38:	7d 81       	ldd	r23, Y+5	; 0x05
    1a3a:	c7 01       	movw	r24, r14
    1a3c:	88 d4       	rcall	.+2320   	; 0x234e <vTaskPlaceOnEventList>
    1a3e:	c8 01       	movw	r24, r16
    1a40:	e0 de       	rcall	.-576    	; 0x1802 <prvUnlockQueue>
    1a42:	45 d3       	rcall	.+1674   	; 0x20ce <xTaskResumeAll>
    1a44:	81 11       	cpse	r24, r1
    1a46:	a5 cf       	rjmp	.-182    	; 0x1992 <xQueueGenericSend+0x38>
    1a48:	b1 dd       	rcall	.-1182   	; 0x15ac <vPortYield>
    1a4a:	a3 cf       	rjmp	.-186    	; 0x1992 <xQueueGenericSend+0x38>
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	d9 de       	rcall	.-590    	; 0x1802 <prvUnlockQueue>
    1a50:	3e d3       	rcall	.+1660   	; 0x20ce <xTaskResumeAll>
    1a52:	9f cf       	rjmp	.-194    	; 0x1992 <xQueueGenericSend+0x38>
    1a54:	c8 01       	movw	r24, r16
    1a56:	d5 de       	rcall	.-598    	; 0x1802 <prvUnlockQueue>
    1a58:	3a d3       	rcall	.+1652   	; 0x20ce <xTaskResumeAll>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	df 90       	pop	r13
    1a74:	cf 90       	pop	r12
    1a76:	bf 90       	pop	r11
    1a78:	af 90       	pop	r10
    1a7a:	9f 90       	pop	r9
    1a7c:	08 95       	ret

00001a7e <xQueueCreateMutex>:
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	48 2f       	mov	r20, r24
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	3e df       	rcall	.-388    	; 0x1906 <xQueueGenericCreate>
    1a8a:	ec 01       	movw	r28, r24
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	59 f0       	breq	.+22     	; 0x1aa6 <xQueueCreateMutex+0x28>
    1a90:	1b 82       	std	Y+3, r1	; 0x03
    1a92:	1a 82       	std	Y+2, r1	; 0x02
    1a94:	19 82       	std	Y+1, r1	; 0x01
    1a96:	18 82       	st	Y, r1
    1a98:	1e 82       	std	Y+6, r1	; 0x06
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	5a df       	rcall	.-332    	; 0x195a <xQueueGenericSend>
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1aae:	8f 92       	push	r8
    1ab0:	9f 92       	push	r9
    1ab2:	af 92       	push	r10
    1ab4:	bf 92       	push	r11
    1ab6:	cf 92       	push	r12
    1ab8:	df 92       	push	r13
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <xQueueGenericReceive+0x1a>
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <xQueueGenericReceive+0x1c>
    1aca:	1f 92       	push	r1
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	8c 01       	movw	r16, r24
    1ad2:	5b 01       	movw	r10, r22
    1ad4:	5d 83       	std	Y+5, r21	; 0x05
    1ad6:	4c 83       	std	Y+4, r20	; 0x04
    1ad8:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    1ada:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1adc:	99 24       	eor	r9, r9
    1ade:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1ae0:	6c 01       	movw	r12, r24
    1ae2:	81 e1       	ldi	r24, 0x11	; 17
    1ae4:	c8 0e       	add	r12, r24
    1ae6:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1aee:	f8 01       	movw	r30, r16
    1af0:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1af2:	ff 20       	and	r15, r15
    1af4:	61 f1       	breq	.+88     	; 0x1b4e <xQueueGenericReceive+0xa0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1af6:	c6 80       	ldd	r12, Z+6	; 0x06
    1af8:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1afa:	b5 01       	movw	r22, r10
    1afc:	c8 01       	movw	r24, r16
    1afe:	68 de       	rcall	.-816    	; 0x17d0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1b00:	81 10       	cpse	r8, r1
    1b02:	16 c0       	rjmp	.+44     	; 0x1b30 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1b04:	fa 94       	dec	r15
    1b06:	f8 01       	movw	r30, r16
    1b08:	f2 8e       	std	Z+26, r15	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	89 2b       	or	r24, r25
    1b10:	21 f4       	brne	.+8      	; 0x1b1a <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1b12:	5d d5       	rcall	.+2746   	; 0x25ce <pvTaskIncrementMutexHeldCount>
    1b14:	f8 01       	movw	r30, r16
    1b16:	93 83       	std	Z+3, r25	; 0x03
    1b18:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	80 85       	ldd	r24, Z+8	; 0x08
    1b1e:	88 23       	and	r24, r24
    1b20:	91 f0       	breq	.+36     	; 0x1b46 <xQueueGenericReceive+0x98>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1b22:	c8 01       	movw	r24, r16
    1b24:	08 96       	adiw	r24, 0x08	; 8
    1b26:	24 d4       	rcall	.+2120   	; 0x2370 <xTaskRemoveFromEventList>
    1b28:	88 23       	and	r24, r24
    1b2a:	69 f0       	breq	.+26     	; 0x1b46 <xQueueGenericReceive+0x98>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1b2c:	3f dd       	rcall	.-1410   	; 0x15ac <vPortYield>
    1b2e:	0b c0       	rjmp	.+22     	; 0x1b46 <xQueueGenericReceive+0x98>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1b30:	f8 01       	movw	r30, r16
    1b32:	d7 82       	std	Z+7, r13	; 0x07
    1b34:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1b36:	81 89       	ldd	r24, Z+17	; 0x11
    1b38:	88 23       	and	r24, r24
    1b3a:	29 f0       	breq	.+10     	; 0x1b46 <xQueueGenericReceive+0x98>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1b3c:	c8 01       	movw	r24, r16
    1b3e:	41 96       	adiw	r24, 0x11	; 17
    1b40:	17 d4       	rcall	.+2094   	; 0x2370 <xTaskRemoveFromEventList>
    1b42:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1b44:	33 dd       	rcall	.-1434   	; 0x15ac <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	58 c0       	rjmp	.+176    	; 0x1bfe <xQueueGenericReceive+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1b4e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b50:	5d 81       	ldd	r21, Y+5	; 0x05
    1b52:	45 2b       	or	r20, r21
    1b54:	21 f4       	brne	.+8      	; 0x1b5e <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1b56:	0f 90       	pop	r0
    1b58:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	50 c0       	rjmp	.+160    	; 0x1bfe <xQueueGenericReceive+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    1b5e:	e1 10       	cpse	r14, r1
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1b62:	ce 01       	movw	r24, r28
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	4a d4       	rcall	.+2196   	; 0x23fc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1b68:	e9 2c       	mov	r14, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1b6e:	f2 d1       	rcall	.+996    	; 0x1f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	0f 92       	push	r0
    1b76:	f8 01       	movw	r30, r16
    1b78:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <xQueueGenericReceive+0xd2>
    1b7e:	15 8e       	std	Z+29, r1	; 0x1d
    1b80:	f8 01       	movw	r30, r16
    1b82:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b84:	9f 3f       	cpi	r25, 0xFF	; 255
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <xQueueGenericReceive+0xdc>
    1b88:	16 8e       	std	Z+30, r1	; 0x1e
    1b8a:	0f 90       	pop	r0
    1b8c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1b8e:	be 01       	movw	r22, r28
    1b90:	6c 5f       	subi	r22, 0xFC	; 252
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	ce 01       	movw	r24, r28
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	3c d4       	rcall	.+2168   	; 0x2412 <xTaskCheckForTimeOut>
    1b9a:	81 11       	cpse	r24, r1
    1b9c:	24 c0       	rjmp	.+72     	; 0x1be6 <xQueueGenericReceive+0x138>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1ba8:	0f 90       	pop	r0
    1baa:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1bac:	81 11       	cpse	r24, r1
    1bae:	17 c0       	rjmp	.+46     	; 0x1bde <xQueueGenericReceive+0x130>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	89 2b       	or	r24, r25
    1bb6:	41 f4       	brne	.+16     	; 0x1bc8 <xQueueGenericReceive+0x11a>
					{
						taskENTER_CRITICAL();
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	63 d4       	rcall	.+2246   	; 0x248a <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1bc8:	6c 81       	ldd	r22, Y+4	; 0x04
    1bca:	7d 81       	ldd	r23, Y+5	; 0x05
    1bcc:	c6 01       	movw	r24, r12
    1bce:	bf d3       	rcall	.+1918   	; 0x234e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	17 de       	rcall	.-978    	; 0x1802 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1bd4:	7c d2       	rcall	.+1272   	; 0x20ce <xTaskResumeAll>
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	87 cf       	rjmp	.-242    	; 0x1ae8 <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
    1bda:	e8 dc       	rcall	.-1584   	; 0x15ac <vPortYield>
    1bdc:	85 cf       	rjmp	.-246    	; 0x1ae8 <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1bde:	c8 01       	movw	r24, r16
    1be0:	10 de       	rcall	.-992    	; 0x1802 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1be2:	75 d2       	rcall	.+1258   	; 0x20ce <xTaskResumeAll>
    1be4:	81 cf       	rjmp	.-254    	; 0x1ae8 <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1be6:	c8 01       	movw	r24, r16
    1be8:	0c de       	rcall	.-1000   	; 0x1802 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1bea:	71 d2       	rcall	.+1250   	; 0x20ce <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1bf6:	0f 90       	pop	r0
    1bf8:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	75 cf       	rjmp	.-278    	; 0x1ae8 <xQueueGenericReceive+0x3a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	bf 90       	pop	r11
    1c1a:	af 90       	pop	r10
    1c1c:	9f 90       	pop	r9
    1c1e:	8f 90       	pop	r8
    1c20:	08 95       	ret

00001c22 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1c22:	e0 91 8c 09 	lds	r30, 0x098C	; 0x80098c <pxDelayedTaskList>
    1c26:	f0 91 8d 09 	lds	r31, 0x098D	; 0x80098d <pxDelayedTaskList+0x1>
    1c2a:	80 81       	ld	r24, Z
    1c2c:	81 11       	cpse	r24, r1
    1c2e:	07 c0       	rjmp	.+14     	; 0x1c3e <prvResetNextTaskUnblockTime+0x1c>
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	9f ef       	ldi	r25, 0xFF	; 255
    1c34:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <xNextTaskUnblockTime+0x1>
    1c38:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <xNextTaskUnblockTime>
    1c3c:	08 95       	ret
    1c3e:	e0 91 8c 09 	lds	r30, 0x098C	; 0x80098c <pxDelayedTaskList>
    1c42:	f0 91 8d 09 	lds	r31, 0x098D	; 0x80098d <pxDelayedTaskList+0x1>
    1c46:	05 80       	ldd	r0, Z+5	; 0x05
    1c48:	f6 81       	ldd	r31, Z+6	; 0x06
    1c4a:	e0 2d       	mov	r30, r0
    1c4c:	06 80       	ldd	r0, Z+6	; 0x06
    1c4e:	f7 81       	ldd	r31, Z+7	; 0x07
    1c50:	e0 2d       	mov	r30, r0
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <xNextTaskUnblockTime+0x1>
    1c5a:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <xNextTaskUnblockTime>
    1c5e:	08 95       	ret

00001c60 <prvAddCurrentTaskToDelayedList>:
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	ec 01       	movw	r28, r24
    1c6c:	f6 2e       	mov	r15, r22
    1c6e:	00 91 6b 09 	lds	r16, 0x096B	; 0x80096b <xTickCount>
    1c72:	10 91 6c 09 	lds	r17, 0x096C	; 0x80096c <xTickCount+0x1>
    1c76:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    1c7a:	90 91 c5 09 	lds	r25, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    1c7e:	02 96       	adiw	r24, 0x02	; 2
    1c80:	ce db       	rcall	.-2148   	; 0x141e <uxListRemove>
    1c82:	cf 3f       	cpi	r28, 0xFF	; 255
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	d8 07       	cpc	r29, r24
    1c88:	61 f4       	brne	.+24     	; 0x1ca2 <prvAddCurrentTaskToDelayedList+0x42>
    1c8a:	ff 20       	and	r15, r15
    1c8c:	51 f0       	breq	.+20     	; 0x1ca2 <prvAddCurrentTaskToDelayedList+0x42>
    1c8e:	60 91 c4 09 	lds	r22, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    1c92:	70 91 c5 09 	lds	r23, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    1c96:	6e 5f       	subi	r22, 0xFE	; 254
    1c98:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9a:	8e e6       	ldi	r24, 0x6E	; 110
    1c9c:	99 e0       	ldi	r25, 0x09	; 9
    1c9e:	6d db       	rcall	.-2342   	; 0x137a <vListInsertEnd>
    1ca0:	2d c0       	rjmp	.+90     	; 0x1cfc <prvAddCurrentTaskToDelayedList+0x9c>
    1ca2:	c0 0f       	add	r28, r16
    1ca4:	d1 1f       	adc	r29, r17
    1ca6:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    1caa:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    1cae:	d3 83       	std	Z+3, r29	; 0x03
    1cb0:	c2 83       	std	Z+2, r28	; 0x02
    1cb2:	c0 17       	cp	r28, r16
    1cb4:	d1 07       	cpc	r29, r17
    1cb6:	60 f4       	brcc	.+24     	; 0x1cd0 <prvAddCurrentTaskToDelayedList+0x70>
    1cb8:	60 91 c4 09 	lds	r22, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    1cbc:	70 91 c5 09 	lds	r23, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    1cc0:	80 91 8a 09 	lds	r24, 0x098A	; 0x80098a <pxOverflowDelayedTaskList>
    1cc4:	90 91 8b 09 	lds	r25, 0x098B	; 0x80098b <pxOverflowDelayedTaskList+0x1>
    1cc8:	6e 5f       	subi	r22, 0xFE	; 254
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	77 db       	rcall	.-2322   	; 0x13bc <vListInsert>
    1cce:	16 c0       	rjmp	.+44     	; 0x1cfc <prvAddCurrentTaskToDelayedList+0x9c>
    1cd0:	60 91 c4 09 	lds	r22, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    1cd4:	70 91 c5 09 	lds	r23, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    1cd8:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <pxDelayedTaskList>
    1cdc:	90 91 8d 09 	lds	r25, 0x098D	; 0x80098d <pxDelayedTaskList+0x1>
    1ce0:	6e 5f       	subi	r22, 0xFE	; 254
    1ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce4:	6b db       	rcall	.-2346   	; 0x13bc <vListInsert>
    1ce6:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <xNextTaskUnblockTime>
    1cea:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <xNextTaskUnblockTime+0x1>
    1cee:	c8 17       	cp	r28, r24
    1cf0:	d9 07       	cpc	r29, r25
    1cf2:	20 f4       	brcc	.+8      	; 0x1cfc <prvAddCurrentTaskToDelayedList+0x9c>
    1cf4:	d0 93 64 09 	sts	0x0964, r29	; 0x800964 <xNextTaskUnblockTime+0x1>
    1cf8:	c0 93 63 09 	sts	0x0963, r28	; 0x800963 <xNextTaskUnblockTime>
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	08 95       	ret

00001d08 <xTaskCreate>:
    1d08:	4f 92       	push	r4
    1d0a:	5f 92       	push	r5
    1d0c:	6f 92       	push	r6
    1d0e:	7f 92       	push	r7
    1d10:	8f 92       	push	r8
    1d12:	9f 92       	push	r9
    1d14:	af 92       	push	r10
    1d16:	bf 92       	push	r11
    1d18:	cf 92       	push	r12
    1d1a:	df 92       	push	r13
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	4c 01       	movw	r8, r24
    1d28:	6b 01       	movw	r12, r22
    1d2a:	5a 01       	movw	r10, r20
    1d2c:	29 01       	movw	r4, r18
    1d2e:	ca 01       	movw	r24, r20
    1d30:	de da       	rcall	.-2628   	; 0x12ee <pvPortMalloc>
    1d32:	3c 01       	movw	r6, r24
    1d34:	89 2b       	or	r24, r25
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <xTaskCreate+0x32>
    1d38:	d4 c0       	rjmp	.+424    	; 0x1ee2 <xTaskCreate+0x1da>
    1d3a:	88 e2       	ldi	r24, 0x28	; 40
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	d7 da       	rcall	.-2642   	; 0x12ee <pvPortMalloc>
    1d40:	ec 01       	movw	r28, r24
    1d42:	89 2b       	or	r24, r25
    1d44:	71 f0       	breq	.+28     	; 0x1d62 <xTaskCreate+0x5a>
    1d46:	78 8e       	std	Y+24, r7	; 0x18
    1d48:	6f 8a       	std	Y+23, r6	; 0x17
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	a8 1a       	sub	r10, r24
    1d4e:	b1 08       	sbc	r11, r1
    1d50:	6a 0c       	add	r6, r10
    1d52:	7b 1c       	adc	r7, r11
    1d54:	d6 01       	movw	r26, r12
    1d56:	8c 91       	ld	r24, X
    1d58:	89 8f       	std	Y+25, r24	; 0x19
    1d5a:	8c 91       	ld	r24, X
    1d5c:	81 11       	cpse	r24, r1
    1d5e:	04 c0       	rjmp	.+8      	; 0x1d68 <xTaskCreate+0x60>
    1d60:	17 c0       	rjmp	.+46     	; 0x1d90 <xTaskCreate+0x88>
    1d62:	c3 01       	movw	r24, r6
    1d64:	f7 da       	rcall	.-2578   	; 0x1354 <vPortFree>
    1d66:	bd c0       	rjmp	.+378    	; 0x1ee2 <xTaskCreate+0x1da>
    1d68:	ae 01       	movw	r20, r28
    1d6a:	46 5e       	subi	r20, 0xE6	; 230
    1d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6e:	f6 01       	movw	r30, r12
    1d70:	31 96       	adiw	r30, 0x01	; 1
    1d72:	b8 e0       	ldi	r27, 0x08	; 8
    1d74:	cb 0e       	add	r12, r27
    1d76:	d1 1c       	adc	r13, r1
    1d78:	cf 01       	movw	r24, r30
    1d7a:	21 91       	ld	r18, Z+
    1d7c:	da 01       	movw	r26, r20
    1d7e:	2d 93       	st	X+, r18
    1d80:	ad 01       	movw	r20, r26
    1d82:	dc 01       	movw	r26, r24
    1d84:	8c 91       	ld	r24, X
    1d86:	88 23       	and	r24, r24
    1d88:	19 f0       	breq	.+6      	; 0x1d90 <xTaskCreate+0x88>
    1d8a:	ec 15       	cp	r30, r12
    1d8c:	fd 05       	cpc	r31, r13
    1d8e:	a1 f7       	brne	.-24     	; 0x1d78 <xTaskCreate+0x70>
    1d90:	18 a2       	std	Y+32, r1	; 0x20
    1d92:	04 30       	cpi	r16, 0x04	; 4
    1d94:	08 f0       	brcs	.+2      	; 0x1d98 <xTaskCreate+0x90>
    1d96:	03 e0       	ldi	r16, 0x03	; 3
    1d98:	0e 8b       	std	Y+22, r16	; 0x16
    1d9a:	09 a3       	std	Y+33, r16	; 0x21
    1d9c:	1a a2       	std	Y+34, r1	; 0x22
    1d9e:	6e 01       	movw	r12, r28
    1da0:	b2 e0       	ldi	r27, 0x02	; 2
    1da2:	cb 0e       	add	r12, r27
    1da4:	d1 1c       	adc	r13, r1
    1da6:	c6 01       	movw	r24, r12
    1da8:	e4 da       	rcall	.-2616   	; 0x1372 <vListInitialiseItem>
    1daa:	ce 01       	movw	r24, r28
    1dac:	0c 96       	adiw	r24, 0x0c	; 12
    1dae:	e1 da       	rcall	.-2622   	; 0x1372 <vListInitialiseItem>
    1db0:	d9 87       	std	Y+9, r29	; 0x09
    1db2:	c8 87       	std	Y+8, r28	; 0x08
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	80 1b       	sub	r24, r16
    1dba:	91 09       	sbc	r25, r1
    1dbc:	9d 87       	std	Y+13, r25	; 0x0d
    1dbe:	8c 87       	std	Y+12, r24	; 0x0c
    1dc0:	db 8b       	std	Y+19, r29	; 0x13
    1dc2:	ca 8b       	std	Y+18, r28	; 0x12
    1dc4:	1b a2       	std	Y+35, r1	; 0x23
    1dc6:	1c a2       	std	Y+36, r1	; 0x24
    1dc8:	1d a2       	std	Y+37, r1	; 0x25
    1dca:	1e a2       	std	Y+38, r1	; 0x26
    1dcc:	1f a2       	std	Y+39, r1	; 0x27
    1dce:	a2 01       	movw	r20, r4
    1dd0:	b4 01       	movw	r22, r8
    1dd2:	c3 01       	movw	r24, r6
    1dd4:	4a db       	rcall	.-2412   	; 0x146a <pxPortInitialiseStack>
    1dd6:	99 83       	std	Y+1, r25	; 0x01
    1dd8:	88 83       	st	Y, r24
    1dda:	e1 14       	cp	r14, r1
    1ddc:	f1 04       	cpc	r15, r1
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <xTaskCreate+0xde>
    1de0:	f7 01       	movw	r30, r14
    1de2:	d1 83       	std	Z+1, r29	; 0x01
    1de4:	c0 83       	st	Z, r28
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	0f 92       	push	r0
    1dec:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <uxCurrentNumberOfTasks>
    1df0:	8f 5f       	subi	r24, 0xFF	; 255
    1df2:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <uxCurrentNumberOfTasks>
    1df6:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    1dfa:	90 91 c5 09 	lds	r25, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    1dfe:	89 2b       	or	r24, r25
    1e00:	89 f5       	brne	.+98     	; 0x1e64 <xTaskCreate+0x15c>
    1e02:	d0 93 c5 09 	sts	0x09C5, r29	; 0x8009c5 <pxCurrentTCB+0x1>
    1e06:	c0 93 c4 09 	sts	0x09C4, r28	; 0x8009c4 <pxCurrentTCB>
    1e0a:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <uxCurrentNumberOfTasks>
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <xTaskCreate+0x10c>
    1e12:	38 c0       	rjmp	.+112    	; 0x1e84 <xTaskCreate+0x17c>
    1e14:	80 ea       	ldi	r24, 0xA0	; 160
    1e16:	99 e0       	ldi	r25, 0x09	; 9
    1e18:	9e da       	rcall	.-2756   	; 0x1356 <vListInitialise>
    1e1a:	89 ea       	ldi	r24, 0xA9	; 169
    1e1c:	99 e0       	ldi	r25, 0x09	; 9
    1e1e:	9b da       	rcall	.-2762   	; 0x1356 <vListInitialise>
    1e20:	82 eb       	ldi	r24, 0xB2	; 178
    1e22:	99 e0       	ldi	r25, 0x09	; 9
    1e24:	98 da       	rcall	.-2768   	; 0x1356 <vListInitialise>
    1e26:	8b eb       	ldi	r24, 0xBB	; 187
    1e28:	99 e0       	ldi	r25, 0x09	; 9
    1e2a:	95 da       	rcall	.-2774   	; 0x1356 <vListInitialise>
    1e2c:	87 e9       	ldi	r24, 0x97	; 151
    1e2e:	99 e0       	ldi	r25, 0x09	; 9
    1e30:	92 da       	rcall	.-2780   	; 0x1356 <vListInitialise>
    1e32:	8e e8       	ldi	r24, 0x8E	; 142
    1e34:	99 e0       	ldi	r25, 0x09	; 9
    1e36:	8f da       	rcall	.-2786   	; 0x1356 <vListInitialise>
    1e38:	81 e8       	ldi	r24, 0x81	; 129
    1e3a:	99 e0       	ldi	r25, 0x09	; 9
    1e3c:	8c da       	rcall	.-2792   	; 0x1356 <vListInitialise>
    1e3e:	88 e7       	ldi	r24, 0x78	; 120
    1e40:	99 e0       	ldi	r25, 0x09	; 9
    1e42:	89 da       	rcall	.-2798   	; 0x1356 <vListInitialise>
    1e44:	8e e6       	ldi	r24, 0x6E	; 110
    1e46:	99 e0       	ldi	r25, 0x09	; 9
    1e48:	86 da       	rcall	.-2804   	; 0x1356 <vListInitialise>
    1e4a:	87 e9       	ldi	r24, 0x97	; 151
    1e4c:	99 e0       	ldi	r25, 0x09	; 9
    1e4e:	90 93 8d 09 	sts	0x098D, r25	; 0x80098d <pxDelayedTaskList+0x1>
    1e52:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <pxDelayedTaskList>
    1e56:	8e e8       	ldi	r24, 0x8E	; 142
    1e58:	99 e0       	ldi	r25, 0x09	; 9
    1e5a:	90 93 8b 09 	sts	0x098B, r25	; 0x80098b <pxOverflowDelayedTaskList+0x1>
    1e5e:	80 93 8a 09 	sts	0x098A, r24	; 0x80098a <pxOverflowDelayedTaskList>
    1e62:	10 c0       	rjmp	.+32     	; 0x1e84 <xTaskCreate+0x17c>
    1e64:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <xSchedulerRunning>
    1e68:	81 11       	cpse	r24, r1
    1e6a:	0c c0       	rjmp	.+24     	; 0x1e84 <xTaskCreate+0x17c>
    1e6c:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    1e70:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    1e74:	96 89       	ldd	r25, Z+22	; 0x16
    1e76:	8e 89       	ldd	r24, Y+22	; 0x16
    1e78:	89 17       	cp	r24, r25
    1e7a:	20 f0       	brcs	.+8      	; 0x1e84 <xTaskCreate+0x17c>
    1e7c:	d0 93 c5 09 	sts	0x09C5, r29	; 0x8009c5 <pxCurrentTCB+0x1>
    1e80:	c0 93 c4 09 	sts	0x09C4, r28	; 0x8009c4 <pxCurrentTCB>
    1e84:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <uxTaskNumber>
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <uxTaskNumber>
    1e8e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e90:	90 91 6a 09 	lds	r25, 0x096A	; 0x80096a <uxTopReadyPriority>
    1e94:	98 17       	cp	r25, r24
    1e96:	10 f4       	brcc	.+4      	; 0x1e9c <xTaskCreate+0x194>
    1e98:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <uxTopReadyPriority>
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	22 0f       	add	r18, r18
    1ea6:	33 1f       	adc	r19, r19
    1ea8:	22 0f       	add	r18, r18
    1eaa:	33 1f       	adc	r19, r19
    1eac:	82 0f       	add	r24, r18
    1eae:	93 1f       	adc	r25, r19
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	80 56       	subi	r24, 0x60	; 96
    1eb4:	96 4f       	sbci	r25, 0xF6	; 246
    1eb6:	61 da       	rcall	.-2878   	; 0x137a <vListInsertEnd>
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <xSchedulerRunning>
    1ec0:	88 23       	and	r24, r24
    1ec2:	59 f0       	breq	.+22     	; 0x1eda <xTaskCreate+0x1d2>
    1ec4:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    1ec8:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    1ecc:	96 89       	ldd	r25, Z+22	; 0x16
    1ece:	8e 89       	ldd	r24, Y+22	; 0x16
    1ed0:	98 17       	cp	r25, r24
    1ed2:	28 f4       	brcc	.+10     	; 0x1ede <xTaskCreate+0x1d6>
    1ed4:	6b db       	rcall	.-2346   	; 0x15ac <vPortYield>
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <xTaskCreate+0x1dc>
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <xTaskCreate+0x1dc>
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <xTaskCreate+0x1dc>
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	df 90       	pop	r13
    1ef0:	cf 90       	pop	r12
    1ef2:	bf 90       	pop	r11
    1ef4:	af 90       	pop	r10
    1ef6:	9f 90       	pop	r9
    1ef8:	8f 90       	pop	r8
    1efa:	7f 90       	pop	r7
    1efc:	6f 90       	pop	r6
    1efe:	5f 90       	pop	r5
    1f00:	4f 90       	pop	r4
    1f02:	08 95       	ret

00001f04 <vTaskStartScheduler>:
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	0f 93       	push	r16
    1f0a:	0f 2e       	mov	r0, r31
    1f0c:	f1 e6       	ldi	r31, 0x61	; 97
    1f0e:	ef 2e       	mov	r14, r31
    1f10:	f9 e0       	ldi	r31, 0x09	; 9
    1f12:	ff 2e       	mov	r15, r31
    1f14:	f0 2d       	mov	r31, r0
    1f16:	00 e0       	ldi	r16, 0x00	; 0
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	45 e5       	ldi	r20, 0x55	; 85
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	6a e2       	ldi	r22, 0x2A	; 42
    1f22:	71 e0       	ldi	r23, 0x01	; 1
    1f24:	80 ef       	ldi	r24, 0xF0	; 240
    1f26:	90 e1       	ldi	r25, 0x10	; 16
    1f28:	ef de       	rcall	.-546    	; 0x1d08 <xTaskCreate>
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	79 f4       	brne	.+30     	; 0x1f4c <vTaskStartScheduler+0x48>
    1f2e:	f8 94       	cli
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	9f ef       	ldi	r25, 0xFF	; 255
    1f34:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <xNextTaskUnblockTime+0x1>
    1f38:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <xNextTaskUnblockTime>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <xSchedulerRunning>
    1f42:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <xTickCount+0x1>
    1f46:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <xTickCount>
    1f4a:	fb da       	rcall	.-2570   	; 0x1542 <xPortStartScheduler>
    1f4c:	0f 91       	pop	r16
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	08 95       	ret

00001f54 <vTaskSuspendAll>:
    1f54:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <uxSchedulerSuspended>
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <uxSchedulerSuspended>
    1f5e:	08 95       	ret

00001f60 <xTaskIncrementTick>:
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <uxSchedulerSuspended>
    1f74:	81 11       	cpse	r24, r1
    1f76:	95 c0       	rjmp	.+298    	; 0x20a2 <xTaskIncrementTick+0x142>
    1f78:	e0 90 6b 09 	lds	r14, 0x096B	; 0x80096b <xTickCount>
    1f7c:	f0 90 6c 09 	lds	r15, 0x096C	; 0x80096c <xTickCount+0x1>
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	e8 1a       	sub	r14, r24
    1f84:	f8 0a       	sbc	r15, r24
    1f86:	f0 92 6c 09 	sts	0x096C, r15	; 0x80096c <xTickCount+0x1>
    1f8a:	e0 92 6b 09 	sts	0x096B, r14	; 0x80096b <xTickCount>
    1f8e:	e1 14       	cp	r14, r1
    1f90:	f1 04       	cpc	r15, r1
    1f92:	b1 f4       	brne	.+44     	; 0x1fc0 <xTaskIncrementTick+0x60>
    1f94:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <pxDelayedTaskList>
    1f98:	90 91 8d 09 	lds	r25, 0x098D	; 0x80098d <pxDelayedTaskList+0x1>
    1f9c:	20 91 8a 09 	lds	r18, 0x098A	; 0x80098a <pxOverflowDelayedTaskList>
    1fa0:	30 91 8b 09 	lds	r19, 0x098B	; 0x80098b <pxOverflowDelayedTaskList+0x1>
    1fa4:	30 93 8d 09 	sts	0x098D, r19	; 0x80098d <pxDelayedTaskList+0x1>
    1fa8:	20 93 8c 09 	sts	0x098C, r18	; 0x80098c <pxDelayedTaskList>
    1fac:	90 93 8b 09 	sts	0x098B, r25	; 0x80098b <pxOverflowDelayedTaskList+0x1>
    1fb0:	80 93 8a 09 	sts	0x098A, r24	; 0x80098a <pxOverflowDelayedTaskList>
    1fb4:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <xNumOfOverflows>
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <xNumOfOverflows>
    1fbe:	31 de       	rcall	.-926    	; 0x1c22 <prvResetNextTaskUnblockTime>
    1fc0:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <xNextTaskUnblockTime>
    1fc4:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <xNextTaskUnblockTime+0x1>
    1fc8:	e8 16       	cp	r14, r24
    1fca:	f9 06       	cpc	r15, r25
    1fcc:	10 f4       	brcc	.+4      	; 0x1fd2 <xTaskIncrementTick+0x72>
    1fce:	d1 2c       	mov	r13, r1
    1fd0:	50 c0       	rjmp	.+160    	; 0x2072 <xTaskIncrementTick+0x112>
    1fd2:	d1 2c       	mov	r13, r1
    1fd4:	cc 24       	eor	r12, r12
    1fd6:	c3 94       	inc	r12
    1fd8:	e0 91 8c 09 	lds	r30, 0x098C	; 0x80098c <pxDelayedTaskList>
    1fdc:	f0 91 8d 09 	lds	r31, 0x098D	; 0x80098d <pxDelayedTaskList+0x1>
    1fe0:	90 81       	ld	r25, Z
    1fe2:	91 11       	cpse	r25, r1
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <xTaskIncrementTick+0x94>
    1fe6:	8f ef       	ldi	r24, 0xFF	; 255
    1fe8:	9f ef       	ldi	r25, 0xFF	; 255
    1fea:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <xNextTaskUnblockTime+0x1>
    1fee:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <xNextTaskUnblockTime>
    1ff2:	3f c0       	rjmp	.+126    	; 0x2072 <xTaskIncrementTick+0x112>
    1ff4:	e0 91 8c 09 	lds	r30, 0x098C	; 0x80098c <pxDelayedTaskList>
    1ff8:	f0 91 8d 09 	lds	r31, 0x098D	; 0x80098d <pxDelayedTaskList+0x1>
    1ffc:	05 80       	ldd	r0, Z+5	; 0x05
    1ffe:	f6 81       	ldd	r31, Z+6	; 0x06
    2000:	e0 2d       	mov	r30, r0
    2002:	c6 81       	ldd	r28, Z+6	; 0x06
    2004:	d7 81       	ldd	r29, Z+7	; 0x07
    2006:	2a 81       	ldd	r18, Y+2	; 0x02
    2008:	3b 81       	ldd	r19, Y+3	; 0x03
    200a:	e2 16       	cp	r14, r18
    200c:	f3 06       	cpc	r15, r19
    200e:	28 f4       	brcc	.+10     	; 0x201a <xTaskIncrementTick+0xba>
    2010:	30 93 64 09 	sts	0x0964, r19	; 0x800964 <xNextTaskUnblockTime+0x1>
    2014:	20 93 63 09 	sts	0x0963, r18	; 0x800963 <xNextTaskUnblockTime>
    2018:	2c c0       	rjmp	.+88     	; 0x2072 <xTaskIncrementTick+0x112>
    201a:	8e 01       	movw	r16, r28
    201c:	0e 5f       	subi	r16, 0xFE	; 254
    201e:	1f 4f       	sbci	r17, 0xFF	; 255
    2020:	c8 01       	movw	r24, r16
    2022:	fd d9       	rcall	.-3078   	; 0x141e <uxListRemove>
    2024:	8c 89       	ldd	r24, Y+20	; 0x14
    2026:	9d 89       	ldd	r25, Y+21	; 0x15
    2028:	89 2b       	or	r24, r25
    202a:	19 f0       	breq	.+6      	; 0x2032 <xTaskIncrementTick+0xd2>
    202c:	ce 01       	movw	r24, r28
    202e:	0c 96       	adiw	r24, 0x0c	; 12
    2030:	f6 d9       	rcall	.-3092   	; 0x141e <uxListRemove>
    2032:	2e 89       	ldd	r18, Y+22	; 0x16
    2034:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <uxTopReadyPriority>
    2038:	82 17       	cp	r24, r18
    203a:	10 f4       	brcc	.+4      	; 0x2040 <xTaskIncrementTick+0xe0>
    203c:	20 93 6a 09 	sts	0x096A, r18	; 0x80096a <uxTopReadyPriority>
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	c9 01       	movw	r24, r18
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	82 0f       	add	r24, r18
    2052:	93 1f       	adc	r25, r19
    2054:	b8 01       	movw	r22, r16
    2056:	80 56       	subi	r24, 0x60	; 96
    2058:	96 4f       	sbci	r25, 0xF6	; 246
    205a:	8f d9       	rcall	.-3298   	; 0x137a <vListInsertEnd>
    205c:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    2060:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    2064:	9e 89       	ldd	r25, Y+22	; 0x16
    2066:	86 89       	ldd	r24, Z+22	; 0x16
    2068:	98 17       	cp	r25, r24
    206a:	08 f4       	brcc	.+2      	; 0x206e <xTaskIncrementTick+0x10e>
    206c:	b5 cf       	rjmp	.-150    	; 0x1fd8 <xTaskIncrementTick+0x78>
    206e:	dc 2c       	mov	r13, r12
    2070:	b3 cf       	rjmp	.-154    	; 0x1fd8 <xTaskIncrementTick+0x78>
    2072:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    2076:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    207a:	86 89       	ldd	r24, Z+22	; 0x16
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	fc 01       	movw	r30, r24
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	8e 0f       	add	r24, r30
    208e:	9f 1f       	adc	r25, r31
    2090:	fc 01       	movw	r30, r24
    2092:	e0 56       	subi	r30, 0x60	; 96
    2094:	f6 4f       	sbci	r31, 0xF6	; 246
    2096:	80 81       	ld	r24, Z
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	48 f0       	brcs	.+18     	; 0x20ae <xTaskIncrementTick+0x14e>
    209c:	dd 24       	eor	r13, r13
    209e:	d3 94       	inc	r13
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <xTaskIncrementTick+0x14e>
    20a2:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <uxPendedTicks>
    20a6:	8f 5f       	subi	r24, 0xFF	; 255
    20a8:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <uxPendedTicks>
    20ac:	d1 2c       	mov	r13, r1
    20ae:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <xYieldPending>
    20b2:	88 23       	and	r24, r24
    20b4:	11 f0       	breq	.+4      	; 0x20ba <xTaskIncrementTick+0x15a>
    20b6:	dd 24       	eor	r13, r13
    20b8:	d3 94       	inc	r13
    20ba:	8d 2d       	mov	r24, r13
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	1f 91       	pop	r17
    20c2:	0f 91       	pop	r16
    20c4:	ff 90       	pop	r15
    20c6:	ef 90       	pop	r14
    20c8:	df 90       	pop	r13
    20ca:	cf 90       	pop	r12
    20cc:	08 95       	ret

000020ce <xTaskResumeAll>:
    20ce:	df 92       	push	r13
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	0f 92       	push	r0
    20e2:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <uxSchedulerSuspended>
    20e6:	81 50       	subi	r24, 0x01	; 1
    20e8:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <uxSchedulerSuspended>
    20ec:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <uxSchedulerSuspended>
    20f0:	81 11       	cpse	r24, r1
    20f2:	59 c0       	rjmp	.+178    	; 0x21a6 <xTaskResumeAll+0xd8>
    20f4:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <uxCurrentNumberOfTasks>
    20f8:	81 11       	cpse	r24, r1
    20fa:	30 c0       	rjmp	.+96     	; 0x215c <xTaskResumeAll+0x8e>
    20fc:	57 c0       	rjmp	.+174    	; 0x21ac <xTaskResumeAll+0xde>
    20fe:	d7 01       	movw	r26, r14
    2100:	15 96       	adiw	r26, 0x05	; 5
    2102:	ed 91       	ld	r30, X+
    2104:	fc 91       	ld	r31, X
    2106:	16 97       	sbiw	r26, 0x06	; 6
    2108:	c6 81       	ldd	r28, Z+6	; 0x06
    210a:	d7 81       	ldd	r29, Z+7	; 0x07
    210c:	ce 01       	movw	r24, r28
    210e:	0c 96       	adiw	r24, 0x0c	; 12
    2110:	86 d9       	rcall	.-3316   	; 0x141e <uxListRemove>
    2112:	8e 01       	movw	r16, r28
    2114:	0e 5f       	subi	r16, 0xFE	; 254
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	c8 01       	movw	r24, r16
    211a:	81 d9       	rcall	.-3326   	; 0x141e <uxListRemove>
    211c:	2e 89       	ldd	r18, Y+22	; 0x16
    211e:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <uxTopReadyPriority>
    2122:	82 17       	cp	r24, r18
    2124:	10 f4       	brcc	.+4      	; 0x212a <xTaskResumeAll+0x5c>
    2126:	20 93 6a 09 	sts	0x096A, r18	; 0x80096a <uxTopReadyPriority>
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	c9 01       	movw	r24, r18
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	82 0f       	add	r24, r18
    213c:	93 1f       	adc	r25, r19
    213e:	b8 01       	movw	r22, r16
    2140:	80 56       	subi	r24, 0x60	; 96
    2142:	96 4f       	sbci	r25, 0xF6	; 246
    2144:	1a d9       	rcall	.-3532   	; 0x137a <vListInsertEnd>
    2146:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    214a:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    214e:	9e 89       	ldd	r25, Y+22	; 0x16
    2150:	86 89       	ldd	r24, Z+22	; 0x16
    2152:	98 17       	cp	r25, r24
    2154:	68 f0       	brcs	.+26     	; 0x2170 <xTaskResumeAll+0xa2>
    2156:	d0 92 67 09 	sts	0x0967, r13	; 0x800967 <xYieldPending>
    215a:	0a c0       	rjmp	.+20     	; 0x2170 <xTaskResumeAll+0xa2>
    215c:	c0 e0       	ldi	r28, 0x00	; 0
    215e:	d0 e0       	ldi	r29, 0x00	; 0
    2160:	0f 2e       	mov	r0, r31
    2162:	f1 e8       	ldi	r31, 0x81	; 129
    2164:	ef 2e       	mov	r14, r31
    2166:	f9 e0       	ldi	r31, 0x09	; 9
    2168:	ff 2e       	mov	r15, r31
    216a:	f0 2d       	mov	r31, r0
    216c:	dd 24       	eor	r13, r13
    216e:	d3 94       	inc	r13
    2170:	f7 01       	movw	r30, r14
    2172:	80 81       	ld	r24, Z
    2174:	81 11       	cpse	r24, r1
    2176:	c3 cf       	rjmp	.-122    	; 0x20fe <xTaskResumeAll+0x30>
    2178:	cd 2b       	or	r28, r29
    217a:	09 f0       	breq	.+2      	; 0x217e <xTaskResumeAll+0xb0>
    217c:	52 dd       	rcall	.-1372   	; 0x1c22 <prvResetNextTaskUnblockTime>
    217e:	c0 91 68 09 	lds	r28, 0x0968	; 0x800968 <uxPendedTicks>
    2182:	cc 23       	and	r28, r28
    2184:	49 f0       	breq	.+18     	; 0x2198 <xTaskResumeAll+0xca>
    2186:	d1 e0       	ldi	r29, 0x01	; 1
    2188:	eb de       	rcall	.-554    	; 0x1f60 <xTaskIncrementTick>
    218a:	81 11       	cpse	r24, r1
    218c:	d0 93 67 09 	sts	0x0967, r29	; 0x800967 <xYieldPending>
    2190:	c1 50       	subi	r28, 0x01	; 1
    2192:	d1 f7       	brne	.-12     	; 0x2188 <xTaskResumeAll+0xba>
    2194:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <uxPendedTicks>
    2198:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <xYieldPending>
    219c:	88 23       	and	r24, r24
    219e:	29 f0       	breq	.+10     	; 0x21aa <xTaskResumeAll+0xdc>
    21a0:	05 da       	rcall	.-3062   	; 0x15ac <vPortYield>
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	03 c0       	rjmp	.+6      	; 0x21ac <xTaskResumeAll+0xde>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <xTaskResumeAll+0xde>
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	0f 90       	pop	r0
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	df 90       	pop	r13
    21be:	08 95       	ret

000021c0 <vTaskDelay>:
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	ec 01       	movw	r28, r24
    21c6:	89 2b       	or	r24, r25
    21c8:	39 f0       	breq	.+14     	; 0x21d8 <vTaskDelay+0x18>
    21ca:	c4 de       	rcall	.-632    	; 0x1f54 <vTaskSuspendAll>
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	ce 01       	movw	r24, r28
    21d0:	47 dd       	rcall	.-1394   	; 0x1c60 <prvAddCurrentTaskToDelayedList>
    21d2:	7d df       	rcall	.-262    	; 0x20ce <xTaskResumeAll>
    21d4:	81 11       	cpse	r24, r1
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <vTaskDelay+0x1a>
    21d8:	e9 d9       	rcall	.-3118   	; 0x15ac <vPortYield>
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <prvIdleTask>:
    21e0:	08 e7       	ldi	r16, 0x78	; 120
    21e2:	19 e0       	ldi	r17, 0x09	; 9
    21e4:	0f 2e       	mov	r0, r31
    21e6:	f0 ea       	ldi	r31, 0xA0	; 160
    21e8:	ef 2e       	mov	r14, r31
    21ea:	f9 e0       	ldi	r31, 0x09	; 9
    21ec:	ff 2e       	mov	r15, r31
    21ee:	f0 2d       	mov	r31, r0
    21f0:	24 c0       	rjmp	.+72     	; 0x223a <prvIdleTask+0x5a>
    21f2:	b0 de       	rcall	.-672    	; 0x1f54 <vTaskSuspendAll>
    21f4:	d8 01       	movw	r26, r16
    21f6:	cc 91       	ld	r28, X
    21f8:	6a df       	rcall	.-300    	; 0x20ce <xTaskResumeAll>
    21fa:	cc 23       	and	r28, r28
    21fc:	f1 f0       	breq	.+60     	; 0x223a <prvIdleTask+0x5a>
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	0f 92       	push	r0
    2204:	d8 01       	movw	r26, r16
    2206:	15 96       	adiw	r26, 0x05	; 5
    2208:	ed 91       	ld	r30, X+
    220a:	fc 91       	ld	r31, X
    220c:	16 97       	sbiw	r26, 0x06	; 6
    220e:	c6 81       	ldd	r28, Z+6	; 0x06
    2210:	d7 81       	ldd	r29, Z+7	; 0x07
    2212:	ce 01       	movw	r24, r28
    2214:	02 96       	adiw	r24, 0x02	; 2
    2216:	03 d9       	rcall	.-3578   	; 0x141e <uxListRemove>
    2218:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <uxCurrentNumberOfTasks>
    221c:	81 50       	subi	r24, 0x01	; 1
    221e:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <uxCurrentNumberOfTasks>
    2222:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <uxDeletedTasksWaitingCleanUp>
    2226:	81 50       	subi	r24, 0x01	; 1
    2228:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <uxDeletedTasksWaitingCleanUp>
    222c:	0f 90       	pop	r0
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	8f 89       	ldd	r24, Y+23	; 0x17
    2232:	98 8d       	ldd	r25, Y+24	; 0x18
    2234:	8f d8       	rcall	.-3810   	; 0x1354 <vPortFree>
    2236:	ce 01       	movw	r24, r28
    2238:	8d d8       	rcall	.-3814   	; 0x1354 <vPortFree>
    223a:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <uxDeletedTasksWaitingCleanUp>
    223e:	81 11       	cpse	r24, r1
    2240:	d8 cf       	rjmp	.-80     	; 0x21f2 <prvIdleTask+0x12>
    2242:	f7 01       	movw	r30, r14
    2244:	80 81       	ld	r24, Z
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	c0 f3       	brcs	.-16     	; 0x223a <prvIdleTask+0x5a>
    224a:	b0 d9       	rcall	.-3232   	; 0x15ac <vPortYield>
    224c:	f6 cf       	rjmp	.-20     	; 0x223a <prvIdleTask+0x5a>

0000224e <vTaskSwitchContext>:
    224e:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <uxSchedulerSuspended>
    2252:	88 23       	and	r24, r24
    2254:	21 f0       	breq	.+8      	; 0x225e <vTaskSwitchContext+0x10>
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <xYieldPending>
    225c:	08 95       	ret
    225e:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <xYieldPending>
    2262:	a0 91 c4 09 	lds	r26, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    2266:	b0 91 c5 09 	lds	r27, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    226a:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    226e:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    2272:	2d 91       	ld	r18, X+
    2274:	3c 91       	ld	r19, X
    2276:	87 89       	ldd	r24, Z+23	; 0x17
    2278:	90 8d       	ldd	r25, Z+24	; 0x18
    227a:	82 17       	cp	r24, r18
    227c:	93 07       	cpc	r25, r19
    227e:	58 f0       	brcs	.+22     	; 0x2296 <vTaskSwitchContext+0x48>
    2280:	60 91 c4 09 	lds	r22, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    2284:	70 91 c5 09 	lds	r23, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    2288:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    228c:	90 91 c5 09 	lds	r25, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    2290:	67 5e       	subi	r22, 0xE7	; 231
    2292:	7f 4f       	sbci	r23, 0xFF	; 255
    2294:	2b d8       	rcall	.-4010   	; 0x12ec <vApplicationStackOverflowHook>
    2296:	20 91 6a 09 	lds	r18, 0x096A	; 0x80096a <uxTopReadyPriority>
    229a:	82 2f       	mov	r24, r18
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	fc 01       	movw	r30, r24
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	ee 0f       	add	r30, r30
    22a6:	ff 1f       	adc	r31, r31
    22a8:	ee 0f       	add	r30, r30
    22aa:	ff 1f       	adc	r31, r31
    22ac:	e8 0f       	add	r30, r24
    22ae:	f9 1f       	adc	r31, r25
    22b0:	e0 56       	subi	r30, 0x60	; 96
    22b2:	f6 4f       	sbci	r31, 0xF6	; 246
    22b4:	30 81       	ld	r19, Z
    22b6:	31 11       	cpse	r19, r1
    22b8:	11 c0       	rjmp	.+34     	; 0x22dc <vTaskSwitchContext+0x8e>
    22ba:	21 50       	subi	r18, 0x01	; 1
    22bc:	82 2f       	mov	r24, r18
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	fc 01       	movw	r30, r24
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	ee 0f       	add	r30, r30
    22cc:	ff 1f       	adc	r31, r31
    22ce:	e8 0f       	add	r30, r24
    22d0:	f9 1f       	adc	r31, r25
    22d2:	e0 56       	subi	r30, 0x60	; 96
    22d4:	f6 4f       	sbci	r31, 0xF6	; 246
    22d6:	30 81       	ld	r19, Z
    22d8:	33 23       	and	r19, r19
    22da:	79 f3       	breq	.-34     	; 0x22ba <vTaskSwitchContext+0x6c>
    22dc:	ac 01       	movw	r20, r24
    22de:	44 0f       	add	r20, r20
    22e0:	55 1f       	adc	r21, r21
    22e2:	44 0f       	add	r20, r20
    22e4:	55 1f       	adc	r21, r21
    22e6:	44 0f       	add	r20, r20
    22e8:	55 1f       	adc	r21, r21
    22ea:	48 0f       	add	r20, r24
    22ec:	59 1f       	adc	r21, r25
    22ee:	da 01       	movw	r26, r20
    22f0:	a0 56       	subi	r26, 0x60	; 96
    22f2:	b6 4f       	sbci	r27, 0xF6	; 246
    22f4:	11 96       	adiw	r26, 0x01	; 1
    22f6:	ed 91       	ld	r30, X+
    22f8:	fc 91       	ld	r31, X
    22fa:	12 97       	sbiw	r26, 0x02	; 2
    22fc:	02 80       	ldd	r0, Z+2	; 0x02
    22fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2300:	e0 2d       	mov	r30, r0
    2302:	12 96       	adiw	r26, 0x02	; 2
    2304:	fc 93       	st	X, r31
    2306:	ee 93       	st	-X, r30
    2308:	11 97       	sbiw	r26, 0x01	; 1
    230a:	4d 55       	subi	r20, 0x5D	; 93
    230c:	56 4f       	sbci	r21, 0xF6	; 246
    230e:	e4 17       	cp	r30, r20
    2310:	f5 07       	cpc	r31, r21
    2312:	29 f4       	brne	.+10     	; 0x231e <vTaskSwitchContext+0xd0>
    2314:	42 81       	ldd	r20, Z+2	; 0x02
    2316:	53 81       	ldd	r21, Z+3	; 0x03
    2318:	fd 01       	movw	r30, r26
    231a:	52 83       	std	Z+2, r21	; 0x02
    231c:	41 83       	std	Z+1, r20	; 0x01
    231e:	fc 01       	movw	r30, r24
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	ee 0f       	add	r30, r30
    2326:	ff 1f       	adc	r31, r31
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31
    232c:	8e 0f       	add	r24, r30
    232e:	9f 1f       	adc	r25, r31
    2330:	fc 01       	movw	r30, r24
    2332:	e0 56       	subi	r30, 0x60	; 96
    2334:	f6 4f       	sbci	r31, 0xF6	; 246
    2336:	01 80       	ldd	r0, Z+1	; 0x01
    2338:	f2 81       	ldd	r31, Z+2	; 0x02
    233a:	e0 2d       	mov	r30, r0
    233c:	86 81       	ldd	r24, Z+6	; 0x06
    233e:	97 81       	ldd	r25, Z+7	; 0x07
    2340:	90 93 c5 09 	sts	0x09C5, r25	; 0x8009c5 <pxCurrentTCB+0x1>
    2344:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <pxCurrentTCB>
    2348:	20 93 6a 09 	sts	0x096A, r18	; 0x80096a <uxTopReadyPriority>
    234c:	08 95       	ret

0000234e <vTaskPlaceOnEventList>:
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	eb 01       	movw	r28, r22
    2354:	20 91 c4 09 	lds	r18, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    2358:	30 91 c5 09 	lds	r19, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    235c:	b9 01       	movw	r22, r18
    235e:	64 5f       	subi	r22, 0xF4	; 244
    2360:	7f 4f       	sbci	r23, 0xFF	; 255
    2362:	2c d8       	rcall	.-4008   	; 0x13bc <vListInsert>
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	ce 01       	movw	r24, r28
    2368:	7b dc       	rcall	.-1802   	; 0x1c60 <prvAddCurrentTaskToDelayedList>
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	08 95       	ret

00002370 <xTaskRemoveFromEventList>:
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	dc 01       	movw	r26, r24
    237a:	15 96       	adiw	r26, 0x05	; 5
    237c:	ed 91       	ld	r30, X+
    237e:	fc 91       	ld	r31, X
    2380:	16 97       	sbiw	r26, 0x06	; 6
    2382:	c6 81       	ldd	r28, Z+6	; 0x06
    2384:	d7 81       	ldd	r29, Z+7	; 0x07
    2386:	8e 01       	movw	r16, r28
    2388:	04 5f       	subi	r16, 0xF4	; 244
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	c8 01       	movw	r24, r16
    238e:	47 d8       	rcall	.-3954   	; 0x141e <uxListRemove>
    2390:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <uxSchedulerSuspended>
    2394:	81 11       	cpse	r24, r1
    2396:	1b c0       	rjmp	.+54     	; 0x23ce <xTaskRemoveFromEventList+0x5e>
    2398:	0a 50       	subi	r16, 0x0A	; 10
    239a:	11 09       	sbc	r17, r1
    239c:	c8 01       	movw	r24, r16
    239e:	3f d8       	rcall	.-3970   	; 0x141e <uxListRemove>
    23a0:	2e 89       	ldd	r18, Y+22	; 0x16
    23a2:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <uxTopReadyPriority>
    23a6:	82 17       	cp	r24, r18
    23a8:	10 f4       	brcc	.+4      	; 0x23ae <xTaskRemoveFromEventList+0x3e>
    23aa:	20 93 6a 09 	sts	0x096A, r18	; 0x80096a <uxTopReadyPriority>
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	c9 01       	movw	r24, r18
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	82 0f       	add	r24, r18
    23c0:	93 1f       	adc	r25, r19
    23c2:	b8 01       	movw	r22, r16
    23c4:	80 56       	subi	r24, 0x60	; 96
    23c6:	96 4f       	sbci	r25, 0xF6	; 246
    23c8:	0e 94 bd 09 	call	0x137a	; 0x137a <vListInsertEnd>
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <xTaskRemoveFromEventList+0x68>
    23ce:	b8 01       	movw	r22, r16
    23d0:	81 e8       	ldi	r24, 0x81	; 129
    23d2:	99 e0       	ldi	r25, 0x09	; 9
    23d4:	0e 94 bd 09 	call	0x137a	; 0x137a <vListInsertEnd>
    23d8:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    23dc:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    23e0:	9e 89       	ldd	r25, Y+22	; 0x16
    23e2:	86 89       	ldd	r24, Z+22	; 0x16
    23e4:	89 17       	cp	r24, r25
    23e6:	20 f4       	brcc	.+8      	; 0x23f0 <xTaskRemoveFromEventList+0x80>
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <xYieldPending>
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <xTaskRemoveFromEventList+0x82>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	08 95       	ret

000023fc <vTaskSetTimeOutState>:
    23fc:	20 91 66 09 	lds	r18, 0x0966	; 0x800966 <xNumOfOverflows>
    2400:	fc 01       	movw	r30, r24
    2402:	20 83       	st	Z, r18
    2404:	20 91 6b 09 	lds	r18, 0x096B	; 0x80096b <xTickCount>
    2408:	30 91 6c 09 	lds	r19, 0x096C	; 0x80096c <xTickCount+0x1>
    240c:	32 83       	std	Z+2, r19	; 0x02
    240e:	21 83       	std	Z+1, r18	; 0x01
    2410:	08 95       	ret

00002412 <xTaskCheckForTimeOut>:
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	0f 92       	push	r0
    2418:	40 91 6b 09 	lds	r20, 0x096B	; 0x80096b <xTickCount>
    241c:	50 91 6c 09 	lds	r21, 0x096C	; 0x80096c <xTickCount+0x1>
    2420:	db 01       	movw	r26, r22
    2422:	2d 91       	ld	r18, X+
    2424:	3c 91       	ld	r19, X
    2426:	2f 3f       	cpi	r18, 0xFF	; 255
    2428:	bf ef       	ldi	r27, 0xFF	; 255
    242a:	3b 07       	cpc	r19, r27
    242c:	11 f1       	breq	.+68     	; 0x2472 <xTaskCheckForTimeOut+0x60>
    242e:	e0 91 66 09 	lds	r30, 0x0966	; 0x800966 <xNumOfOverflows>
    2432:	dc 01       	movw	r26, r24
    2434:	fc 91       	ld	r31, X
    2436:	fe 17       	cp	r31, r30
    2438:	39 f0       	breq	.+14     	; 0x2448 <xTaskCheckForTimeOut+0x36>
    243a:	11 96       	adiw	r26, 0x01	; 1
    243c:	ed 91       	ld	r30, X+
    243e:	fc 91       	ld	r31, X
    2440:	12 97       	sbiw	r26, 0x02	; 2
    2442:	4e 17       	cp	r20, r30
    2444:	5f 07       	cpc	r21, r31
    2446:	b8 f4       	brcc	.+46     	; 0x2476 <xTaskCheckForTimeOut+0x64>
    2448:	dc 01       	movw	r26, r24
    244a:	11 96       	adiw	r26, 0x01	; 1
    244c:	ed 91       	ld	r30, X+
    244e:	fc 91       	ld	r31, X
    2450:	12 97       	sbiw	r26, 0x02	; 2
    2452:	da 01       	movw	r26, r20
    2454:	ae 1b       	sub	r26, r30
    2456:	bf 0b       	sbc	r27, r31
    2458:	a2 17       	cp	r26, r18
    245a:	b3 07       	cpc	r27, r19
    245c:	70 f4       	brcc	.+28     	; 0x247a <xTaskCheckForTimeOut+0x68>
    245e:	db 01       	movw	r26, r22
    2460:	e4 1b       	sub	r30, r20
    2462:	f5 0b       	sbc	r31, r21
    2464:	2e 0f       	add	r18, r30
    2466:	3f 1f       	adc	r19, r31
    2468:	2d 93       	st	X+, r18
    246a:	3c 93       	st	X, r19
    246c:	c7 df       	rcall	.-114    	; 0x23fc <vTaskSetTimeOutState>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	05 c0       	rjmp	.+10     	; 0x247c <xTaskCheckForTimeOut+0x6a>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	03 c0       	rjmp	.+6      	; 0x247c <xTaskCheckForTimeOut+0x6a>
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	01 c0       	rjmp	.+2      	; 0x247c <xTaskCheckForTimeOut+0x6a>
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	0f 90       	pop	r0
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	08 95       	ret

00002482 <vTaskMissedYield>:
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <xYieldPending>
    2488:	08 95       	ret

0000248a <vTaskPriorityInherit>:
    248a:	0f 93       	push	r16
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	fc 01       	movw	r30, r24
    2494:	89 2b       	or	r24, r25
    2496:	09 f4       	brne	.+2      	; 0x249a <vTaskPriorityInherit+0x10>
    2498:	55 c0       	rjmp	.+170    	; 0x2544 <vTaskPriorityInherit+0xba>
    249a:	26 89       	ldd	r18, Z+22	; 0x16
    249c:	a0 91 c4 09 	lds	r26, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    24a0:	b0 91 c5 09 	lds	r27, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    24a4:	56 96       	adiw	r26, 0x16	; 22
    24a6:	8c 91       	ld	r24, X
    24a8:	28 17       	cp	r18, r24
    24aa:	08 f0       	brcs	.+2      	; 0x24ae <vTaskPriorityInherit+0x24>
    24ac:	4b c0       	rjmp	.+150    	; 0x2544 <vTaskPriorityInherit+0xba>
    24ae:	84 85       	ldd	r24, Z+12	; 0x0c
    24b0:	95 85       	ldd	r25, Z+13	; 0x0d
    24b2:	99 23       	and	r25, r25
    24b4:	64 f0       	brlt	.+24     	; 0x24ce <vTaskPriorityInherit+0x44>
    24b6:	a0 91 c4 09 	lds	r26, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    24ba:	b0 91 c5 09 	lds	r27, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    24be:	56 96       	adiw	r26, 0x16	; 22
    24c0:	3c 91       	ld	r19, X
    24c2:	84 e0       	ldi	r24, 0x04	; 4
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	83 1b       	sub	r24, r19
    24c8:	91 09       	sbc	r25, r1
    24ca:	95 87       	std	Z+13, r25	; 0x0d
    24cc:	84 87       	std	Z+12, r24	; 0x0c
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	c9 01       	movw	r24, r18
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	28 0f       	add	r18, r24
    24e0:	39 1f       	adc	r19, r25
    24e2:	20 56       	subi	r18, 0x60	; 96
    24e4:	36 4f       	sbci	r19, 0xF6	; 246
    24e6:	82 85       	ldd	r24, Z+10	; 0x0a
    24e8:	93 85       	ldd	r25, Z+11	; 0x0b
    24ea:	82 17       	cp	r24, r18
    24ec:	93 07       	cpc	r25, r19
    24ee:	19 f5       	brne	.+70     	; 0x2536 <vTaskPriorityInherit+0xac>
    24f0:	8f 01       	movw	r16, r30
    24f2:	ef 01       	movw	r28, r30
    24f4:	22 96       	adiw	r28, 0x02	; 2
    24f6:	ce 01       	movw	r24, r28
    24f8:	0e 94 0f 0a 	call	0x141e	; 0x141e <uxListRemove>
    24fc:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    2500:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    2504:	26 89       	ldd	r18, Z+22	; 0x16
    2506:	f8 01       	movw	r30, r16
    2508:	26 8b       	std	Z+22, r18	; 0x16
    250a:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <uxTopReadyPriority>
    250e:	82 17       	cp	r24, r18
    2510:	10 f4       	brcc	.+4      	; 0x2516 <vTaskPriorityInherit+0x8c>
    2512:	20 93 6a 09 	sts	0x096A, r18	; 0x80096a <uxTopReadyPriority>
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	c9 01       	movw	r24, r18
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	82 0f       	add	r24, r18
    2528:	93 1f       	adc	r25, r19
    252a:	be 01       	movw	r22, r28
    252c:	80 56       	subi	r24, 0x60	; 96
    252e:	96 4f       	sbci	r25, 0xF6	; 246
    2530:	0e 94 bd 09 	call	0x137a	; 0x137a <vListInsertEnd>
    2534:	07 c0       	rjmp	.+14     	; 0x2544 <vTaskPriorityInherit+0xba>
    2536:	a0 91 c4 09 	lds	r26, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    253a:	b0 91 c5 09 	lds	r27, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    253e:	56 96       	adiw	r26, 0x16	; 22
    2540:	8c 91       	ld	r24, X
    2542:	86 8b       	std	Z+22, r24	; 0x16
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	08 95       	ret

0000254e <xTaskPriorityDisinherit>:
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	fc 01       	movw	r30, r24
    2558:	89 2b       	or	r24, r25
    255a:	79 f1       	breq	.+94     	; 0x25ba <xTaskPriorityDisinherit+0x6c>
    255c:	82 a1       	ldd	r24, Z+34	; 0x22
    255e:	81 50       	subi	r24, 0x01	; 1
    2560:	82 a3       	std	Z+34, r24	; 0x22
    2562:	26 89       	ldd	r18, Z+22	; 0x16
    2564:	91 a1       	ldd	r25, Z+33	; 0x21
    2566:	29 17       	cp	r18, r25
    2568:	51 f1       	breq	.+84     	; 0x25be <xTaskPriorityDisinherit+0x70>
    256a:	81 11       	cpse	r24, r1
    256c:	2a c0       	rjmp	.+84     	; 0x25c2 <xTaskPriorityDisinherit+0x74>
    256e:	ef 01       	movw	r28, r30
    2570:	8f 01       	movw	r16, r30
    2572:	0e 5f       	subi	r16, 0xFE	; 254
    2574:	1f 4f       	sbci	r17, 0xFF	; 255
    2576:	c8 01       	movw	r24, r16
    2578:	0e 94 0f 0a 	call	0x141e	; 0x141e <uxListRemove>
    257c:	29 a1       	ldd	r18, Y+33	; 0x21
    257e:	2e 8b       	std	Y+22, r18	; 0x16
    2580:	44 e0       	ldi	r20, 0x04	; 4
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	42 1b       	sub	r20, r18
    2586:	51 09       	sbc	r21, r1
    2588:	5d 87       	std	Y+13, r21	; 0x0d
    258a:	4c 87       	std	Y+12, r20	; 0x0c
    258c:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <uxTopReadyPriority>
    2590:	82 17       	cp	r24, r18
    2592:	10 f4       	brcc	.+4      	; 0x2598 <xTaskPriorityDisinherit+0x4a>
    2594:	20 93 6a 09 	sts	0x096A, r18	; 0x80096a <uxTopReadyPriority>
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	c9 01       	movw	r24, r18
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	b8 01       	movw	r22, r16
    25ae:	80 56       	subi	r24, 0x60	; 96
    25b0:	96 4f       	sbci	r25, 0xF6	; 246
    25b2:	0e 94 bd 09 	call	0x137a	; 0x137a <vListInsertEnd>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	05 c0       	rjmp	.+10     	; 0x25c4 <xTaskPriorityDisinherit+0x76>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	03 c0       	rjmp	.+6      	; 0x25c4 <xTaskPriorityDisinherit+0x76>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	01 c0       	rjmp	.+2      	; 0x25c4 <xTaskPriorityDisinherit+0x76>
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    25ce:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    25d2:	90 91 c5 09 	lds	r25, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    25d6:	89 2b       	or	r24, r25
    25d8:	39 f0       	breq	.+14     	; 0x25e8 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    25da:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    25de:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
    25e2:	82 a1       	ldd	r24, Z+34	; 0x22
    25e4:	8f 5f       	subi	r24, 0xFF	; 255
    25e6:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    25e8:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <pxCurrentTCB>
    25ec:	90 91 c5 09 	lds	r25, 0x09C5	; 0x8009c5 <pxCurrentTCB+0x1>
	}
    25f0:	08 95       	ret

000025f2 <__divmodhi4>:
    25f2:	97 fb       	bst	r25, 7
    25f4:	07 2e       	mov	r0, r23
    25f6:	16 f4       	brtc	.+4      	; 0x25fc <__divmodhi4+0xa>
    25f8:	00 94       	com	r0
    25fa:	06 d0       	rcall	.+12     	; 0x2608 <__divmodhi4_neg1>
    25fc:	77 fd       	sbrc	r23, 7
    25fe:	08 d0       	rcall	.+16     	; 0x2610 <__divmodhi4_neg2>
    2600:	0b d0       	rcall	.+22     	; 0x2618 <__udivmodhi4>
    2602:	07 fc       	sbrc	r0, 7
    2604:	05 d0       	rcall	.+10     	; 0x2610 <__divmodhi4_neg2>
    2606:	3e f4       	brtc	.+14     	; 0x2616 <__divmodhi4_exit>

00002608 <__divmodhi4_neg1>:
    2608:	90 95       	com	r25
    260a:	81 95       	neg	r24
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	08 95       	ret

00002610 <__divmodhi4_neg2>:
    2610:	70 95       	com	r23
    2612:	61 95       	neg	r22
    2614:	7f 4f       	sbci	r23, 0xFF	; 255

00002616 <__divmodhi4_exit>:
    2616:	08 95       	ret

00002618 <__udivmodhi4>:
    2618:	aa 1b       	sub	r26, r26
    261a:	bb 1b       	sub	r27, r27
    261c:	51 e1       	ldi	r21, 0x11	; 17
    261e:	07 c0       	rjmp	.+14     	; 0x262e <__udivmodhi4_ep>

00002620 <__udivmodhi4_loop>:
    2620:	aa 1f       	adc	r26, r26
    2622:	bb 1f       	adc	r27, r27
    2624:	a6 17       	cp	r26, r22
    2626:	b7 07       	cpc	r27, r23
    2628:	10 f0       	brcs	.+4      	; 0x262e <__udivmodhi4_ep>
    262a:	a6 1b       	sub	r26, r22
    262c:	b7 0b       	sbc	r27, r23

0000262e <__udivmodhi4_ep>:
    262e:	88 1f       	adc	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	5a 95       	dec	r21
    2634:	a9 f7       	brne	.-22     	; 0x2620 <__udivmodhi4_loop>
    2636:	80 95       	com	r24
    2638:	90 95       	com	r25
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	08 95       	ret

00002640 <memcpy>:
    2640:	fb 01       	movw	r30, r22
    2642:	dc 01       	movw	r26, r24
    2644:	02 c0       	rjmp	.+4      	; 0x264a <memcpy+0xa>
    2646:	01 90       	ld	r0, Z+
    2648:	0d 92       	st	X+, r0
    264a:	41 50       	subi	r20, 0x01	; 1
    264c:	50 40       	sbci	r21, 0x00	; 0
    264e:	d8 f7       	brcc	.-10     	; 0x2646 <memcpy+0x6>
    2650:	08 95       	ret

00002652 <_exit>:
    2652:	f8 94       	cli

00002654 <__stop_program>:
    2654:	ff cf       	rjmp	.-2      	; 0x2654 <__stop_program>


RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000278c  00002820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000278c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008b4  00800130  00800130  00002850  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000090a5  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000247f  00000000  00000000  0000bf05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e0d  00000000  00000000  0000e384  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001058  00000000  00000000  00012194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000255f  00000000  00000000  000131ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006d36  00000000  00000000  0001574b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000658  00000000  00000000  0001c481  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__vector_12>
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	98 c2       	rjmp	.+1328   	; 0x57a <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c2       	rjmp	.+1376   	; 0x5da <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e8       	ldi	r30, 0x8C	; 140
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 33       	cpi	r26, 0x30	; 48
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	29 e0       	ldi	r18, 0x09	; 9
      b4:	a0 e3       	ldi	r26, 0x30	; 48
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3e       	cpi	r26, 0xE4	; 228
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	95 d7       	rcall	.+3882   	; 0xfee <main>
      c4:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <_Z5CRC16Phi>:
	int ret;
	Byte[0] = (unsigned char)((bit16 >> 0) & 0xff);
	Byte[1] = (unsigned char)((bit16 >> 8) & 0xff);
	ret = ((int)Byte[0] << 8) | ((int)Byte[1] << 0);
	return ret;
}
      ca:	fc 01       	movw	r30, r24
      cc:	68 0f       	add	r22, r24
      ce:	79 1f       	adc	r23, r25
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	9f ef       	ldi	r25, 0xFF	; 255
      d4:	b8 e0       	ldi	r27, 0x08	; 8
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	12 c0       	rjmp	.+36     	; 0xfe <_Z5CRC16Phi+0x34>
      da:	21 91       	ld	r18, Z+
      dc:	82 27       	eor	r24, r18
      de:	2b 2f       	mov	r18, r27
      e0:	3a 2f       	mov	r19, r26
      e2:	ac 01       	movw	r20, r24
      e4:	41 70       	andi	r20, 0x01	; 1
      e6:	55 27       	eor	r21, r21
      e8:	96 95       	lsr	r25
      ea:	87 95       	ror	r24
      ec:	45 2b       	or	r20, r21
      ee:	21 f0       	breq	.+8      	; 0xf8 <_Z5CRC16Phi+0x2e>
      f0:	41 e0       	ldi	r20, 0x01	; 1
      f2:	84 27       	eor	r24, r20
      f4:	40 ea       	ldi	r20, 0xA0	; 160
      f6:	94 27       	eor	r25, r20
      f8:	21 50       	subi	r18, 0x01	; 1
      fa:	31 09       	sbc	r19, r1
      fc:	91 f7       	brne	.-28     	; 0xe2 <_Z5CRC16Phi+0x18>
      fe:	e6 17       	cp	r30, r22
     100:	f7 07       	cpc	r31, r23
     102:	59 f7       	brne	.-42     	; 0xda <_Z5CRC16Phi+0x10>
     104:	08 95       	ret

00000106 <_Z13GetFunc01DataPcP17GetFunctionCode01S_>:
void GetFunc01Data(char* buf,GetFunctionCode01* function01,char* func1mem)
{
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	fc 01       	movw	r30, r24
     10c:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode01);
	function01->Address = *(buf + 0);
     10e:	80 81       	ld	r24, Z
     110:	88 83       	st	Y, r24
	function01->FunctionCode = *(buf + 1);
     112:	81 81       	ldd	r24, Z+1	; 0x01
     114:	89 83       	std	Y+1, r24	; 0x01
	function01->ByteCount = 0x02;
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	8a 83       	std	Y+2, r24	; 0x02
	function01->OutPutStatus1 = func1mem[*(buf + 3)];
     11a:	83 81       	ldd	r24, Z+3	; 0x03
     11c:	da 01       	movw	r26, r20
     11e:	a8 0f       	add	r26, r24
     120:	b1 1d       	adc	r27, r1
     122:	8c 91       	ld	r24, X
     124:	8b 83       	std	Y+3, r24	; 0x03
	function01->OutPutStatus2 = func1mem[(*(buf + 3)) + 1];
     126:	83 81       	ldd	r24, Z+3	; 0x03
     128:	fa 01       	movw	r30, r20
     12a:	e8 0f       	add	r30, r24
     12c:	f1 1d       	adc	r31, r1
     12e:	81 81       	ldd	r24, Z+1	; 0x01
     130:	8c 83       	std	Y+4, r24	; 0x04
	crc16 = CRC16((unsigned char*)function01, BUFSIZE - 2);
     132:	65 e0       	ldi	r22, 0x05	; 5
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	ce 01       	movw	r24, r28
     138:	c8 df       	rcall	.-112    	; 0xca <_Z5CRC16Phi>
	function01->CRC = crc16;
     13a:	9e 83       	std	Y+6, r25	; 0x06
     13c:	8d 83       	std	Y+5, r24	; 0x05
}
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <_Z13GetFunc04DataPcP17GetFunctionCode04Pi>:
void GetFunc04Data(char* buf,GetFunctionCode04* function04,int* func4mem)
{
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	dc 01       	movw	r26, r24
     14a:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode04);
	char address = 0;
	function04->Address = *(buf + 0);
     14c:	8c 91       	ld	r24, X
     14e:	88 83       	st	Y, r24
	function04->FunctionCode = *(buf + 1);
     150:	11 96       	adiw	r26, 0x01	; 1
     152:	8c 91       	ld	r24, X
     154:	11 97       	sbiw	r26, 0x01	; 1
     156:	89 83       	std	Y+1, r24	; 0x01
	address = *(buf + 3);
     158:	13 96       	adiw	r26, 0x03	; 3
     15a:	9c 91       	ld	r25, X
	function04->ByteCount = 0x02;
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	8a 83       	std	Y+2, r24	; 0x02
	function04->InputRegHi = (func4mem[address] >> 8);
     160:	e9 2f       	mov	r30, r25
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	e4 0f       	add	r30, r20
     16a:	f5 1f       	adc	r31, r21
     16c:	81 81       	ldd	r24, Z+1	; 0x01
     16e:	8b 83       	std	Y+3, r24	; 0x03
	function04->InputRegLo = func4mem[address];
     170:	80 81       	ld	r24, Z
     172:	8c 83       	std	Y+4, r24	; 0x04
	crc16 = CRC16((unsigned char*)function04, BUFSIZE - 2);
     174:	65 e0       	ldi	r22, 0x05	; 5
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	ce 01       	movw	r24, r28
     17a:	a7 df       	rcall	.-178    	; 0xca <_Z5CRC16Phi>
	function04->CRC = crc16;
     17c:	9e 83       	std	Y+6, r25	; 0x06
     17e:	8d 83       	std	Y+5, r24	; 0x05
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <_Z13GetFunc05DataPcP17GetFunctionCode05>:
void GetFunc05Data(char* buf,GetFunctionCode05* function05)
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	fc 01       	movw	r30, r24
     18c:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode05);
	function05->Address = *(buf + 0);
     18e:	80 81       	ld	r24, Z
     190:	88 83       	st	Y, r24
	function05->FunctionCode = *(buf + 1);
     192:	81 81       	ldd	r24, Z+1	; 0x01
     194:	89 83       	std	Y+1, r24	; 0x01
	function05->OutputAddressHi = *(buf + 2);
     196:	82 81       	ldd	r24, Z+2	; 0x02
     198:	8a 83       	std	Y+2, r24	; 0x02
	function05->OutputAddressLo = *(buf + 3);
     19a:	83 81       	ldd	r24, Z+3	; 0x03
     19c:	8b 83       	std	Y+3, r24	; 0x03
	function05->OutputValueHi = *(buf + 4);
     19e:	84 81       	ldd	r24, Z+4	; 0x04
     1a0:	8c 83       	std	Y+4, r24	; 0x04
	function05->OutputValueLo = *(buf + 5);
     1a2:	85 81       	ldd	r24, Z+5	; 0x05
     1a4:	8d 83       	std	Y+5, r24	; 0x05
	crc16 = CRC16((unsigned char*)function05, BUFSIZE - 2);
     1a6:	66 e0       	ldi	r22, 0x06	; 6
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	ce 01       	movw	r24, r28
     1ac:	8e df       	rcall	.-228    	; 0xca <_Z5CRC16Phi>
	function05->CRC = crc16;//to_little(crc16);
     1ae:	9f 83       	std	Y+7, r25	; 0x07
     1b0:	8e 83       	std	Y+6, r24	; 0x06
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <_Z13GetFucc10DataPcP17GetFunctionCode10Pi>:
void GetFucc10Data(char* buf,GetFunctionCode10* function10,int* func4mem)
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	fc 01       	movw	r30, r24
     1be:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(GetFunctionCode10);
	function10->address = *(buf + 0);
     1c0:	80 81       	ld	r24, Z
     1c2:	88 83       	st	Y, r24
	function10->functionCode = *(buf + 1);
     1c4:	81 81       	ldd	r24, Z+1	; 0x01
     1c6:	89 83       	std	Y+1, r24	; 0x01
	function10->startingAddressHi = *(buf + 2);
     1c8:	82 81       	ldd	r24, Z+2	; 0x02
     1ca:	8a 83       	std	Y+2, r24	; 0x02
	function10->startingAddressLo = *(buf + 3);
     1cc:	83 81       	ldd	r24, Z+3	; 0x03
     1ce:	8b 83       	std	Y+3, r24	; 0x03
	function10->quantityOfRegistersHi = *(buf + 4);
     1d0:	94 81       	ldd	r25, Z+4	; 0x04
     1d2:	9c 83       	std	Y+4, r25	; 0x04
	function10->quantityOfRegistersLo = *(buf + 5);
     1d4:	95 81       	ldd	r25, Z+5	; 0x05
     1d6:	9d 83       	std	Y+5, r25	; 0x05
	function10->byteCount = *(buf + 6);
     1d8:	96 81       	ldd	r25, Z+6	; 0x06
     1da:	9e 83       	std	Y+6, r25	; 0x06
	function10->registerValueHi = *(buf + 7);
     1dc:	27 81       	ldd	r18, Z+7	; 0x07
     1de:	2f 83       	std	Y+7, r18	; 0x07
	function10->registerValueLo = *(buf + 8);
     1e0:	90 85       	ldd	r25, Z+8	; 0x08
     1e2:	98 87       	std	Y+8, r25	; 0x08
	func4mem[function10->startingAddressLo] = ((function10->registerValueHi << 8) | (function10->registerValueLo));
     1e4:	e8 2f       	mov	r30, r24
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	ee 0f       	add	r30, r30
     1ea:	ff 1f       	adc	r31, r31
     1ec:	e4 0f       	add	r30, r20
     1ee:	f5 1f       	adc	r31, r21
     1f0:	89 2f       	mov	r24, r25
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	92 2b       	or	r25, r18
     1f6:	91 83       	std	Z+1, r25	; 0x01
     1f8:	80 83       	st	Z, r24
	crc16 = CRC16((unsigned char*)function10, BUFSIZE - 2);
     1fa:	69 e0       	ldi	r22, 0x09	; 9
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	ce 01       	movw	r24, r28
     200:	64 df       	rcall	.-312    	; 0xca <_Z5CRC16Phi>
	function10->CRC = crc16;
     202:	9a 87       	std	Y+10, r25	; 0x0a
     204:	89 87       	std	Y+9, r24	; 0x09
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <_Z18ResponseFucc10DataPcP22ResponseFunctionCode10>:
void ResponseFucc10Data(char* buf,ResponseFunctionCode10 *rfunction10)
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	fc 01       	movw	r30, r24
     212:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(ResponseFunctionCode10);
	rfunction10->address = *(buf + 0);
     214:	80 81       	ld	r24, Z
     216:	88 83       	st	Y, r24
	rfunction10->functionCode = *(buf + 1);
     218:	81 81       	ldd	r24, Z+1	; 0x01
     21a:	89 83       	std	Y+1, r24	; 0x01
	rfunction10->startingAddressHi = *(buf + 2);
     21c:	82 81       	ldd	r24, Z+2	; 0x02
     21e:	8a 83       	std	Y+2, r24	; 0x02
	rfunction10->startingAddressLo = *(buf + 3);
     220:	83 81       	ldd	r24, Z+3	; 0x03
     222:	8b 83       	std	Y+3, r24	; 0x03
	rfunction10->quantityOfRegistersHi = *(buf + 4);
     224:	84 81       	ldd	r24, Z+4	; 0x04
     226:	8c 83       	std	Y+4, r24	; 0x04
	rfunction10->quantityOfRegistersLo = *(buf + 5);
     228:	85 81       	ldd	r24, Z+5	; 0x05
     22a:	8d 83       	std	Y+5, r24	; 0x05
	crc16 = CRC16((unsigned char*)rfunction10, BUFSIZE - 2);
     22c:	66 e0       	ldi	r22, 0x06	; 6
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	ce 01       	movw	r24, r28
     232:	4b df       	rcall	.-362    	; 0xca <_Z5CRC16Phi>
	rfunction10->CRC = crc16;
     234:	9f 83       	std	Y+7, r25	; 0x07
     236:	8e 83       	std	Y+6, r24	; 0x06
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <_Z16GetExceptionCodePcP16RspExceptionCodecc>:
void GetExceptionCode(char* buf,RspExceptionCode* Exception,char adr,char Exception_code)
{
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	eb 01       	movw	r28, r22
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(RspExceptionCode);
	Exception->Address = adr;
     244:	48 83       	st	Y, r20
	Exception->FunctionCode = 0x81;
     246:	81 e8       	ldi	r24, 0x81	; 129
     248:	89 83       	std	Y+1, r24	; 0x01
	Exception->ExceptionCode = Exception_code;
     24a:	2a 83       	std	Y+2, r18	; 0x02
	crc16 = CRC16((unsigned char*)Exception, BUFSIZE - 2);
     24c:	63 e0       	ldi	r22, 0x03	; 3
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	ce 01       	movw	r24, r28
     252:	3b df       	rcall	.-394    	; 0xca <_Z5CRC16Phi>
	Exception->CRC = crc16;
     254:	9c 83       	std	Y+4, r25	; 0x04
     256:	8b 83       	std	Y+3, r24	; 0x03
}
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <_Z16getFunction3DataPcP7GetData>:


//////////////////////////////
void getFunction3Data(char* buf,GetData* struct_File)
{
     25e:	dc 01       	movw	r26, r24
     260:	fb 01       	movw	r30, r22
	struct_File->Address = buf[0];
     262:	8c 91       	ld	r24, X
     264:	80 83       	st	Z, r24
	struct_File->FunctionCode = buf[1];
     266:	11 96       	adiw	r26, 0x01	; 1
     268:	8c 91       	ld	r24, X
     26a:	11 97       	sbiw	r26, 0x01	; 1
     26c:	81 83       	std	Z+1, r24	; 0x01
	struct_File->ByteLength = buf[2];
     26e:	12 96       	adiw	r26, 0x02	; 2
     270:	8c 91       	ld	r24, X
     272:	12 97       	sbiw	r26, 0x02	; 2
     274:	82 83       	std	Z+2, r24	; 0x02
	struct_File->CurrentPv = 0xff00 & (buf[3] << 8);
     276:	13 96       	adiw	r26, 0x03	; 3
     278:	2c 91       	ld	r18, X
     27a:	13 97       	sbiw	r26, 0x03	; 3
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	32 2f       	mov	r19, r18
     280:	22 27       	eor	r18, r18
     282:	34 83       	std	Z+4, r19	; 0x04
     284:	23 83       	std	Z+3, r18	; 0x03
	struct_File->CurrentPv |= buf[4];
     286:	14 96       	adiw	r26, 0x04	; 4
     288:	8c 91       	ld	r24, X
     28a:	28 2b       	or	r18, r24
     28c:	34 83       	std	Z+4, r19	; 0x04
     28e:	23 83       	std	Z+3, r18	; 0x03
     290:	08 95       	ret

00000292 <_Z15Function03WritecicP16InputOutput8Byte>:
}
void Function03Write(char Address,int Dregister,char num,InputOutput8Byte* struct_File)
{
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	e9 01       	movw	r28, r18
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(InputOutput8Byte);
	struct_File->Address = Address;
     298:	88 83       	st	Y, r24
	struct_File->FunctionCode = 3;
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char Byte[2];
	int ret;
	Byte[0] = (unsigned char)((bit16 >> 0) & 0xff);
	Byte[1] = (unsigned char)((bit16 >> 8) & 0xff);
	ret = ((int)Byte[0] << 8) | ((int)Byte[1] << 0);
     29e:	76 27       	eor	r23, r22
     2a0:	67 27       	eor	r22, r23
     2a2:	76 27       	eor	r23, r22
{
	unsigned short crc16;
	unsigned int BUFSIZE = sizeof(InputOutput8Byte);
	struct_File->Address = Address;
	struct_File->FunctionCode = 3;
	struct_File->writeData = to_big(Dregister);
     2a4:	7b 83       	std	Y+3, r23	; 0x03
     2a6:	6a 83       	std	Y+2, r22	; 0x02
	struct_File->NumberOfData = to_big(num);
     2a8:	1c 82       	std	Y+4, r1	; 0x04
     2aa:	4d 83       	std	Y+5, r20	; 0x05
	crc16 = CRC16((unsigned char*)struct_File,BUFSIZE-2);
     2ac:	66 e0       	ldi	r22, 0x06	; 6
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	c9 01       	movw	r24, r18
     2b2:	0b df       	rcall	.-490    	; 0xca <_Z5CRC16Phi>
	struct_File->CRC = crc16;
     2b4:	9f 83       	std	Y+7, r25	; 0x07
     2b6:	8e 83       	std	Y+6, r24	; 0x06
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <_Z15Function06WriteciiP16InputOutput8Byte>:
void Function06Write(char Address,int Dregister,int TempVal,InputOutput8Byte* struct_File)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	e9 01       	movw	r28, r18
		unsigned short crc16;
		unsigned int BUFSIZE = sizeof(InputOutput8Byte);
		struct_File->Address = Address;
     2c4:	88 83       	st	Y, r24
		struct_File->FunctionCode = 0x06;
     2c6:	86 e0       	ldi	r24, 0x06	; 6
     2c8:	89 83       	std	Y+1, r24	; 0x01
{
	unsigned char Byte[2];
	int ret;
	Byte[0] = (unsigned char)((bit16 >> 0) & 0xff);
	Byte[1] = (unsigned char)((bit16 >> 8) & 0xff);
	ret = ((int)Byte[0] << 8) | ((int)Byte[1] << 0);
     2ca:	76 27       	eor	r23, r22
     2cc:	67 27       	eor	r22, r23
     2ce:	76 27       	eor	r23, r22
{
		unsigned short crc16;
		unsigned int BUFSIZE = sizeof(InputOutput8Byte);
		struct_File->Address = Address;
		struct_File->FunctionCode = 0x06;
		struct_File->writeData = to_big(Dregister);
     2d0:	7b 83       	std	Y+3, r23	; 0x03
     2d2:	6a 83       	std	Y+2, r22	; 0x02
{
	unsigned char Byte[2];
	int ret;
	Byte[0] = (unsigned char)((bit16 >> 0) & 0xff);
	Byte[1] = (unsigned char)((bit16 >> 8) & 0xff);
	ret = ((int)Byte[0] << 8) | ((int)Byte[1] << 0);
     2d4:	54 27       	eor	r21, r20
     2d6:	45 27       	eor	r20, r21
     2d8:	54 27       	eor	r21, r20
		unsigned short crc16;
		unsigned int BUFSIZE = sizeof(InputOutput8Byte);
		struct_File->Address = Address;
		struct_File->FunctionCode = 0x06;
		struct_File->writeData = to_big(Dregister);
		struct_File->NumberOfData = to_big(TempVal);
     2da:	5d 83       	std	Y+5, r21	; 0x05
     2dc:	4c 83       	std	Y+4, r20	; 0x04
		crc16 = CRC16((unsigned char*)struct_File,BUFSIZE-2);
     2de:	66 e0       	ldi	r22, 0x06	; 6
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	c9 01       	movw	r24, r18
     2e4:	f2 de       	rcall	.-540    	; 0xca <_Z5CRC16Phi>
		struct_File->CRC = crc16;
     2e6:	9f 83       	std	Y+7, r25	; 0x07
     2e8:	8e 83       	std	Y+6, r24	; 0x06
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>:
	Temp = Integer % 10;	
	Temp = HexaString[Temp];
	dev->Write(this->type,Temp);

	
}
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	ec 01       	movw	r28, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	14 2f       	mov	r17, r20
     2fc:	fe 01       	movw	r30, r28
     2fe:	ea 57       	subi	r30, 0x7A	; 122
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	71 83       	std	Z+1, r23	; 0x01
     304:	60 83       	st	Z, r22
     306:	64 2f       	mov	r22, r20
     308:	22 d1       	rcall	.+580    	; 0x54e <_ZN11Dev_Manager12Driver_CheckE8Dev_type>
     30a:	88 23       	and	r24, r24
     30c:	71 f0       	breq	.+28     	; 0x32a <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type+0x3a>
     30e:	fe 01       	movw	r30, r28
     310:	eb 57       	subi	r30, 0x7B	; 123
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	10 83       	st	Z, r17
     316:	31 97       	sbiw	r30, 0x01	; 1
     318:	10 82       	st	Z, r1
     31a:	34 97       	sbiw	r30, 0x04	; 4
     31c:	11 82       	std	Z+1, r1	; 0x01
     31e:	10 82       	st	Z, r1
     320:	ce 57       	subi	r28, 0x7E	; 126
     322:	df 4f       	sbci	r29, 0xFF	; 255
     324:	19 82       	std	Y+1, r1	; 0x01
     326:	18 82       	st	Y, r1
     328:	04 c0       	rjmp	.+8      	; 0x332 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type+0x42>
     32a:	ca 57       	subi	r28, 0x7A	; 122
     32c:	df 4f       	sbci	r29, 0xFF	; 255
     32e:	19 82       	std	Y+1, r1	; 0x01
     330:	18 82       	st	Y, r1
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	08 95       	ret

0000033a <_ZN12SerialBuffernwEj>:
     33a:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <pvPortMalloc>
     33e:	08 95       	ret

00000340 <_ZN12SerialBuffer11SerialstoreEc>:
     340:	fc 01       	movw	r30, r24
     342:	e0 58       	subi	r30, 0x80	; 128
     344:	ff 4f       	sbci	r31, 0xFF	; 255
     346:	20 81       	ld	r18, Z
     348:	2f 5f       	subi	r18, 0xFF	; 255
     34a:	2f 77       	andi	r18, 0x7F	; 127
     34c:	19 f4       	brne	.+6      	; 0x354 <_ZN12SerialBuffer11SerialstoreEc+0x14>
     34e:	11 82       	std	Z+1, r1	; 0x01
     350:	10 82       	st	Z, r1
     352:	21 e0       	ldi	r18, 0x01	; 1
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	fc 01       	movw	r30, r24
     358:	ee 57       	subi	r30, 0x7E	; 126
     35a:	ff 4f       	sbci	r31, 0xFF	; 255
     35c:	40 81       	ld	r20, Z
     35e:	51 81       	ldd	r21, Z+1	; 0x01
     360:	24 17       	cp	r18, r20
     362:	35 07       	cpc	r19, r21
     364:	89 f0       	breq	.+34     	; 0x388 <_ZN12SerialBuffer11SerialstoreEc+0x48>
     366:	dc 01       	movw	r26, r24
     368:	a0 58       	subi	r26, 0x80	; 128
     36a:	bf 4f       	sbci	r27, 0xFF	; 255
     36c:	ed 91       	ld	r30, X+
     36e:	fc 91       	ld	r31, X
     370:	11 97       	sbiw	r26, 0x01	; 1
     372:	e8 0f       	add	r30, r24
     374:	f9 1f       	adc	r31, r25
     376:	61 83       	std	Z+1, r22	; 0x01
     378:	2d 93       	st	X+, r18
     37a:	3c 93       	st	X, r19
     37c:	fc 01       	movw	r30, r24
     37e:	ec 57       	subi	r30, 0x7C	; 124
     380:	ff 4f       	sbci	r31, 0xFF	; 255
     382:	80 81       	ld	r24, Z
     384:	8f 5f       	subi	r24, 0xFF	; 255
     386:	80 83       	st	Z, r24
     388:	08 95       	ret

0000038a <_ZN12SerialBuffer11SerialWriteEPKci>:
     38a:	af 92       	push	r10
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	8c 01       	movw	r16, r24
     39e:	6b 01       	movw	r12, r22
     3a0:	7a 01       	movw	r14, r20
     3a2:	dc 01       	movw	r26, r24
     3a4:	ab 57       	subi	r26, 0x7B	; 123
     3a6:	bf 4f       	sbci	r27, 0xFF	; 255
     3a8:	fc 01       	movw	r30, r24
     3aa:	ea 57       	subi	r30, 0x7A	; 122
     3ac:	ff 4f       	sbci	r31, 0xFF	; 255
     3ae:	6c 91       	ld	r22, X
     3b0:	80 81       	ld	r24, Z
     3b2:	91 81       	ldd	r25, Z+1	; 0x01
     3b4:	d9 d0       	rcall	.+434    	; 0x568 <_ZN11Dev_Manager16getInterfaceAddrE8Dev_type>
     3b6:	89 2b       	or	r24, r25
     3b8:	d1 f0       	breq	.+52     	; 0x3ee <_ZN12SerialBuffer11SerialWriteEPKci+0x64>
     3ba:	1e 14       	cp	r1, r14
     3bc:	1f 04       	cpc	r1, r15
     3be:	bc f4       	brge	.+46     	; 0x3ee <_ZN12SerialBuffer11SerialWriteEPKci+0x64>
     3c0:	c0 e0       	ldi	r28, 0x00	; 0
     3c2:	58 01       	movw	r10, r16
     3c4:	85 e8       	ldi	r24, 0x85	; 133
     3c6:	a8 0e       	add	r10, r24
     3c8:	b1 1c       	adc	r11, r1
     3ca:	0a 57       	subi	r16, 0x7A	; 122
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
     3ce:	f6 01       	movw	r30, r12
     3d0:	ec 0f       	add	r30, r28
     3d2:	f1 1d       	adc	r31, r1
     3d4:	40 81       	ld	r20, Z
     3d6:	f5 01       	movw	r30, r10
     3d8:	60 81       	ld	r22, Z
     3da:	f8 01       	movw	r30, r16
     3dc:	80 81       	ld	r24, Z
     3de:	91 81       	ldd	r25, Z+1	; 0x01
     3e0:	83 d0       	rcall	.+262    	; 0x4e8 <_ZN11Dev_Manager5WriteE8Dev_typec>
     3e2:	cf 5f       	subi	r28, 0xFF	; 255
     3e4:	2c 2f       	mov	r18, r28
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	2e 15       	cp	r18, r14
     3ea:	3f 05       	cpc	r19, r15
     3ec:	84 f3       	brlt	.-32     	; 0x3ce <_ZN12SerialBuffer11SerialWriteEPKci+0x44>
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	bf 90       	pop	r11
     3fe:	af 90       	pop	r10
     400:	08 95       	ret

00000402 <_ZN12SerialBuffer10SerialReadEv>:
char SerialBuffer::SerialRead(void) //데이터 읽기
{
	if (ib.head == ib.tail)
     402:	fc 01       	movw	r30, r24
     404:	ee 57       	subi	r30, 0x7E	; 126
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	20 81       	ld	r18, Z
     40a:	31 81       	ldd	r19, Z+1	; 0x01
     40c:	32 97       	sbiw	r30, 0x02	; 2
     40e:	40 81       	ld	r20, Z
     410:	51 81       	ldd	r21, Z+1	; 0x01
     412:	42 17       	cp	r20, r18
     414:	53 07       	cpc	r21, r19
     416:	e9 f0       	breq	.+58     	; 0x452 <_ZN12SerialBuffer10SerialReadEv+0x50>
	{
		return -1;
	}
	else
	{
		unsigned char data = ib.internalBuffer[ib.tail + 1];
     418:	2f 5f       	subi	r18, 0xFF	; 255
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
     41c:	fc 01       	movw	r30, r24
     41e:	e2 0f       	add	r30, r18
     420:	f3 1f       	adc	r31, r19
     422:	40 81       	ld	r20, Z
		ib.tail = (ib.tail + 1) % RX_BUFFER_SIZE;
     424:	2f 77       	andi	r18, 0x7F	; 127
     426:	33 27       	eor	r19, r19
     428:	fc 01       	movw	r30, r24
     42a:	ee 57       	subi	r30, 0x7E	; 126
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	31 83       	std	Z+1, r19	; 0x01
     430:	20 83       	st	Z, r18
		if (ib.tail == num)
     432:	32 96       	adiw	r30, 0x02	; 2
     434:	60 81       	ld	r22, Z
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	26 17       	cp	r18, r22
     43a:	37 07       	cpc	r19, r23
     43c:	61 f4       	brne	.+24     	; 0x456 <_ZN12SerialBuffer10SerialReadEv+0x54>
		{
			ib.tail = 0;
     43e:	32 97       	sbiw	r30, 0x02	; 2
     440:	11 82       	std	Z+1, r1	; 0x01
     442:	10 82       	st	Z, r1
			ib.head = 0;
     444:	32 97       	sbiw	r30, 0x02	; 2
     446:	11 82       	std	Z+1, r1	; 0x01
     448:	10 82       	st	Z, r1
			num = 0;
     44a:	34 96       	adiw	r30, 0x04	; 4
     44c:	10 82       	st	Z, r1
		}
		return data;
     44e:	84 2f       	mov	r24, r20
     450:	08 95       	ret
}
char SerialBuffer::SerialRead(void) //데이터 읽기
{
	if (ib.head == ib.tail)
	{
		return -1;
     452:	8f ef       	ldi	r24, 0xFF	; 255
     454:	08 95       	ret
		{
			ib.tail = 0;
			ib.head = 0;
			num = 0;
		}
		return data;
     456:	84 2f       	mov	r24, r20
	}
}
     458:	08 95       	ret

0000045a <_ZN12SerialBuffer15SerialAvailableEv>:
unsigned char SerialBuffer::SerialAvailable(void) // 가용 자원수 확인
{
	return (unsigned char)(RX_BUFFER_SIZE + (ib.head - ib.tail)) % RX_BUFFER_SIZE;
     45a:	dc 01       	movw	r26, r24
     45c:	a0 58       	subi	r26, 0x80	; 128
     45e:	bf 4f       	sbci	r27, 0xFF	; 255
     460:	fc 01       	movw	r30, r24
     462:	ee 57       	subi	r30, 0x7E	; 126
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	8c 91       	ld	r24, X
     468:	90 81       	ld	r25, Z
     46a:	89 1b       	sub	r24, r25
}
     46c:	8f 77       	andi	r24, 0x7F	; 127
     46e:	08 95       	ret

00000470 <_ZN12SerialBuffer11SerialFlushEv>:

void SerialBuffer::SerialFlush(void)// 버퍼를 비운다.
{
	ib.tail = 0;
     470:	fc 01       	movw	r30, r24
     472:	ee 57       	subi	r30, 0x7E	; 126
     474:	ff 4f       	sbci	r31, 0xFF	; 255
     476:	11 82       	std	Z+1, r1	; 0x01
     478:	10 82       	st	Z, r1
	ib.head = 0;
     47a:	32 97       	sbiw	r30, 0x02	; 2
     47c:	11 82       	std	Z+1, r1	; 0x01
     47e:	10 82       	st	Z, r1
	num = 0;
     480:	34 96       	adiw	r30, 0x04	; 4
     482:	10 82       	st	Z, r1
     484:	08 95       	ret

00000486 <_ZN11Dev_ManagerC1Ev>:
}
void Dev_Manager::Close_Handle(Dev_type Device)
{
	if(interface[Device])
	{
		isr_handle[Device] = nullptr;
     486:	fc 01       	movw	r30, r24
     488:	10 82       	st	Z, r1
     48a:	11 82       	std	Z+1, r1	; 0x01
     48c:	12 82       	std	Z+2, r1	; 0x02
     48e:	13 82       	std	Z+3, r1	; 0x03
     490:	14 82       	std	Z+4, r1	; 0x04
     492:	15 82       	std	Z+5, r1	; 0x05
     494:	16 82       	std	Z+6, r1	; 0x06
     496:	17 82       	std	Z+7, r1	; 0x07
     498:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
     49c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
     4a0:	08 95       	ret

000004a2 <_ZN11Dev_Manager11getInstanceEv>:
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     4aa:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     4ae:	89 2b       	or	r24, r25
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <_ZN11Dev_Manager11getInstanceEv+0x22>
     4b2:	88 e0       	ldi	r24, 0x08	; 8
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	b6 d7       	rcall	.+3948   	; 0x1424 <pvPortMalloc>
     4b8:	ec 01       	movw	r28, r24
     4ba:	e5 df       	rcall	.-54     	; 0x486 <_ZN11Dev_ManagerC1Ev>
     4bc:	d0 93 31 01 	sts	0x0131, r29	; 0x800131 <__data_end+0x1>
     4c0:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <__data_end>
     4c4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     4c8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>:
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	44 0f       	add	r20, r20
     4d6:	55 1f       	adc	r21, r21
     4d8:	84 0f       	add	r24, r20
     4da:	95 1f       	adc	r25, r21
     4dc:	fc 01       	movw	r30, r24
     4de:	71 83       	std	Z+1, r23	; 0x01
     4e0:	60 83       	st	Z, r22
     4e2:	08 95       	ret

000004e4 <_ZN11Dev_ManagernwEj>:
     4e4:	9f c7       	rjmp	.+3902   	; 0x1424 <pvPortMalloc>
     4e6:	08 95       	ret

000004e8 <_ZN11Dev_Manager5WriteE8Dev_typec>:
     4e8:	26 2f       	mov	r18, r22
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	22 0f       	add	r18, r18
     4ee:	33 1f       	adc	r19, r19
     4f0:	82 0f       	add	r24, r18
     4f2:	93 1f       	adc	r25, r19
     4f4:	dc 01       	movw	r26, r24
     4f6:	8d 91       	ld	r24, X+
     4f8:	9c 91       	ld	r25, X
     4fa:	00 97       	sbiw	r24, 0x00	; 0
     4fc:	41 f0       	breq	.+16     	; 0x50e <_ZN11Dev_Manager5WriteE8Dev_typec+0x26>
     4fe:	64 2f       	mov	r22, r20
     500:	dc 01       	movw	r26, r24
     502:	ed 91       	ld	r30, X+
     504:	fc 91       	ld	r31, X
     506:	06 80       	ldd	r0, Z+6	; 0x06
     508:	f7 81       	ldd	r31, Z+7	; 0x07
     50a:	e0 2d       	mov	r30, r0
     50c:	09 95       	icall
     50e:	08 95       	ret

00000510 <_ZN11Dev_Manager11Device_InitE8Dev_type>:
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	66 0f       	add	r22, r22
     514:	77 1f       	adc	r23, r23
     516:	86 0f       	add	r24, r22
     518:	97 1f       	adc	r25, r23
     51a:	dc 01       	movw	r26, r24
     51c:	8d 91       	ld	r24, X+
     51e:	9c 91       	ld	r25, X
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	39 f0       	breq	.+14     	; 0x532 <_ZN11Dev_Manager11Device_InitE8Dev_type+0x22>
     524:	dc 01       	movw	r26, r24
     526:	ed 91       	ld	r30, X+
     528:	fc 91       	ld	r31, X
     52a:	01 90       	ld	r0, Z+
     52c:	f0 81       	ld	r31, Z
     52e:	e0 2d       	mov	r30, r0
     530:	09 95       	icall
     532:	08 95       	ret

00000534 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>:
     534:	e6 2f       	mov	r30, r22
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	ee 0f       	add	r30, r30
     53a:	ff 1f       	adc	r31, r31
     53c:	e8 0f       	add	r30, r24
     53e:	f9 1f       	adc	r31, r25
     540:	80 81       	ld	r24, Z
     542:	91 81       	ldd	r25, Z+1	; 0x01
     544:	89 2b       	or	r24, r25
     546:	11 f0       	breq	.+4      	; 0x54c <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE+0x18>
     548:	55 83       	std	Z+5, r21	; 0x05
     54a:	44 83       	std	Z+4, r20	; 0x04
     54c:	08 95       	ret

0000054e <_ZN11Dev_Manager12Driver_CheckE8Dev_type>:
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	66 0f       	add	r22, r22
     552:	77 1f       	adc	r23, r23
     554:	fc 01       	movw	r30, r24
     556:	e6 0f       	add	r30, r22
     558:	f7 1f       	adc	r31, r23
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	20 81       	ld	r18, Z
     55e:	31 81       	ldd	r19, Z+1	; 0x01
     560:	23 2b       	or	r18, r19
     562:	09 f4       	brne	.+2      	; 0x566 <_ZN11Dev_Manager12Driver_CheckE8Dev_type+0x18>
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	08 95       	ret

00000568 <_ZN11Dev_Manager16getInterfaceAddrE8Dev_type>:
	}
}
DeviceDriveInterFace* Dev_Manager::getInterfaceAddr(Dev_type Device)
{
	if(interface[Device])
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	66 0f       	add	r22, r22
     56c:	77 1f       	adc	r23, r23
     56e:	86 0f       	add	r24, r22
     570:	97 1f       	adc	r25, r23
	{
		return interface[Device];
	}
	else
		return nullptr;
}
     572:	fc 01       	movw	r30, r24
     574:	80 81       	ld	r24, Z
     576:	91 81       	ldd	r25, Z+1	; 0x01
     578:	08 95       	ret

0000057a <__vector_18>:
ISR(USART0_RX_vect)
{
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	0b b6       	in	r0, 0x3b	; 59
     586:	0f 92       	push	r0
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
	Dev_Manager::getInstance()->isr_handle[UART0](UART0,UDR0);
     5a0:	80 df       	rcall	.-256    	; 0x4a2 <_ZN11Dev_Manager11getInstanceEv>
     5a2:	6c b1       	in	r22, 0x0c	; 12
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	dc 01       	movw	r26, r24
     5a8:	14 96       	adiw	r26, 0x04	; 4
     5aa:	ed 91       	ld	r30, X+
     5ac:	fc 91       	ld	r31, X
     5ae:	15 97       	sbiw	r26, 0x05	; 5
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	09 95       	icall
	
}
     5b4:	ff 91       	pop	r31
     5b6:	ef 91       	pop	r30
     5b8:	bf 91       	pop	r27
     5ba:	af 91       	pop	r26
     5bc:	9f 91       	pop	r25
     5be:	8f 91       	pop	r24
     5c0:	7f 91       	pop	r23
     5c2:	6f 91       	pop	r22
     5c4:	5f 91       	pop	r21
     5c6:	4f 91       	pop	r20
     5c8:	3f 91       	pop	r19
     5ca:	2f 91       	pop	r18
     5cc:	0f 90       	pop	r0
     5ce:	0b be       	out	0x3b, r0	; 59
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <__vector_30>:
ISR(USART1_RX_vect)
{
     5da:	1f 92       	push	r1
     5dc:	0f 92       	push	r0
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	0f 92       	push	r0
     5e2:	11 24       	eor	r1, r1
     5e4:	0b b6       	in	r0, 0x3b	; 59
     5e6:	0f 92       	push	r0
     5e8:	2f 93       	push	r18
     5ea:	3f 93       	push	r19
     5ec:	4f 93       	push	r20
     5ee:	5f 93       	push	r21
     5f0:	6f 93       	push	r22
     5f2:	7f 93       	push	r23
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	af 93       	push	r26
     5fa:	bf 93       	push	r27
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
	Dev_Manager::getInstance()->isr_handle[RS485](RS485,UDR1);
     600:	50 df       	rcall	.-352    	; 0x4a2 <_ZN11Dev_Manager11getInstanceEv>
     602:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	dc 01       	movw	r26, r24
     60a:	16 96       	adiw	r26, 0x06	; 6
     60c:	ed 91       	ld	r30, X+
     60e:	fc 91       	ld	r31, X
     610:	17 97       	sbiw	r26, 0x07	; 7
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	09 95       	icall
}
     616:	ff 91       	pop	r31
     618:	ef 91       	pop	r30
     61a:	bf 91       	pop	r27
     61c:	af 91       	pop	r26
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	7f 91       	pop	r23
     624:	6f 91       	pop	r22
     626:	5f 91       	pop	r21
     628:	4f 91       	pop	r20
     62a:	3f 91       	pop	r19
     62c:	2f 91       	pop	r18
     62e:	0f 90       	pop	r0
     630:	0b be       	out	0x3b, r0	; 59
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <_ZN20DeviceDriveInterFace11Device_ReadEv>:
	//PORTF=0X00;	//RS485 rx Enable
}

void RS485Driver::operator delete(void* ptr)
{
	free(ptr);
     63c:	08 95       	ret

0000063e <_ZN11RS485Driver11Device_InitEv>:
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	ec 01       	movw	r28, r24
     644:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     648:	88 e9       	ldi	r24, 0x98	; 152
     64a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     64e:	86 e0       	ldi	r24, 0x06	; 6
     650:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     654:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     658:	87 e6       	ldi	r24, 0x67	; 103
     65a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <xQueueCreateMutex>
     664:	9d 83       	std	Y+5, r25	; 0x05
     666:	8c 83       	std	Y+4, r24	; 0x04
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <xQueueCreateMutex>
     66e:	9b 83       	std	Y+3, r25	; 0x03
     670:	8a 83       	std	Y+2, r24	; 0x02
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <_ZN11RS485DriverC1Ev>:
     678:	24 e0       	ldi	r18, 0x04	; 4
     67a:	31 e0       	ldi	r19, 0x01	; 1
     67c:	fc 01       	movw	r30, r24
     67e:	31 83       	std	Z+1, r19	; 0x01
     680:	20 83       	st	Z, r18
     682:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <_ZN11RS485Driver4instE>
     686:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <_ZN11RS485Driver4instE+0x1>
     68a:	23 2b       	or	r18, r19
     68c:	21 f4       	brne	.+8      	; 0x696 <_ZN11RS485DriverC1Ev+0x1e>
     68e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_ZN11RS485Driver4instE+0x1>
     692:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_ZN11RS485Driver4instE>
     696:	08 95       	ret

00000698 <_ZN11RS485DrivernwEj>:
}
void* RS485Driver::operator new(size_t size)
{
	return malloc(size);
     698:	c5 c6       	rjmp	.+3466   	; 0x1424 <pvPortMalloc>
}
     69a:	08 95       	ret

0000069c <_ZN11RS485Driver12UART_PutcharEc>:
void RS485Driver::UART_Putchar(const char data)
{
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	ec 01       	movw	r28, r24
     6a4:	16 2f       	mov	r17, r22
	if(xSemaphoreTake(char_Mutex,100) == pdPASS)
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	44 e6       	ldi	r20, 0x64	; 100
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	9b 81       	ldd	r25, Y+3	; 0x03
     6b4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xQueueGenericReceive>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	81 f4       	brne	.+32     	; 0x6dc <_ZN11RS485Driver12UART_PutcharEc+0x40>
	{
		while((UCSR1A & (1 << UDRE1)) == 0);
     6bc:	eb e9       	ldi	r30, 0x9B	; 155
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	90 81       	ld	r25, Z
     6c2:	95 ff       	sbrs	r25, 5
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <_ZN11RS485Driver12UART_PutcharEc+0x24>
		UDR1 = data;
     6c6:	10 93 9c 00 	sts	0x009C, r17	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
		xSemaphoreGive(char_Mutex);
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	8a 81       	ldd	r24, Y+2	; 0x02
     6d6:	9b 81       	ldd	r25, Y+3	; 0x03
     6d8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <xQueueGenericSend>
	}
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	08 95       	ret

000006e4 <_ZN11RS485Driver12Device_WriteEc>:
		xSemaphoreGive(Uart_Mutex);
	}
}
void RS485Driver::Device_Write(char data)
{
	UART_Putchar(data);
     6e4:	db cf       	rjmp	.-74     	; 0x69c <_ZN11RS485Driver12UART_PutcharEc>
     6e6:	08 95       	ret

000006e8 <_ZN11RS485Driver14UART_PutStringEPKc>:
		UDR1 = data;
		xSemaphoreGive(char_Mutex);
	}
}
void RS485Driver::UART_PutString(const char *str)
{
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	8c 01       	movw	r16, r24
     6f2:	eb 01       	movw	r28, r22
	if(xSemaphoreTake(Uart_Mutex,100) == pdPASS)
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	44 e6       	ldi	r20, 0x64	; 100
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	84 81       	ldd	r24, Z+4	; 0x04
     702:	95 81       	ldd	r25, Z+5	; 0x05
     704:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xQueueGenericReceive>
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	99 f4       	brne	.+38     	; 0x732 <_ZN11RS485Driver14UART_PutStringEPKc+0x4a>
	{
		while(*str)
     70c:	68 81       	ld	r22, Y
     70e:	66 23       	and	r22, r22
     710:	31 f0       	breq	.+12     	; 0x71e <_ZN11RS485Driver14UART_PutStringEPKc+0x36>
     712:	21 96       	adiw	r28, 0x01	; 1
		{
			UART_Putchar(*(str)++);
     714:	c8 01       	movw	r24, r16
     716:	c2 df       	rcall	.-124    	; 0x69c <_ZN11RS485Driver12UART_PutcharEc>
}
void RS485Driver::UART_PutString(const char *str)
{
	if(xSemaphoreTake(Uart_Mutex,100) == pdPASS)
	{
		while(*str)
     718:	69 91       	ld	r22, Y+
     71a:	61 11       	cpse	r22, r1
     71c:	fb cf       	rjmp	.-10     	; 0x714 <_ZN11RS485Driver14UART_PutStringEPKc+0x2c>
		{
			UART_Putchar(*(str)++);
		}
		xSemaphoreGive(Uart_Mutex);
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	f8 01       	movw	r30, r16
     72a:	84 81       	ldd	r24, Z+4	; 0x04
     72c:	95 81       	ldd	r25, Z+5	; 0x05
     72e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <xQueueGenericSend>
	}
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	08 95       	ret

0000073c <_ZN11RS485Driver13Device_WritesEPKc>:
{
	UART_Putchar(data);
}
void RS485Driver::Device_Writes(const char* data)
{
	UART_PutString(data);
     73c:	d5 cf       	rjmp	.-86     	; 0x6e8 <_ZN11RS485Driver14UART_PutStringEPKc>
     73e:	08 95       	ret

00000740 <_ZN10UartDriver11Device_InitEv>:
	char_Mutex= xSemaphoreCreateMutex();
}

void UartDriver::operator delete(void* ptr)
{
	free(ptr);
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	ec 01       	movw	r28, r24
     746:	88 e9       	ldi	r24, 0x98	; 152
     748:	8a b9       	out	0x0a, r24	; 10
     74a:	86 e0       	ldi	r24, 0x06	; 6
     74c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     750:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     754:	87 e6       	ldi	r24, 0x67	; 103
     756:	89 b9       	out	0x09, r24	; 9
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <xQueueCreateMutex>
     75e:	9d 83       	std	Y+5, r25	; 0x05
     760:	8c 83       	std	Y+4, r24	; 0x04
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <xQueueCreateMutex>
     768:	9b 83       	std	Y+3, r25	; 0x03
     76a:	8a 83       	std	Y+2, r24	; 0x02
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <_ZN10UartDriverC1Ev>:
     772:	20 e1       	ldi	r18, 0x10	; 16
     774:	31 e0       	ldi	r19, 0x01	; 1
     776:	fc 01       	movw	r30, r24
     778:	31 83       	std	Z+1, r19	; 0x01
     77a:	20 83       	st	Z, r18
     77c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <_ZN10UartDriver4instE>
     780:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <_ZN10UartDriver4instE+0x1>
     784:	23 2b       	or	r18, r19
     786:	21 f4       	brne	.+8      	; 0x790 <_ZN10UartDriverC1Ev+0x1e>
     788:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <_ZN10UartDriver4instE+0x1>
     78c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_ZN10UartDriver4instE>
     790:	08 95       	ret

00000792 <_ZN10UartDrivernwEj>:
}
void* UartDriver::operator new(size_t size)
{
	return malloc(size);
     792:	48 c6       	rjmp	.+3216   	; 0x1424 <pvPortMalloc>
}
     794:	08 95       	ret

00000796 <_ZN10UartDriver12UART_PutcharEc>:
void UartDriver::UART_Putchar(const char data)
{
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	ec 01       	movw	r28, r24
     79e:	16 2f       	mov	r17, r22
	if(xSemaphoreTake(char_Mutex,100) == pdPASS)
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	44 e6       	ldi	r20, 0x64	; 100
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	8a 81       	ldd	r24, Y+2	; 0x02
     7ac:	9b 81       	ldd	r25, Y+3	; 0x03
     7ae:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xQueueGenericReceive>
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	61 f4       	brne	.+24     	; 0x7ce <_ZN10UartDriver12UART_PutcharEc+0x38>
	{
		while((UCSR0A & (1 << UDRE0)) == 0);
     7b6:	5d 9b       	sbis	0x0b, 5	; 11
     7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <_ZN10UartDriver12UART_PutcharEc+0x20>
		UDR0 = data;
     7ba:	1c b9       	out	0x0c, r17	; 12
		xSemaphoreGive(char_Mutex);
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ca:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <xQueueGenericSend>
	}
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	08 95       	ret

000007d6 <_ZN10UartDriver12Device_WriteEc>:
		xSemaphoreGive(Uart_Mutex);
	}
}
void UartDriver::Device_Write(char data)
{
	UART_Putchar(data);
     7d6:	df cf       	rjmp	.-66     	; 0x796 <_ZN10UartDriver12UART_PutcharEc>
     7d8:	08 95       	ret

000007da <_ZN10UartDriver14UART_PutStringEPKc>:
		UDR0 = data;
		xSemaphoreGive(char_Mutex);
	}
}
void UartDriver::UART_PutString(const char *str)
{
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	8c 01       	movw	r16, r24
     7e4:	eb 01       	movw	r28, r22
	if(xSemaphoreTake(Uart_Mutex,100) == pdPASS)
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	44 e6       	ldi	r20, 0x64	; 100
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	fc 01       	movw	r30, r24
     7f2:	84 81       	ldd	r24, Z+4	; 0x04
     7f4:	95 81       	ldd	r25, Z+5	; 0x05
     7f6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xQueueGenericReceive>
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	99 f4       	brne	.+38     	; 0x824 <_ZN10UartDriver14UART_PutStringEPKc+0x4a>
	{
		while(*str)
     7fe:	68 81       	ld	r22, Y
     800:	66 23       	and	r22, r22
     802:	31 f0       	breq	.+12     	; 0x810 <_ZN10UartDriver14UART_PutStringEPKc+0x36>
     804:	21 96       	adiw	r28, 0x01	; 1
		{
			UART_Putchar(*(str)++);
     806:	c8 01       	movw	r24, r16
     808:	c6 df       	rcall	.-116    	; 0x796 <_ZN10UartDriver12UART_PutcharEc>
}
void UartDriver::UART_PutString(const char *str)
{
	if(xSemaphoreTake(Uart_Mutex,100) == pdPASS)
	{
		while(*str)
     80a:	69 91       	ld	r22, Y+
     80c:	61 11       	cpse	r22, r1
     80e:	fb cf       	rjmp	.-10     	; 0x806 <_ZN10UartDriver14UART_PutStringEPKc+0x2c>
		{
			UART_Putchar(*(str)++);
		}
		xSemaphoreGive(Uart_Mutex);
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	f8 01       	movw	r30, r16
     81c:	84 81       	ldd	r24, Z+4	; 0x04
     81e:	95 81       	ldd	r25, Z+5	; 0x05
     820:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <xQueueGenericSend>
	}
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <_ZN10UartDriver13Device_WritesEPKc>:
{
	UART_Putchar(data);
}
void UartDriver::Device_Writes(const char* data)
{
	UART_PutString(data);
     82e:	d5 cf       	rjmp	.-86     	; 0x7da <_ZN10UartDriver14UART_PutStringEPKc>
     830:	08 95       	ret

00000832 <_ZL5proc1Pv>:
	{
		sbi(*PORT,Pine);
	}
	else
	{
		cbi(*PORT,Pine);
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	6e 97       	sbiw	r28, 0x1e	; 30
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
     846:	7c 01       	movw	r14, r24
     848:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <mem4+0x3>
     84c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <mem4+0x2>
     850:	61 2c       	mov	r6, r1
     852:	71 2c       	mov	r7, r1
     854:	a1 2c       	mov	r10, r1
     856:	b1 2c       	mov	r11, r1
     858:	6e 01       	movw	r12, r28
     85a:	88 e0       	ldi	r24, 0x08	; 8
     85c:	c8 0e       	add	r12, r24
     85e:	d1 1c       	adc	r13, r1
     860:	0c e4       	ldi	r16, 0x4C	; 76
     862:	11 e0       	ldi	r17, 0x01	; 1
     864:	41 2c       	mov	r4, r1
     866:	68 94       	set
     868:	99 24       	eor	r9, r9
     86a:	91 f8       	bld	r9, 1
     86c:	55 24       	eor	r5, r5
     86e:	53 94       	inc	r5
     870:	61 10       	cpse	r6, r1
     872:	13 c0       	rjmp	.+38     	; 0x89a <_ZL5proc1Pv+0x68>
     874:	71 10       	cpse	r7, r1
     876:	12 c3       	rjmp	.+1572   	; 0xe9c <_ZL5proc1Pv+0x66a>
     878:	9e 01       	movw	r18, r28
     87a:	25 5f       	subi	r18, 0xF5	; 245
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	45 2d       	mov	r20, r5
     880:	6e e2       	ldi	r22, 0x2E	; 46
     882:	71 e0       	ldi	r23, 0x01	; 1
     884:	85 2d       	mov	r24, r5
     886:	05 dd       	rcall	.-1526   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     888:	48 e0       	ldi	r20, 0x08	; 8
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	be 01       	movw	r22, r28
     88e:	65 5f       	subi	r22, 0xF5	; 245
     890:	7f 4f       	sbci	r23, 0xFF	; 255
     892:	c7 01       	movw	r24, r14
     894:	7a dd       	rcall	.-1292   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     896:	75 2c       	mov	r7, r5
     898:	01 c3       	rjmp	.+1538   	; 0xe9c <_ZL5proc1Pv+0x66a>
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	69 12       	cpse	r6, r25
     89e:	13 c0       	rjmp	.+38     	; 0x8c6 <_ZL5proc1Pv+0x94>
     8a0:	71 10       	cpse	r7, r1
     8a2:	02 c3       	rjmp	.+1540   	; 0xea8 <_ZL5proc1Pv+0x676>
     8a4:	9e 01       	movw	r18, r28
     8a6:	25 5f       	subi	r18, 0xF5	; 245
     8a8:	3f 4f       	sbci	r19, 0xFF	; 255
     8aa:	45 2d       	mov	r20, r5
     8ac:	65 e0       	ldi	r22, 0x05	; 5
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	ef dc       	rcall	.-1570   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     8b4:	48 e0       	ldi	r20, 0x08	; 8
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	be 01       	movw	r22, r28
     8ba:	65 5f       	subi	r22, 0xF5	; 245
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	c7 01       	movw	r24, r14
     8c0:	64 dd       	rcall	.-1336   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     8c2:	75 2c       	mov	r7, r5
     8c4:	f1 c2       	rjmp	.+1506   	; 0xea8 <_ZL5proc1Pv+0x676>
     8c6:	e2 e0       	ldi	r30, 0x02	; 2
     8c8:	6e 12       	cpse	r6, r30
     8ca:	13 c0       	rjmp	.+38     	; 0x8f2 <_ZL5proc1Pv+0xc0>
     8cc:	71 10       	cpse	r7, r1
     8ce:	ec c2       	rjmp	.+1496   	; 0xea8 <_ZL5proc1Pv+0x676>
     8d0:	9e 01       	movw	r18, r28
     8d2:	25 5f       	subi	r18, 0xF5	; 245
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	45 2d       	mov	r20, r5
     8d8:	64 e0       	ldi	r22, 0x04	; 4
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	d9 dc       	rcall	.-1614   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     8e0:	48 e0       	ldi	r20, 0x08	; 8
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	be 01       	movw	r22, r28
     8e6:	65 5f       	subi	r22, 0xF5	; 245
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	c7 01       	movw	r24, r14
     8ec:	4e dd       	rcall	.-1380   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     8ee:	75 2c       	mov	r7, r5
     8f0:	db c2       	rjmp	.+1462   	; 0xea8 <_ZL5proc1Pv+0x676>
     8f2:	f3 e0       	ldi	r31, 0x03	; 3
     8f4:	6f 12       	cpse	r6, r31
     8f6:	d8 c2       	rjmp	.+1456   	; 0xea8 <_ZL5proc1Pv+0x676>
     8f8:	71 10       	cpse	r7, r1
     8fa:	d6 c2       	rjmp	.+1452   	; 0xea8 <_ZL5proc1Pv+0x676>
     8fc:	9e 01       	movw	r18, r28
     8fe:	25 5f       	subi	r18, 0xF5	; 245
     900:	3f 4f       	sbci	r19, 0xFF	; 255
     902:	45 2d       	mov	r20, r5
     904:	6d e2       	ldi	r22, 0x2D	; 45
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	89 2d       	mov	r24, r9
     90a:	c3 dc       	rcall	.-1658   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     90c:	48 e0       	ldi	r20, 0x08	; 8
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	be 01       	movw	r22, r28
     912:	65 5f       	subi	r22, 0xF5	; 245
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	c7 01       	movw	r24, r14
     918:	38 dd       	rcall	.-1424   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     91a:	75 2c       	mov	r7, r5
     91c:	c5 c2       	rjmp	.+1418   	; 0xea8 <_ZL5proc1Pv+0x676>
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	5c 01       	movw	r10, r24
     924:	c7 01       	movw	r24, r14
     926:	6d dd       	rcall	.-1318   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     928:	f5 01       	movw	r30, r10
     92a:	81 93       	st	Z+, r24
     92c:	5f 01       	movw	r10, r30
     92e:	ec 15       	cp	r30, r12
     930:	fd 05       	cpc	r31, r13
     932:	c1 f7       	brne	.-16     	; 0x924 <_ZL5proc1Pv+0xf2>
     934:	be 01       	movw	r22, r28
     936:	6d 5e       	subi	r22, 0xED	; 237
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	ce 01       	movw	r24, r28
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	8f dc       	rcall	.-1762   	; 0x25e <_Z16getFunction3DataPcP7GetData>
     940:	ae 88       	ldd	r10, Y+22	; 0x16
     942:	bf 88       	ldd	r11, Y+23	; 0x17
     944:	f8 01       	movw	r30, r16
     946:	b5 82       	std	Z+5, r11	; 0x05
     948:	a4 82       	std	Z+4, r10	; 0x04
     94a:	13 82       	std	Z+3, r1	; 0x03
     94c:	12 82       	std	Z+2, r1	; 0x02
     94e:	c7 01       	movw	r24, r14
     950:	8f dd       	rcall	.-1250   	; 0x470 <_ZN12SerialBuffer11SerialFlushEv>
     952:	c7 01       	movw	r24, r14
     954:	82 dd       	rcall	.-1276   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     956:	87 30       	cpi	r24, 0x07	; 7
     958:	58 f4       	brcc	.+22     	; 0x970 <_ZL5proc1Pv+0x13e>
     95a:	65 2c       	mov	r6, r5
     95c:	74 2c       	mov	r7, r4
     95e:	40 c0       	rjmp	.+128    	; 0x9e0 <_ZL5proc1Pv+0x1ae>
     960:	c7 01       	movw	r24, r14
     962:	7b dd       	rcall	.-1290   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     964:	87 30       	cpi	r24, 0x07	; 7
     966:	08 f4       	brcc	.+2      	; 0x96a <_ZL5proc1Pv+0x138>
     968:	3b c0       	rjmp	.+118    	; 0x9e0 <_ZL5proc1Pv+0x1ae>
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	6f 12       	cpse	r6, r31
     96e:	38 c0       	rjmp	.+112    	; 0x9e0 <_ZL5proc1Pv+0x1ae>
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	3c 01       	movw	r6, r24
     976:	c7 01       	movw	r24, r14
     978:	44 dd       	rcall	.-1400   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     97a:	f3 01       	movw	r30, r6
     97c:	81 93       	st	Z+, r24
     97e:	3f 01       	movw	r6, r30
     980:	ec 15       	cp	r30, r12
     982:	fd 05       	cpc	r31, r13
     984:	c1 f7       	brne	.-16     	; 0x976 <_ZL5proc1Pv+0x144>
     986:	8d 81       	ldd	r24, Y+5	; 0x05
     988:	87 70       	andi	r24, 0x07	; 7
     98a:	81 30       	cpi	r24, 0x01	; 1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <_ZL5proc1Pv+0x174>
     98e:	90 92 36 01 	sts	0x0136, r9	; 0x800136 <inverter>
     992:	c7 01       	movw	r24, r14
     994:	6d dd       	rcall	.-1318   	; 0x470 <_ZN12SerialBuffer11SerialFlushEv>
     996:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <inverter>
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	f8 01       	movw	r30, r16
     99e:	97 83       	std	Z+7, r25	; 0x07
     9a0:	86 83       	std	Z+6, r24	; 0x06
     9a2:	89 2c       	mov	r8, r9
     9a4:	89 c2       	rjmp	.+1298   	; 0xeb8 <_ZL5proc1Pv+0x686>
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	61 f4       	brne	.+24     	; 0x9c2 <_ZL5proc1Pv+0x190>
     9aa:	40 92 36 01 	sts	0x0136, r4	; 0x800136 <inverter>
     9ae:	c7 01       	movw	r24, r14
     9b0:	5f dd       	rcall	.-1346   	; 0x470 <_ZN12SerialBuffer11SerialFlushEv>
     9b2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <inverter>
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	f8 01       	movw	r30, r16
     9ba:	97 83       	std	Z+7, r25	; 0x07
     9bc:	86 83       	std	Z+6, r24	; 0x06
     9be:	84 2c       	mov	r8, r4
     9c0:	7b c2       	rjmp	.+1270   	; 0xeb8 <_ZL5proc1Pv+0x686>
     9c2:	84 30       	cpi	r24, 0x04	; 4
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <_ZL5proc1Pv+0x196>
     9c6:	73 c2       	rjmp	.+1254   	; 0xeae <_ZL5proc1Pv+0x67c>
     9c8:	50 92 36 01 	sts	0x0136, r5	; 0x800136 <inverter>
     9cc:	c7 01       	movw	r24, r14
     9ce:	50 dd       	rcall	.-1376   	; 0x470 <_ZN12SerialBuffer11SerialFlushEv>
     9d0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <inverter>
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	f8 01       	movw	r30, r16
     9d8:	97 83       	std	Z+7, r25	; 0x07
     9da:	86 83       	std	Z+6, r24	; 0x06
     9dc:	85 2c       	mov	r8, r5
     9de:	6c c2       	rjmp	.+1240   	; 0xeb8 <_ZL5proc1Pv+0x686>
     9e0:	c7 01       	movw	r24, r14
     9e2:	3b dd       	rcall	.-1418   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     9e4:	87 30       	cpi	r24, 0x07	; 7
     9e6:	70 f1       	brcs	.+92     	; 0xa44 <_ZL5proc1Pv+0x212>
     9e8:	f2 e0       	ldi	r31, 0x02	; 2
     9ea:	6f 12       	cpse	r6, r31
     9ec:	2b c0       	rjmp	.+86     	; 0xa44 <_ZL5proc1Pv+0x212>
     9ee:	ce 01       	movw	r24, r28
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	3c 01       	movw	r6, r24
     9f4:	c7 01       	movw	r24, r14
     9f6:	05 dd       	rcall	.-1526   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     9f8:	f3 01       	movw	r30, r6
     9fa:	81 93       	st	Z+, r24
     9fc:	3f 01       	movw	r6, r30
     9fe:	ec 15       	cp	r30, r12
     a00:	fd 05       	cpc	r31, r13
     a02:	c1 f7       	brne	.-16     	; 0x9f4 <_ZL5proc1Pv+0x1c2>
     a04:	8c 81       	ldd	r24, Y+4	; 0x04
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	98 2f       	mov	r25, r24
     a0a:	88 27       	eor	r24, r24
     a0c:	2d 81       	ldd	r18, Y+5	; 0x05
     a0e:	82 2b       	or	r24, r18
     a10:	f8 01       	movw	r30, r16
     a12:	91 87       	std	Z+9, r25	; 0x09
     a14:	80 87       	std	Z+8, r24	; 0x08
     a16:	64 e6       	ldi	r22, 0x64	; 100
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	0e 94 94 13 	call	0x2728	; 0x2728 <__divmodhi4>
     a1e:	1b 01       	movw	r2, r22
     a20:	22 0c       	add	r2, r2
     a22:	33 1c       	adc	r3, r3
     a24:	22 0c       	add	r2, r2
     a26:	33 1c       	adc	r3, r3
     a28:	26 0e       	add	r2, r22
     a2a:	37 1e       	adc	r3, r23
     a2c:	33 86       	std	Z+11, r3	; 0x0b
     a2e:	22 86       	std	Z+10, r2	; 0x0a
     a30:	c7 01       	movw	r24, r14
     a32:	13 dd       	rcall	.-1498   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     a34:	87 30       	cpi	r24, 0x07	; 7
     a36:	70 f4       	brcc	.+28     	; 0xa54 <_ZL5proc1Pv+0x222>
     a38:	0f 2e       	mov	r0, r31
     a3a:	f3 e0       	ldi	r31, 0x03	; 3
     a3c:	6f 2e       	mov	r6, r31
     a3e:	f0 2d       	mov	r31, r0
     a40:	74 2c       	mov	r7, r4
     a42:	42 c0       	rjmp	.+132    	; 0xac8 <_ZL5proc1Pv+0x296>
     a44:	c7 01       	movw	r24, r14
     a46:	09 dd       	rcall	.-1518   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     a48:	87 30       	cpi	r24, 0x07	; 7
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <_ZL5proc1Pv+0x21c>
     a4c:	3d c0       	rjmp	.+122    	; 0xac8 <_ZL5proc1Pv+0x296>
     a4e:	f3 e0       	ldi	r31, 0x03	; 3
     a50:	6f 12       	cpse	r6, r31
     a52:	3a c0       	rjmp	.+116    	; 0xac8 <_ZL5proc1Pv+0x296>
     a54:	8e 01       	movw	r16, r28
     a56:	0f 5f       	subi	r16, 0xFF	; 255
     a58:	1f 4f       	sbci	r17, 0xFF	; 255
     a5a:	ce 01       	movw	r24, r28
     a5c:	08 96       	adiw	r24, 0x08	; 8
     a5e:	9b 8f       	std	Y+27, r25	; 0x1b
     a60:	8a 8f       	std	Y+26, r24	; 0x1a
     a62:	c7 01       	movw	r24, r14
     a64:	ce dc       	rcall	.-1636   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     a66:	f8 01       	movw	r30, r16
     a68:	81 93       	st	Z+, r24
     a6a:	8f 01       	movw	r16, r30
     a6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a6e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a70:	e8 17       	cp	r30, r24
     a72:	f9 07       	cpc	r31, r25
     a74:	b1 f7       	brne	.-20     	; 0xa62 <_ZL5proc1Pv+0x230>
     a76:	be 01       	movw	r22, r28
     a78:	6d 5e       	subi	r22, 0xED	; 237
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	ee db       	rcall	.-2084   	; 0x25e <_Z16getFunction3DataPcP7GetData>
     a82:	0e 89       	ldd	r16, Y+22	; 0x16
     a84:	1f 89       	ldd	r17, Y+23	; 0x17
     a86:	10 93 5d 01 	sts	0x015D, r17	; 0x80015d <mem4+0x11>
     a8a:	00 93 5c 01 	sts	0x015C, r16	; 0x80015c <mem4+0x10>
     a8e:	c7 01       	movw	r24, r14
     a90:	ef dc       	rcall	.-1570   	; 0x470 <_ZN12SerialBuffer11SerialFlushEv>
     a92:	8c e2       	ldi	r24, 0x2C	; 44
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskDelay>
     a9a:	84 e6       	ldi	r24, 0x64	; 100
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskDelay>
     aa2:	51 2c       	mov	r5, r1
     aa4:	41 2c       	mov	r4, r1
     aa6:	0f 2e       	mov	r0, r31
     aa8:	fc e4       	ldi	r31, 0x4C	; 76
     aaa:	6f 2e       	mov	r6, r31
     aac:	f1 e0       	ldi	r31, 0x01	; 1
     aae:	7f 2e       	mov	r7, r31
     ab0:	f0 2d       	mov	r31, r0
     ab2:	68 94       	set
     ab4:	99 24       	eor	r9, r9
     ab6:	91 f8       	bld	r9, 1
     ab8:	fe 01       	movw	r30, r28
     aba:	39 96       	adiw	r30, 0x09	; 9
     abc:	fd 8f       	std	Y+29, r31	; 0x1d
     abe:	ec 8f       	std	Y+28, r30	; 0x1c
     ac0:	d4 2c       	mov	r13, r4
     ac2:	c5 2c       	mov	r12, r5
     ac4:	27 01       	movw	r4, r14
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <_ZL5proc1Pv+0x2a0>
     ac8:	8c e2       	ldi	r24, 0x2C	; 44
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskDelay>
     ad0:	cf ce       	rjmp	.-610    	; 0x870 <_ZL5proc1Pv+0x3e>
     ad2:	f3 01       	movw	r30, r6
     ad4:	82 85       	ldd	r24, Z+10	; 0x0a
     ad6:	93 85       	ldd	r25, Z+11	; 0x0b
     ad8:	82 15       	cp	r24, r2
     ada:	93 05       	cpc	r25, r3
     adc:	21 f0       	breq	.+8      	; 0xae6 <_ZL5proc1Pv+0x2b4>
     ade:	0f 2e       	mov	r0, r31
     ae0:	f3 e0       	ldi	r31, 0x03	; 3
     ae2:	cf 2e       	mov	r12, r31
     ae4:	f0 2d       	mov	r31, r0
     ae6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <inverter>
     aea:	88 12       	cpse	r8, r24
     aec:	c9 2c       	mov	r12, r9
     aee:	f3 01       	movw	r30, r6
     af0:	e0 88       	ldd	r14, Z+16	; 0x10
     af2:	f1 88       	ldd	r15, Z+17	; 0x11
     af4:	e0 16       	cp	r14, r16
     af6:	f1 06       	cpc	r15, r17
     af8:	09 f0       	breq	.+2      	; 0xafc <_ZL5proc1Pv+0x2ca>
     afa:	a6 c1       	rjmp	.+844    	; 0xe48 <_ZL5proc1Pv+0x616>
     afc:	04 81       	ldd	r16, Z+4	; 0x04
     afe:	15 81       	ldd	r17, Z+5	; 0x05
     b00:	0a 15       	cp	r16, r10
     b02:	1b 05       	cpc	r17, r11
     b04:	09 f0       	breq	.+2      	; 0xb08 <_ZL5proc1Pv+0x2d6>
     b06:	a6 c1       	rjmp	.+844    	; 0xe54 <_ZL5proc1Pv+0x622>
     b08:	c1 10       	cpse	r12, r1
     b0a:	11 c0       	rjmp	.+34     	; 0xb2e <_ZL5proc1Pv+0x2fc>
     b0c:	9e 01       	movw	r18, r28
     b0e:	25 5f       	subi	r18, 0xF5	; 245
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	41 e0       	ldi	r20, 0x01	; 1
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	bb db       	rcall	.-2186   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     b1c:	48 e0       	ldi	r20, 0x08	; 8
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	be 01       	movw	r22, r28
     b22:	65 5f       	subi	r22, 0xF5	; 245
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	c2 01       	movw	r24, r4
     b28:	30 dc       	rcall	.-1952   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     b2a:	58 01       	movw	r10, r16
     b2c:	2b c0       	rjmp	.+86     	; 0xb84 <_ZL5proc1Pv+0x352>
     b2e:	f4 e0       	ldi	r31, 0x04	; 4
     b30:	cf 12       	cpse	r12, r31
     b32:	11 c0       	rjmp	.+34     	; 0xb56 <_ZL5proc1Pv+0x324>
     b34:	9e 01       	movw	r18, r28
     b36:	25 5f       	subi	r18, 0xF5	; 245
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	41 e0       	ldi	r20, 0x01	; 1
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	89 2d       	mov	r24, r9
     b42:	a7 db       	rcall	.-2226   	; 0x292 <_Z15Function03WritecicP16InputOutput8Byte>
     b44:	48 e0       	ldi	r20, 0x08	; 8
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	be 01       	movw	r22, r28
     b4a:	65 5f       	subi	r22, 0xF5	; 245
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	c2 01       	movw	r24, r4
     b50:	1c dc       	rcall	.-1992   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     b52:	58 01       	movw	r10, r16
     b54:	2d c0       	rjmp	.+90     	; 0xbb0 <_ZL5proc1Pv+0x37e>
     b56:	58 01       	movw	r10, r16
     b58:	85 e0       	ldi	r24, 0x05	; 5
     b5a:	c8 12       	cpse	r12, r24
     b5c:	13 c0       	rjmp	.+38     	; 0xb84 <_ZL5proc1Pv+0x352>
     b5e:	f3 01       	movw	r30, r6
     b60:	40 89       	ldd	r20, Z+16	; 0x10
     b62:	51 89       	ldd	r21, Z+17	; 0x11
     b64:	9e 01       	movw	r18, r28
     b66:	25 5f       	subi	r18, 0xF5	; 245
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	6d e2       	ldi	r22, 0x2D	; 45
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	89 2d       	mov	r24, r9
     b70:	a6 db       	rcall	.-2228   	; 0x2be <_Z15Function06WriteciiP16InputOutput8Byte>
     b72:	48 e0       	ldi	r20, 0x08	; 8
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	be 01       	movw	r22, r28
     b78:	65 5f       	subi	r22, 0xF5	; 245
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	c2 01       	movw	r24, r4
     b7e:	05 dc       	rcall	.-2038   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     b80:	c1 2c       	mov	r12, r1
     b82:	5b c0       	rjmp	.+182    	; 0xc3a <_ZL5proc1Pv+0x408>
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	cf 12       	cpse	r12, r31
     b88:	13 c0       	rjmp	.+38     	; 0xbb0 <_ZL5proc1Pv+0x37e>
     b8a:	f3 01       	movw	r30, r6
     b8c:	44 81       	ldd	r20, Z+4	; 0x04
     b8e:	55 81       	ldd	r21, Z+5	; 0x05
     b90:	9e 01       	movw	r18, r28
     b92:	25 5f       	subi	r18, 0xF5	; 245
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	6e e2       	ldi	r22, 0x2E	; 46
     b98:	71 e0       	ldi	r23, 0x01	; 1
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 db       	rcall	.-2272   	; 0x2be <_Z15Function06WriteciiP16InputOutput8Byte>
     b9e:	48 e0       	ldi	r20, 0x08	; 8
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	be 01       	movw	r22, r28
     ba4:	65 5f       	subi	r22, 0xF5	; 245
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	c2 01       	movw	r24, r4
     baa:	ef db       	rcall	.-2082   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     bac:	c1 2c       	mov	r12, r1
     bae:	64 c0       	rjmp	.+200    	; 0xc78 <_ZL5proc1Pv+0x446>
     bb0:	f2 e0       	ldi	r31, 0x02	; 2
     bb2:	cf 12       	cpse	r12, r31
     bb4:	42 c0       	rjmp	.+132    	; 0xc3a <_ZL5proc1Pv+0x408>
     bb6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <inverter>
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	a1 f4       	brne	.+40     	; 0xbe6 <_ZL5proc1Pv+0x3b4>
     bbe:	9e 01       	movw	r18, r28
     bc0:	25 5f       	subi	r18, 0xF5	; 245
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	44 e0       	ldi	r20, 0x04	; 4
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	65 e0       	ldi	r22, 0x05	; 5
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	77 db       	rcall	.-2322   	; 0x2be <_Z15Function06WriteciiP16InputOutput8Byte>
     bd0:	48 e0       	ldi	r20, 0x08	; 8
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	be 01       	movw	r22, r28
     bd6:	65 5f       	subi	r22, 0xF5	; 245
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	c2 01       	movw	r24, r4
     bdc:	d6 db       	rcall	.-2132   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     bde:	c1 2c       	mov	r12, r1
     be0:	88 24       	eor	r8, r8
     be2:	83 94       	inc	r8
     be4:	49 c0       	rjmp	.+146    	; 0xc78 <_ZL5proc1Pv+0x446>
     be6:	81 11       	cpse	r24, r1
     be8:	13 c0       	rjmp	.+38     	; 0xc10 <_ZL5proc1Pv+0x3de>
     bea:	9e 01       	movw	r18, r28
     bec:	25 5f       	subi	r18, 0xF5	; 245
     bee:	3f 4f       	sbci	r19, 0xFF	; 255
     bf0:	42 e0       	ldi	r20, 0x02	; 2
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	65 e0       	ldi	r22, 0x05	; 5
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	61 db       	rcall	.-2366   	; 0x2be <_Z15Function06WriteciiP16InputOutput8Byte>
     bfc:	48 e0       	ldi	r20, 0x08	; 8
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	be 01       	movw	r22, r28
     c02:	65 5f       	subi	r22, 0xF5	; 245
     c04:	7f 4f       	sbci	r23, 0xFF	; 255
     c06:	c2 01       	movw	r24, r4
     c08:	c0 db       	rcall	.-2176   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     c0a:	c1 2c       	mov	r12, r1
     c0c:	81 2c       	mov	r8, r1
     c0e:	34 c0       	rjmp	.+104    	; 0xc78 <_ZL5proc1Pv+0x446>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	91 f5       	brne	.+100    	; 0xc78 <_ZL5proc1Pv+0x446>
     c14:	9e 01       	movw	r18, r28
     c16:	25 5f       	subi	r18, 0xF5	; 245
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	65 e0       	ldi	r22, 0x05	; 5
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	4c db       	rcall	.-2408   	; 0x2be <_Z15Function06WriteciiP16InputOutput8Byte>
     c26:	48 e0       	ldi	r20, 0x08	; 8
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	be 01       	movw	r22, r28
     c2c:	65 5f       	subi	r22, 0xF5	; 245
     c2e:	7f 4f       	sbci	r23, 0xFF	; 255
     c30:	c2 01       	movw	r24, r4
     c32:	ab db       	rcall	.-2218   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     c34:	c1 2c       	mov	r12, r1
     c36:	89 2c       	mov	r8, r9
     c38:	1f c0       	rjmp	.+62     	; 0xc78 <_ZL5proc1Pv+0x446>
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	c8 12       	cpse	r12, r24
     c3e:	1c c0       	rjmp	.+56     	; 0xc78 <_ZL5proc1Pv+0x446>
     c40:	f3 01       	movw	r30, r6
     c42:	82 85       	ldd	r24, Z+10	; 0x0a
     c44:	93 85       	ldd	r25, Z+11	; 0x0b
     c46:	65 e0       	ldi	r22, 0x05	; 5
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	0e 94 94 13 	call	0x2728	; 0x2728 <__divmodhi4>
     c4e:	f4 e6       	ldi	r31, 0x64	; 100
     c50:	f6 9f       	mul	r31, r22
     c52:	a0 01       	movw	r20, r0
     c54:	f7 9f       	mul	r31, r23
     c56:	50 0d       	add	r21, r0
     c58:	11 24       	eor	r1, r1
     c5a:	9e 01       	movw	r18, r28
     c5c:	25 5f       	subi	r18, 0xF5	; 245
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
     c60:	64 e0       	ldi	r22, 0x04	; 4
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	2b db       	rcall	.-2474   	; 0x2be <_Z15Function06WriteciiP16InputOutput8Byte>
     c68:	48 e0       	ldi	r20, 0x08	; 8
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	be 01       	movw	r22, r28
     c6e:	65 5f       	subi	r22, 0xF5	; 245
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	c2 01       	movw	r24, r4
     c74:	8a db       	rcall	.-2284   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
     c76:	c1 2c       	mov	r12, r1
     c78:	c2 01       	movw	r24, r4
     c7a:	ef db       	rcall	.-2082   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     c7c:	82 30       	cpi	r24, 0x02	; 2
     c7e:	b0 f0       	brcs	.+44     	; 0xcac <_ZL5proc1Pv+0x47a>
     c80:	d1 10       	cpse	r13, r1
     c82:	14 c0       	rjmp	.+40     	; 0xcac <_ZL5proc1Pv+0x47a>
     c84:	c2 01       	movw	r24, r4
     c86:	bd db       	rcall	.-2182   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	c2 01       	movw	r24, r4
     c8c:	ba db       	rcall	.-2188   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     c8e:	8a 83       	std	Y+2, r24	; 0x02
     c90:	99 81       	ldd	r25, Y+1	; 0x01
     c92:	91 30       	cpi	r25, 0x01	; 1
     c94:	09 f4       	brne	.+2      	; 0xc98 <_ZL5proc1Pv+0x466>
     c96:	1d c1       	rjmp	.+570    	; 0xed2 <_ZL5proc1Pv+0x6a0>
     c98:	92 30       	cpi	r25, 0x02	; 2
     c9a:	09 f4       	brne	.+2      	; 0xc9e <_ZL5proc1Pv+0x46c>
     c9c:	df c0       	rjmp	.+446    	; 0xe5c <_ZL5proc1Pv+0x62a>
     c9e:	93 30       	cpi	r25, 0x03	; 3
     ca0:	09 f0       	breq	.+2      	; 0xca4 <_ZL5proc1Pv+0x472>
     ca2:	1d c1       	rjmp	.+570    	; 0xede <_ZL5proc1Pv+0x6ac>
     ca4:	32 c1       	rjmp	.+612    	; 0xf0a <_ZL5proc1Pv+0x6d8>
     ca6:	86 30       	cpi	r24, 0x06	; 6
     ca8:	09 f4       	brne	.+2      	; 0xcac <_ZL5proc1Pv+0x47a>
     caa:	1d c1       	rjmp	.+570    	; 0xee6 <_ZL5proc1Pv+0x6b4>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	d8 12       	cpse	r13, r24
     cb0:	3b c0       	rjmp	.+118    	; 0xd28 <_ZL5proc1Pv+0x4f6>
     cb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cb4:	93 30       	cpi	r25, 0x03	; 3
     cb6:	09 f0       	breq	.+2      	; 0xcba <_ZL5proc1Pv+0x488>
     cb8:	dc c0       	rjmp	.+440    	; 0xe72 <_ZL5proc1Pv+0x640>
     cba:	c2 01       	movw	r24, r4
     cbc:	ce db       	rcall	.-2148   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     cbe:	85 30       	cpi	r24, 0x05	; 5
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <_ZL5proc1Pv+0x492>
     cc2:	d4 c0       	rjmp	.+424    	; 0xe6c <_ZL5proc1Pv+0x63a>
     cc4:	8e 01       	movw	r16, r28
     cc6:	0d 5f       	subi	r16, 0xFD	; 253
     cc8:	1f 4f       	sbci	r17, 0xFF	; 255
     cca:	c2 01       	movw	r24, r4
     ccc:	9a db       	rcall	.-2252   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     cce:	f8 01       	movw	r30, r16
     cd0:	81 93       	st	Z+, r24
     cd2:	8f 01       	movw	r16, r30
     cd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cd8:	e8 17       	cp	r30, r24
     cda:	f9 07       	cpc	r31, r25
     cdc:	b1 f7       	brne	.-20     	; 0xcca <_ZL5proc1Pv+0x498>
     cde:	be 01       	movw	r22, r28
     ce0:	6d 5e       	subi	r22, 0xED	; 237
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	ba da       	rcall	.-2700   	; 0x25e <_Z16getFunction3DataPcP7GetData>
     cea:	8e 89       	ldd	r24, Y+22	; 0x16
     cec:	9f 89       	ldd	r25, Y+23	; 0x17
     cee:	f3 01       	movw	r30, r6
     cf0:	93 83       	std	Z+3, r25	; 0x03
     cf2:	82 83       	std	Z+2, r24	; 0x02
     cf4:	68 94       	set
     cf6:	cc 24       	eor	r12, r12
     cf8:	c2 f8       	bld	r12, 2
     cfa:	d1 2c       	mov	r13, r1
     cfc:	ff c0       	rjmp	.+510    	; 0xefc <_ZL5proc1Pv+0x6ca>
     cfe:	c2 01       	movw	r24, r4
     d00:	ac db       	rcall	.-2216   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     d02:	86 30       	cpi	r24, 0x06	; 6
     d04:	08 f4       	brcc	.+2      	; 0xd08 <_ZL5proc1Pv+0x4d6>
     d06:	b9 c0       	rjmp	.+370    	; 0xe7a <_ZL5proc1Pv+0x648>
     d08:	8e 01       	movw	r16, r28
     d0a:	0d 5f       	subi	r16, 0xFD	; 253
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	c2 01       	movw	r24, r4
     d10:	78 db       	rcall	.-2320   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     d12:	f8 01       	movw	r30, r16
     d14:	81 93       	st	Z+, r24
     d16:	8f 01       	movw	r16, r30
     d18:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d1c:	e8 17       	cp	r30, r24
     d1e:	f9 07       	cpc	r31, r25
     d20:	b1 f7       	brne	.-20     	; 0xd0e <_ZL5proc1Pv+0x4dc>
     d22:	ab c0       	rjmp	.+342    	; 0xe7a <_ZL5proc1Pv+0x648>
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	9e 8f       	std	Y+30, r25	; 0x1e
     d28:	e2 e0       	ldi	r30, 0x02	; 2
     d2a:	de 12       	cpse	r13, r30
     d2c:	43 c0       	rjmp	.+134    	; 0xdb4 <_ZL5proc1Pv+0x582>
     d2e:	fe 8d       	ldd	r31, Y+30	; 0x1e
     d30:	f3 30       	cpi	r31, 0x03	; 3
     d32:	09 f0       	breq	.+2      	; 0xd36 <_ZL5proc1Pv+0x504>
     d34:	ac c0       	rjmp	.+344    	; 0xe8e <_ZL5proc1Pv+0x65c>
     d36:	c2 01       	movw	r24, r4
     d38:	90 db       	rcall	.-2272   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     d3a:	85 30       	cpi	r24, 0x05	; 5
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <_ZL5proc1Pv+0x50e>
     d3e:	a2 c0       	rjmp	.+324    	; 0xe84 <_ZL5proc1Pv+0x652>
     d40:	8e 01       	movw	r16, r28
     d42:	0d 5f       	subi	r16, 0xFD	; 253
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	c2 01       	movw	r24, r4
     d48:	5c db       	rcall	.-2376   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     d4a:	f8 01       	movw	r30, r16
     d4c:	81 93       	st	Z+, r24
     d4e:	8f 01       	movw	r16, r30
     d50:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d52:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d54:	e8 17       	cp	r30, r24
     d56:	f9 07       	cpc	r31, r25
     d58:	b1 f7       	brne	.-20     	; 0xd46 <_ZL5proc1Pv+0x514>
     d5a:	94 c0       	rjmp	.+296    	; 0xe84 <_ZL5proc1Pv+0x652>
     d5c:	c2 01       	movw	r24, r4
     d5e:	7d db       	rcall	.-2310   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     d60:	86 30       	cpi	r24, 0x06	; 6
     d62:	68 f0       	brcs	.+26     	; 0xd7e <_ZL5proc1Pv+0x54c>
     d64:	8e 01       	movw	r16, r28
     d66:	0d 5f       	subi	r16, 0xFD	; 253
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	c2 01       	movw	r24, r4
     d6c:	4a db       	rcall	.-2412   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     d6e:	f8 01       	movw	r30, r16
     d70:	81 93       	st	Z+, r24
     d72:	8f 01       	movw	r16, r30
     d74:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d76:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d78:	e8 17       	cp	r30, r24
     d7a:	f9 07       	cpc	r31, r25
     d7c:	b1 f7       	brne	.-20     	; 0xd6a <_ZL5proc1Pv+0x538>
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	84 30       	cpi	r24, 0x04	; 4
     d82:	09 f0       	breq	.+2      	; 0xd86 <_ZL5proc1Pv+0x554>
     d84:	88 c0       	rjmp	.+272    	; 0xe96 <_ZL5proc1Pv+0x664>
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	98 2f       	mov	r25, r24
     d8c:	88 27       	eor	r24, r24
     d8e:	2e 81       	ldd	r18, Y+6	; 0x06
     d90:	82 2b       	or	r24, r18
     d92:	f3 01       	movw	r30, r6
     d94:	91 87       	std	Z+9, r25	; 0x09
     d96:	80 87       	std	Z+8, r24	; 0x08
     d98:	64 e6       	ldi	r22, 0x64	; 100
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	0e 94 94 13 	call	0x2728	; 0x2728 <__divmodhi4>
     da0:	1b 01       	movw	r2, r22
     da2:	22 0c       	add	r2, r2
     da4:	33 1c       	adc	r3, r3
     da6:	22 0c       	add	r2, r2
     da8:	33 1c       	adc	r3, r3
     daa:	26 0e       	add	r2, r22
     dac:	37 1e       	adc	r3, r23
     dae:	33 86       	std	Z+11, r3	; 0x0b
     db0:	22 86       	std	Z+10, r2	; 0x0a
     db2:	71 c0       	rjmp	.+226    	; 0xe96 <_ZL5proc1Pv+0x664>
     db4:	f3 e0       	ldi	r31, 0x03	; 3
     db6:	df 12       	cpse	r13, r31
     db8:	41 c0       	rjmp	.+130    	; 0xe3c <_ZL5proc1Pv+0x60a>
     dba:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	f9 f4       	brne	.+62     	; 0xdfe <_ZL5proc1Pv+0x5cc>
     dc0:	c2 01       	movw	r24, r4
     dc2:	4b db       	rcall	.-2410   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     dc4:	85 30       	cpi	r24, 0x05	; 5
     dc6:	d0 f1       	brcs	.+116    	; 0xe3c <_ZL5proc1Pv+0x60a>
     dc8:	8e 01       	movw	r16, r28
     dca:	0d 5f       	subi	r16, 0xFD	; 253
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	c2 01       	movw	r24, r4
     dd0:	18 db       	rcall	.-2512   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     dd2:	f8 01       	movw	r30, r16
     dd4:	81 93       	st	Z+, r24
     dd6:	8f 01       	movw	r16, r30
     dd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dda:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ddc:	e8 17       	cp	r30, r24
     dde:	f9 07       	cpc	r31, r25
     de0:	b1 f7       	brne	.-20     	; 0xdce <_ZL5proc1Pv+0x59c>
     de2:	be 01       	movw	r22, r28
     de4:	6d 5e       	subi	r22, 0xED	; 237
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	38 da       	rcall	.-2960   	; 0x25e <_Z16getFunction3DataPcP7GetData>
     dee:	8e 89       	ldd	r24, Y+22	; 0x16
     df0:	9f 89       	ldd	r25, Y+23	; 0x17
     df2:	f3 01       	movw	r30, r6
     df4:	97 87       	std	Z+15, r25	; 0x0f
     df6:	86 87       	std	Z+14, r24	; 0x0e
     df8:	c1 2c       	mov	r12, r1
     dfa:	d1 2c       	mov	r13, r1
     dfc:	1f c0       	rjmp	.+62     	; 0xe3c <_ZL5proc1Pv+0x60a>
     dfe:	fe 8d       	ldd	r31, Y+30	; 0x1e
     e00:	f6 30       	cpi	r31, 0x06	; 6
     e02:	e1 f4       	brne	.+56     	; 0xe3c <_ZL5proc1Pv+0x60a>
     e04:	c2 01       	movw	r24, r4
     e06:	29 db       	rcall	.-2478   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     e08:	86 30       	cpi	r24, 0x06	; 6
     e0a:	68 f0       	brcs	.+26     	; 0xe26 <_ZL5proc1Pv+0x5f4>
     e0c:	8e 01       	movw	r16, r28
     e0e:	0d 5f       	subi	r16, 0xFD	; 253
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	c2 01       	movw	r24, r4
     e14:	f6 da       	rcall	.-2580   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
     e16:	f8 01       	movw	r30, r16
     e18:	81 93       	st	Z+, r24
     e1a:	8f 01       	movw	r16, r30
     e1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e20:	e8 17       	cp	r30, r24
     e22:	f9 07       	cpc	r31, r25
     e24:	b1 f7       	brne	.-20     	; 0xe12 <_ZL5proc1Pv+0x5e0>
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	98 2f       	mov	r25, r24
     e2c:	88 27       	eor	r24, r24
     e2e:	2e 81       	ldd	r18, Y+6	; 0x06
     e30:	82 2b       	or	r24, r18
     e32:	f3 01       	movw	r30, r6
     e34:	91 8b       	std	Z+17, r25	; 0x11
     e36:	80 8b       	std	Z+16, r24	; 0x10
     e38:	c1 2c       	mov	r12, r1
     e3a:	d1 2c       	mov	r13, r1
     e3c:	8c e2       	ldi	r24, 0x2C	; 44
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskDelay>
     e44:	87 01       	movw	r16, r14
     e46:	45 ce       	rjmp	.-886    	; 0xad2 <_ZL5proc1Pv+0x2a0>
     e48:	f3 01       	movw	r30, r6
     e4a:	04 81       	ldd	r16, Z+4	; 0x04
     e4c:	15 81       	ldd	r17, Z+5	; 0x05
     e4e:	0a 15       	cp	r16, r10
     e50:	1b 05       	cpc	r17, r11
     e52:	d1 f1       	breq	.+116    	; 0xec8 <_ZL5proc1Pv+0x696>
     e54:	58 01       	movw	r10, r16
     e56:	cc 24       	eor	r12, r12
     e58:	c3 94       	inc	r12
     e5a:	7e ce       	rjmp	.-772    	; 0xb58 <_ZL5proc1Pv+0x326>
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	09 f4       	brne	.+2      	; 0xe62 <_ZL5proc1Pv+0x630>
     e60:	49 c0       	rjmp	.+146    	; 0xef4 <_ZL5proc1Pv+0x6c2>
     e62:	0f 2e       	mov	r0, r31
     e64:	f3 e0       	ldi	r31, 0x03	; 3
     e66:	df 2e       	mov	r13, r31
     e68:	f0 2d       	mov	r31, r0
     e6a:	1d cf       	rjmp	.-454    	; 0xca6 <_ZL5proc1Pv+0x474>
     e6c:	dd 24       	eor	r13, r13
     e6e:	d3 94       	inc	r13
     e70:	45 c0       	rjmp	.+138    	; 0xefc <_ZL5proc1Pv+0x6ca>
     e72:	fe 8d       	ldd	r31, Y+30	; 0x1e
     e74:	f6 30       	cpi	r31, 0x06	; 6
     e76:	11 f7       	brne	.-60     	; 0xe3c <_ZL5proc1Pv+0x60a>
     e78:	42 cf       	rjmp	.-380    	; 0xcfe <_ZL5proc1Pv+0x4cc>
     e7a:	86 e0       	ldi	r24, 0x06	; 6
     e7c:	8e 8f       	std	Y+30, r24	; 0x1e
     e7e:	c1 2c       	mov	r12, r1
     e80:	d1 2c       	mov	r13, r1
     e82:	dc cf       	rjmp	.-72     	; 0xe3c <_ZL5proc1Pv+0x60a>
     e84:	93 e0       	ldi	r25, 0x03	; 3
     e86:	9e 8f       	std	Y+30, r25	; 0x1e
     e88:	c1 2c       	mov	r12, r1
     e8a:	d1 2c       	mov	r13, r1
     e8c:	d7 cf       	rjmp	.-82     	; 0xe3c <_ZL5proc1Pv+0x60a>
     e8e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e90:	e6 30       	cpi	r30, 0x06	; 6
     e92:	a1 f6       	brne	.-88     	; 0xe3c <_ZL5proc1Pv+0x60a>
     e94:	63 cf       	rjmp	.-314    	; 0xd5c <_ZL5proc1Pv+0x52a>
     e96:	c1 2c       	mov	r12, r1
     e98:	d1 2c       	mov	r13, r1
     e9a:	d0 cf       	rjmp	.-96     	; 0xe3c <_ZL5proc1Pv+0x60a>
     e9c:	c7 01       	movw	r24, r14
     e9e:	dd da       	rcall	.-2630   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     ea0:	87 30       	cpi	r24, 0x07	; 7
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <_ZL5proc1Pv+0x674>
     ea4:	3c cd       	rjmp	.-1416   	; 0x91e <_ZL5proc1Pv+0xec>
     ea6:	5c cd       	rjmp	.-1352   	; 0x960 <_ZL5proc1Pv+0x12e>
     ea8:	c7 01       	movw	r24, r14
     eaa:	d7 da       	rcall	.-2642   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     eac:	59 cd       	rjmp	.-1358   	; 0x960 <_ZL5proc1Pv+0x12e>
     eae:	c7 01       	movw	r24, r14
     eb0:	d4 da       	rcall	.-2648   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     eb2:	65 2c       	mov	r6, r5
     eb4:	74 2c       	mov	r7, r4
     eb6:	c6 cd       	rjmp	.-1140   	; 0xa44 <_ZL5proc1Pv+0x212>
     eb8:	c7 01       	movw	r24, r14
     eba:	cf da       	rcall	.-2658   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
     ebc:	87 30       	cpi	r24, 0x07	; 7
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <_ZL5proc1Pv+0x690>
     ec0:	96 cd       	rjmp	.-1236   	; 0x9ee <_ZL5proc1Pv+0x1bc>
     ec2:	69 2c       	mov	r6, r9
     ec4:	74 2c       	mov	r7, r4
     ec6:	be cd       	rjmp	.-1156   	; 0xa44 <_ZL5proc1Pv+0x212>
     ec8:	0f 2e       	mov	r0, r31
     eca:	f5 e0       	ldi	r31, 0x05	; 5
     ecc:	cf 2e       	mov	r12, r31
     ece:	f0 2d       	mov	r31, r0
     ed0:	43 ce       	rjmp	.-890    	; 0xb58 <_ZL5proc1Pv+0x326>
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	09 f4       	brne	.+2      	; 0xed8 <_ZL5proc1Pv+0x6a6>
     ed6:	f1 ce       	rjmp	.-542    	; 0xcba <_ZL5proc1Pv+0x488>
     ed8:	dd 24       	eor	r13, r13
     eda:	d3 94       	inc	r13
     edc:	e4 ce       	rjmp	.-568    	; 0xca6 <_ZL5proc1Pv+0x474>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	09 f0       	breq	.+2      	; 0xee4 <_ZL5proc1Pv+0x6b2>
     ee2:	e1 ce       	rjmp	.-574    	; 0xca6 <_ZL5proc1Pv+0x474>
     ee4:	1f cf       	rjmp	.-450    	; 0xd24 <_ZL5proc1Pv+0x4f2>
     ee6:	f1 e0       	ldi	r31, 0x01	; 1
     ee8:	df 16       	cp	r13, r31
     eea:	09 f4       	brne	.+2      	; 0xeee <_ZL5proc1Pv+0x6bc>
     eec:	08 cf       	rjmp	.-496    	; 0xcfe <_ZL5proc1Pv+0x4cc>
     eee:	86 e0       	ldi	r24, 0x06	; 6
     ef0:	8e 8f       	std	Y+30, r24	; 0x1e
     ef2:	1a cf       	rjmp	.-460    	; 0xd28 <_ZL5proc1Pv+0x4f6>
     ef4:	0f 2e       	mov	r0, r31
     ef6:	f3 e0       	ldi	r31, 0x03	; 3
     ef8:	df 2e       	mov	r13, r31
     efa:	f0 2d       	mov	r31, r0
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	d9 16       	cp	r13, r25
     f00:	09 f4       	brne	.+2      	; 0xf04 <_ZL5proc1Pv+0x6d2>
     f02:	19 cf       	rjmp	.-462    	; 0xd36 <_ZL5proc1Pv+0x504>
     f04:	e3 e0       	ldi	r30, 0x03	; 3
     f06:	ee 8f       	std	Y+30, r30	; 0x1e
     f08:	55 cf       	rjmp	.-342    	; 0xdb4 <_ZL5proc1Pv+0x582>
     f0a:	83 30       	cpi	r24, 0x03	; 3
     f0c:	09 f4       	brne	.+2      	; 0xf10 <_ZL5proc1Pv+0x6de>
     f0e:	13 cf       	rjmp	.-474    	; 0xd36 <_ZL5proc1Pv+0x504>
     f10:	d9 2c       	mov	r13, r9
     f12:	c9 ce       	rjmp	.-622    	; 0xca6 <_ZL5proc1Pv+0x474>

00000f14 <_Z8Uart_ISR8Dev_typej>:
     f14:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <DataStruct>
     f18:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <DataStruct+0x1>
     f1c:	11 ca       	rjmp	.-3038   	; 0x340 <_ZN12SerialBuffer11SerialstoreEc>
     f1e:	08 95       	ret

00000f20 <_Z9RS485_ISR8Dev_typej>:
     f20:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <DataStruct+0x2>
     f24:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <DataStruct+0x3>
     f28:	0b ca       	rjmp	.-3050   	; 0x340 <_ZN12SerialBuffer11SerialstoreEc>
     f2a:	08 95       	ret

00000f2c <_ZL5proc2Pv>:
     f2c:	80 ee       	ldi	r24, 0xE0	; 224
     f2e:	84 bb       	out	0x14, r24	; 20
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	85 bb       	out	0x15, r24	; 21
     f34:	10 bc       	out	0x20, r1	; 32
     f36:	e4 e7       	ldi	r30, 0x74	; 116
     f38:	f1 e0       	ldi	r31, 0x01	; 1
     f3a:	98 9b       	sbis	0x13, 0	; 19
     f3c:	05 c0       	rjmp	.+10     	; 0xf48 <_ZL5proc2Pv+0x1c>
     f3e:	80 81       	ld	r24, Z
     f40:	80 68       	ori	r24, 0x80	; 128
     f42:	80 83       	st	Z, r24
     f44:	ad 9a       	sbi	0x15, 5	; 21
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <_ZL5proc2Pv+0x26>
     f48:	80 81       	ld	r24, Z
     f4a:	8f 77       	andi	r24, 0x7F	; 127
     f4c:	80 83       	st	Z, r24
     f4e:	ad 98       	cbi	0x15, 5	; 21
     f50:	ae 98       	cbi	0x15, 6	; 21
     f52:	99 9b       	sbis	0x13, 1	; 19
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <_ZL5proc2Pv+0x32>
     f56:	81 81       	ldd	r24, Z+1	; 0x01
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	81 83       	std	Z+1, r24	; 0x01
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <_ZL5proc2Pv+0x38>
     f5e:	81 81       	ldd	r24, Z+1	; 0x01
     f60:	8e 7f       	andi	r24, 0xFE	; 254
     f62:	81 83       	std	Z+1, r24	; 0x01
     f64:	9a 9b       	sbis	0x13, 2	; 19
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <_ZL5proc2Pv+0x44>
     f68:	81 81       	ldd	r24, Z+1	; 0x01
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	81 83       	std	Z+1, r24	; 0x01
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <_ZL5proc2Pv+0x4a>
     f70:	81 81       	ldd	r24, Z+1	; 0x01
     f72:	8d 7f       	andi	r24, 0xFD	; 253
     f74:	81 83       	std	Z+1, r24	; 0x01
     f76:	9b 9b       	sbis	0x13, 3	; 19
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <_ZL5proc2Pv+0x56>
     f7a:	81 81       	ldd	r24, Z+1	; 0x01
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	81 83       	std	Z+1, r24	; 0x01
     f80:	dc cf       	rjmp	.-72     	; 0xf3a <_ZL5proc2Pv+0xe>
     f82:	81 81       	ldd	r24, Z+1	; 0x01
     f84:	8b 7f       	andi	r24, 0xFB	; 251
     f86:	81 83       	std	Z+1, r24	; 0x01
     f88:	d8 cf       	rjmp	.-80     	; 0xf3a <_ZL5proc2Pv+0xe>

00000f8a <_Z8Init_Devv>:
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a8 da       	rcall	.-2736   	; 0x4e4 <_ZN11Dev_ManagernwEj>
     f94:	ec 01       	movw	r28, r24
     f96:	77 da       	rcall	.-2834   	; 0x486 <_ZN11Dev_ManagerC1Ev>
     f98:	d0 93 a9 01 	sts	0x01A9, r29	; 0x8001a9 <dev+0x1>
     f9c:	c0 93 a8 01 	sts	0x01A8, r28	; 0x8001a8 <dev>
     fa0:	86 e0       	ldi	r24, 0x06	; 6
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	f6 db       	rcall	.-2068   	; 0x792 <_ZN10UartDrivernwEj>
     fa6:	ec 01       	movw	r28, r24
     fa8:	e4 db       	rcall	.-2104   	; 0x772 <_ZN10UartDriverC1Ev>
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	be 01       	movw	r22, r28
     fae:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <dev>
     fb2:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <dev+0x1>
     fb6:	8d da       	rcall	.-2790   	; 0x4d2 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
     fb8:	86 e0       	ldi	r24, 0x06	; 6
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	6d db       	rcall	.-2342   	; 0x698 <_ZN11RS485DrivernwEj>
     fbe:	ec 01       	movw	r28, r24
     fc0:	5b db       	rcall	.-2378   	; 0x678 <_ZN11RS485DriverC1Ev>
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	be 01       	movw	r22, r28
     fc6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <dev>
     fca:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <dev+0x1>
     fce:	81 da       	rcall	.-2814   	; 0x4d2 <_ZN11Dev_Manager12Register_DevEP20DeviceDriveInterFace8Dev_type>
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <dev>
     fd6:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <dev+0x1>
     fda:	9a da       	rcall	.-2764   	; 0x510 <_ZN11Dev_Manager11Device_InitE8Dev_type>
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <dev>
     fe2:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <dev+0x1>
     fe6:	94 da       	rcall	.-2776   	; 0x510 <_ZN11Dev_Manager11Device_InitE8Dev_type>
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <main>:
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	f8 94       	cli
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    1004:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1008:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    100c:	88 9a       	sbi	0x11, 0	; 17
    100e:	82 b9       	out	0x02, r24	; 2
    1010:	13 b8       	out	0x03, r1	; 3
    1012:	87 bb       	out	0x17, r24	; 23
    1014:	88 bb       	out	0x18, r24	; 24
    1016:	b9 df       	rcall	.-142    	; 0xf8a <_Z8Init_Devv>
    1018:	4a e8       	ldi	r20, 0x8A	; 138
    101a:	57 e0       	ldi	r21, 0x07	; 7
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <dev>
    1022:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <dev+0x1>
    1026:	86 da       	rcall	.-2804   	; 0x534 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
    1028:	40 e9       	ldi	r20, 0x90	; 144
    102a:	57 e0       	ldi	r21, 0x07	; 7
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <dev>
    1032:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <dev+0x1>
    1036:	7e da       	rcall	.-2820   	; 0x534 <_ZN11Dev_Manager11Open_HandleE8Dev_typePFvS0_jE>
    1038:	88 e8       	ldi	r24, 0x88	; 136
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	7e d9       	rcall	.-3332   	; 0x33a <_ZN12SerialBuffernwEj>
    103e:	6c 01       	movw	r12, r24
    1040:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <dev>
    1044:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <dev+0x1>
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	52 d9       	rcall	.-3420   	; 0x2f0 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>
    104c:	88 e8       	ldi	r24, 0x88	; 136
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	74 d9       	rcall	.-3352   	; 0x33a <_ZN12SerialBuffernwEj>
    1052:	ec 01       	movw	r28, r24
    1054:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <dev>
    1058:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <dev+0x1>
    105c:	41 e0       	ldi	r20, 0x01	; 1
    105e:	48 d9       	rcall	.-3440   	; 0x2f0 <_ZN12SerialBufferC1EP11Dev_Manager8Dev_type>
    1060:	e4 ea       	ldi	r30, 0xA4	; 164
    1062:	f1 e0       	ldi	r31, 0x01	; 1
    1064:	d1 82       	std	Z+1, r13	; 0x01
    1066:	c0 82       	st	Z, r12
    1068:	d3 83       	std	Z+3, r29	; 0x03
    106a:	c2 83       	std	Z+2, r28	; 0x02
    106c:	78 94       	sei
    106e:	9f e0       	ldi	r25, 0x0F	; 15
    1070:	88 e1       	ldi	r24, 0x18	; 24
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	a8 95       	wdr
    1078:	81 bd       	out	0x21, r24	; 33
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	91 bd       	out	0x21, r25	; 33
    107e:	e1 2c       	mov	r14, r1
    1080:	f1 2c       	mov	r15, r1
    1082:	02 e0       	ldi	r16, 0x02	; 2
    1084:	96 01       	movw	r18, r12
    1086:	40 ef       	ldi	r20, 0xF0	; 240
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	68 e1       	ldi	r22, 0x18	; 24
    108c:	71 e0       	ldi	r23, 0x01	; 1
    108e:	8f ec       	ldi	r24, 0xCF	; 207
    1090:	98 e0       	ldi	r25, 0x08	; 8
    1092:	d5 d6       	rcall	.+3498   	; 0x1e3e <xTaskCreate>
    1094:	9e 01       	movw	r18, r28
    1096:	40 ef       	ldi	r20, 0xF0	; 240
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	6e e1       	ldi	r22, 0x1E	; 30
    109c:	71 e0       	ldi	r23, 0x01	; 1
    109e:	89 e1       	ldi	r24, 0x19	; 25
    10a0:	94 e0       	ldi	r25, 0x04	; 4
    10a2:	cd d6       	rcall	.+3482   	; 0x1e3e <xTaskCreate>
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 ef       	ldi	r20, 0xF0	; 240
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	64 e2       	ldi	r22, 0x24	; 36
    10ae:	71 e0       	ldi	r23, 0x01	; 1
    10b0:	86 e9       	ldi	r24, 0x96	; 150
    10b2:	97 e0       	ldi	r25, 0x07	; 7
    10b4:	c4 d6       	rcall	.+3464   	; 0x1e3e <xTaskCreate>
    10b6:	c1 d7       	rcall	.+3970   	; 0x203a <vTaskStartScheduler>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	08 95       	ret

000010cc <_Z17func05_output_ctlPci>:
    10cc:	ab 01       	movw	r20, r22
    10ce:	42 50       	subi	r20, 0x02	; 2
    10d0:	51 09       	sbc	r21, r1
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	43 30       	cpi	r20, 0x03	; 3
    10d6:	51 05       	cpc	r21, r1
    10d8:	08 f4       	brcc	.+2      	; 0x10dc <_Z17func05_output_ctlPci+0x10>
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	fc 01       	movw	r30, r24
    10de:	e6 0f       	add	r30, r22
    10e0:	f7 1f       	adc	r31, r23
    10e2:	80 81       	ld	r24, Z
    10e4:	88 23       	and	r24, r24
    10e6:	09 f4       	brne	.+2      	; 0x10ea <_Z17func05_output_ctlPci+0x1e>
    10e8:	3f c0       	rjmp	.+126    	; 0x1168 <__stack+0x69>
    10ea:	e4 e7       	ldi	r30, 0x74	; 116
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	06 2e       	mov	r0, r22
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <_Z17func05_output_ctlPci+0x2e>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <_Z17func05_output_ctlPci+0x2a>
    10fe:	90 81       	ld	r25, Z
    1100:	89 2b       	or	r24, r25
    1102:	80 83       	st	Z, r24
    1104:	22 23       	and	r18, r18
    1106:	61 f0       	breq	.+24     	; 0x1120 <__stack+0x21>
    1108:	28 b3       	in	r18, 0x18	; 24
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	06 2e       	mov	r0, r22
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <__stack+0x17>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <__stack+0x13>
    111a:	80 95       	com	r24
    111c:	82 23       	and	r24, r18
    111e:	88 bb       	out	0x18, r24	; 24
    1120:	62 30       	cpi	r22, 0x02	; 2
    1122:	71 05       	cpc	r23, r1
    1124:	39 f4       	brne	.+14     	; 0x1134 <__stack+0x35>
    1126:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <inverter>
    112a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <mem4+0x7>
    112e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <mem4+0x6>
    1132:	08 95       	ret
    1134:	63 30       	cpi	r22, 0x03	; 3
    1136:	71 05       	cpc	r23, r1
    1138:	51 f4       	brne	.+20     	; 0x114e <__stack+0x4f>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <inverter>
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <mem4+0x7>
    1148:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <mem4+0x6>
    114c:	08 95       	ret
    114e:	64 30       	cpi	r22, 0x04	; 4
    1150:	71 05       	cpc	r23, r1
    1152:	21 f5       	brne	.+72     	; 0x119c <__stack+0x9d>
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <inverter>
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <mem4+0x7>
    1162:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <mem4+0x6>
    1166:	08 95       	ret
    1168:	e4 e7       	ldi	r30, 0x74	; 116
    116a:	f1 e0       	ldi	r31, 0x01	; 1
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	06 2e       	mov	r0, r22
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <__stack+0x79>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <__stack+0x75>
    117c:	80 95       	com	r24
    117e:	90 81       	ld	r25, Z
    1180:	89 23       	and	r24, r25
    1182:	80 83       	st	Z, r24
    1184:	22 23       	and	r18, r18
    1186:	51 f0       	breq	.+20     	; 0x119c <__stack+0x9d>
    1188:	28 b3       	in	r18, 0x18	; 24
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <__stack+0x95>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	6a 95       	dec	r22
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <__stack+0x91>
    1198:	82 2b       	or	r24, r18
    119a:	88 bb       	out	0x18, r24	; 24
    119c:	08 95       	ret

0000119e <_ZL4procPv>:
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	2a 97       	sbiw	r28, 0x0a	; 10
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	7c 01       	movw	r14, r24
    11b4:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <mem1>
    11b8:	84 ef       	ldi	r24, 0xF4	; 244
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <mem4+0x1>
    11c0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <mem4>
    11c4:	b1 2c       	mov	r11, r1
    11c6:	cc 24       	eor	r12, r12
    11c8:	c3 94       	inc	r12
    11ca:	2e 01       	movw	r4, r28
    11cc:	8c e0       	ldi	r24, 0x0C	; 12
    11ce:	48 0e       	add	r4, r24
    11d0:	51 1c       	adc	r5, r1
    11d2:	05 e6       	ldi	r16, 0x65	; 101
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	dd 24       	eor	r13, r13
    11d8:	da 94       	dec	r13
    11da:	7d 2c       	mov	r7, r13
    11dc:	31 2c       	mov	r3, r1
    11de:	0f 2e       	mov	r0, r31
    11e0:	f5 e0       	ldi	r31, 0x05	; 5
    11e2:	2f 2e       	mov	r2, r31
    11e4:	f0 2d       	mov	r31, r0
    11e6:	4e 01       	movw	r8, r28
    11e8:	99 e0       	ldi	r25, 0x09	; 9
    11ea:	89 0e       	add	r8, r25
    11ec:	91 1c       	adc	r9, r1
    11ee:	68 94       	set
    11f0:	66 24       	eor	r6, r6
    11f2:	62 f8       	bld	r6, 2
    11f4:	b1 10       	cpse	r11, r1
    11f6:	43 c0       	rjmp	.+134    	; 0x127e <_ZL4procPv+0xe0>
    11f8:	c7 01       	movw	r24, r14
    11fa:	2f d9       	rcall	.-3490   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <_ZL4procPv+0x64>
    1200:	03 c1       	rjmp	.+518    	; 0x1408 <_ZL4procPv+0x26a>
    1202:	f8 01       	movw	r30, r16
    1204:	d0 82       	st	Z, r13
    1206:	c7 01       	movw	r24, r14
    1208:	fc d8       	rcall	.-3592   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	f8 01       	movw	r30, r16
    120e:	10 82       	st	Z, r1
    1210:	d0 82       	st	Z, r13
    1212:	c7 01       	movw	r24, r14
    1214:	f6 d8       	rcall	.-3604   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
    1216:	8a 83       	std	Y+2, r24	; 0x02
    1218:	f8 01       	movw	r30, r16
    121a:	10 82       	st	Z, r1
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	69 f0       	breq	.+26     	; 0x123c <_ZL4procPv+0x9e>
    1222:	c0 92 37 01 	sts	0x0137, r12	; 0x800137 <buffer_flag>
    1226:	c3 b8       	out	0x03, r12	; 3
    1228:	ec e4       	ldi	r30, 0x4C	; 76
    122a:	f1 e0       	ldi	r31, 0x01	; 1
    122c:	82 85       	ldd	r24, Z+10	; 0x0a
    122e:	93 85       	ldd	r25, Z+11	; 0x0b
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	93 87       	std	Z+11, r25	; 0x0b
    1234:	82 87       	std	Z+10, r24	; 0x0a
    1236:	c7 01       	movw	r24, r14
    1238:	1b d9       	rcall	.-3530   	; 0x470 <_ZN12SerialBuffer11SerialFlushEv>
    123a:	13 b8       	out	0x03, r1	; 3
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	19 f1       	breq	.+70     	; 0x1288 <_ZL4procPv+0xea>
    1242:	84 30       	cpi	r24, 0x04	; 4
    1244:	09 f4       	brne	.+2      	; 0x1248 <_ZL4procPv+0xaa>
    1246:	48 c0       	rjmp	.+144    	; 0x12d8 <_ZL4procPv+0x13a>
    1248:	85 30       	cpi	r24, 0x05	; 5
    124a:	09 f4       	brne	.+2      	; 0x124e <_ZL4procPv+0xb0>
    124c:	6d c0       	rjmp	.+218    	; 0x1328 <_ZL4procPv+0x18a>
    124e:	80 31       	cpi	r24, 0x10	; 16
    1250:	09 f4       	brne	.+2      	; 0x1254 <_ZL4procPv+0xb6>
    1252:	a0 c0       	rjmp	.+320    	; 0x1394 <_ZL4procPv+0x1f6>
    1254:	2c 2d       	mov	r18, r12
    1256:	4c 2d       	mov	r20, r12
    1258:	6e e7       	ldi	r22, 0x7E	; 126
    125a:	71 e0       	ldi	r23, 0x01	; 1
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z16GetExceptionCodePcP16RspExceptionCodecc>
    1264:	45 e0       	ldi	r20, 0x05	; 5
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	6e e7       	ldi	r22, 0x7E	; 126
    126a:	71 e0       	ldi	r23, 0x01	; 1
    126c:	c7 01       	movw	r24, r14
    126e:	8d d8       	rcall	.-3814   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
    1270:	c0 92 37 01 	sts	0x0137, r12	; 0x800137 <buffer_flag>
    1274:	63 b8       	out	0x03, r6	; 3
    1276:	c7 01       	movw	r24, r14
    1278:	fb d8       	rcall	.-3594   	; 0x470 <_ZN12SerialBuffer11SerialFlushEv>
    127a:	13 b8       	out	0x03, r1	; 3
    127c:	c5 c0       	rjmp	.+394    	; 0x1408 <_ZL4procPv+0x26a>
    127e:	f1 e0       	ldi	r31, 0x01	; 1
    1280:	bf 12       	cpse	r11, r31
    1282:	c2 c0       	rjmp	.+388    	; 0x1408 <_ZL4procPv+0x26a>
    1284:	af 12       	cpse	r10, r31
    1286:	25 c0       	rjmp	.+74     	; 0x12d2 <_ZL4procPv+0x134>
    1288:	c7 01       	movw	r24, r14
    128a:	e7 d8       	rcall	.-3634   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
    128c:	86 30       	cpi	r24, 0x06	; 6
    128e:	08 f4       	brcc	.+2      	; 0x1292 <_ZL4procPv+0xf4>
    1290:	ae c0       	rjmp	.+348    	; 0x13ee <_ZL4procPv+0x250>
    1292:	ce 01       	movw	r24, r28
    1294:	03 96       	adiw	r24, 0x03	; 3
    1296:	5c 01       	movw	r10, r24
    1298:	f8 01       	movw	r30, r16
    129a:	70 82       	st	Z, r7
    129c:	c7 01       	movw	r24, r14
    129e:	b1 d8       	rcall	.-3742   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
    12a0:	f5 01       	movw	r30, r10
    12a2:	81 93       	st	Z+, r24
    12a4:	5f 01       	movw	r10, r30
    12a6:	f8 01       	movw	r30, r16
    12a8:	10 82       	st	Z, r1
    12aa:	a8 14       	cp	r10, r8
    12ac:	b9 04       	cpc	r11, r9
    12ae:	a1 f7       	brne	.-24     	; 0x1298 <_ZL4procPv+0xfa>
    12b0:	44 e7       	ldi	r20, 0x74	; 116
    12b2:	51 e0       	ldi	r21, 0x01	; 1
    12b4:	6d e9       	ldi	r22, 0x9D	; 157
    12b6:	71 e0       	ldi	r23, 0x01	; 1
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 83 00 	call	0x106	; 0x106 <_Z13GetFunc01DataPcP17GetFunctionCode01S_>
    12c0:	47 e0       	ldi	r20, 0x07	; 7
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	6d e9       	ldi	r22, 0x9D	; 157
    12c6:	71 e0       	ldi	r23, 0x01	; 1
    12c8:	c7 01       	movw	r24, r14
    12ca:	5f d8       	rcall	.-3906   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
    12cc:	ac 2c       	mov	r10, r12
    12ce:	b3 2c       	mov	r11, r3
    12d0:	9b c0       	rjmp	.+310    	; 0x1408 <_ZL4procPv+0x26a>
    12d2:	f4 e0       	ldi	r31, 0x04	; 4
    12d4:	af 12       	cpse	r10, r31
    12d6:	25 c0       	rjmp	.+74     	; 0x1322 <_ZL4procPv+0x184>
    12d8:	c7 01       	movw	r24, r14
    12da:	bf d8       	rcall	.-3714   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
    12dc:	86 30       	cpi	r24, 0x06	; 6
    12de:	08 f4       	brcc	.+2      	; 0x12e2 <_ZL4procPv+0x144>
    12e0:	89 c0       	rjmp	.+274    	; 0x13f4 <_ZL4procPv+0x256>
    12e2:	ce 01       	movw	r24, r28
    12e4:	03 96       	adiw	r24, 0x03	; 3
    12e6:	5c 01       	movw	r10, r24
    12e8:	f8 01       	movw	r30, r16
    12ea:	70 82       	st	Z, r7
    12ec:	c7 01       	movw	r24, r14
    12ee:	89 d8       	rcall	.-3822   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
    12f0:	f5 01       	movw	r30, r10
    12f2:	81 93       	st	Z+, r24
    12f4:	5f 01       	movw	r10, r30
    12f6:	f8 01       	movw	r30, r16
    12f8:	10 82       	st	Z, r1
    12fa:	a8 14       	cp	r10, r8
    12fc:	b9 04       	cpc	r11, r9
    12fe:	a1 f7       	brne	.-24     	; 0x12e8 <_ZL4procPv+0x14a>
    1300:	4c e4       	ldi	r20, 0x4C	; 76
    1302:	51 e0       	ldi	r21, 0x01	; 1
    1304:	6e e8       	ldi	r22, 0x8E	; 142
    1306:	71 e0       	ldi	r23, 0x01	; 1
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	0e 94 a2 00 	call	0x144	; 0x144 <_Z13GetFunc04DataPcP17GetFunctionCode04Pi>
    1310:	47 e0       	ldi	r20, 0x07	; 7
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	6e e8       	ldi	r22, 0x8E	; 142
    1316:	71 e0       	ldi	r23, 0x01	; 1
    1318:	c7 01       	movw	r24, r14
    131a:	37 d8       	rcall	.-3986   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
    131c:	a6 2c       	mov	r10, r6
    131e:	b3 2c       	mov	r11, r3
    1320:	73 c0       	rjmp	.+230    	; 0x1408 <_ZL4procPv+0x26a>
    1322:	f5 e0       	ldi	r31, 0x05	; 5
    1324:	af 12       	cpse	r10, r31
    1326:	33 c0       	rjmp	.+102    	; 0x138e <_ZL4procPv+0x1f0>
    1328:	c7 01       	movw	r24, r14
    132a:	97 d8       	rcall	.-3794   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
    132c:	86 30       	cpi	r24, 0x06	; 6
    132e:	08 f4       	brcc	.+2      	; 0x1332 <_ZL4procPv+0x194>
    1330:	64 c0       	rjmp	.+200    	; 0x13fa <_ZL4procPv+0x25c>
    1332:	ce 01       	movw	r24, r28
    1334:	03 96       	adiw	r24, 0x03	; 3
    1336:	5c 01       	movw	r10, r24
    1338:	f8 01       	movw	r30, r16
    133a:	70 82       	st	Z, r7
    133c:	c7 01       	movw	r24, r14
    133e:	61 d8       	rcall	.-3902   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
    1340:	f5 01       	movw	r30, r10
    1342:	81 93       	st	Z+, r24
    1344:	5f 01       	movw	r10, r30
    1346:	f8 01       	movw	r30, r16
    1348:	10 82       	st	Z, r1
    134a:	a8 14       	cp	r10, r8
    134c:	b9 04       	cpc	r11, r9
    134e:	a1 f7       	brne	.-24     	; 0x1338 <_ZL4procPv+0x19a>
    1350:	65 e9       	ldi	r22, 0x95	; 149
    1352:	71 e0       	ldi	r23, 0x01	; 1
    1354:	ce 01       	movw	r24, r28
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	0e 94 c3 00 	call	0x186	; 0x186 <_Z13GetFunc05DataPcP17GetFunctionCode05>
    135c:	e5 e9       	ldi	r30, 0x95	; 149
    135e:	f1 e0       	ldi	r31, 0x01	; 1
    1360:	62 81       	ldd	r22, Z+2	; 0x02
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	76 2f       	mov	r23, r22
    1366:	66 27       	eor	r22, r22
    1368:	83 81       	ldd	r24, Z+3	; 0x03
    136a:	68 2b       	or	r22, r24
    136c:	db 01       	movw	r26, r22
    136e:	a8 5c       	subi	r26, 0xC8	; 200
    1370:	be 4f       	sbci	r27, 0xFE	; 254
    1372:	84 81       	ldd	r24, Z+4	; 0x04
    1374:	8c 93       	st	X, r24
    1376:	88 e3       	ldi	r24, 0x38	; 56
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	a8 de       	rcall	.-688    	; 0x10cc <_Z17func05_output_ctlPci>
    137c:	48 e0       	ldi	r20, 0x08	; 8
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	65 e9       	ldi	r22, 0x95	; 149
    1382:	71 e0       	ldi	r23, 0x01	; 1
    1384:	c7 01       	movw	r24, r14
    1386:	01 d8       	rcall	.-4094   	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
    1388:	a2 2c       	mov	r10, r2
    138a:	b3 2c       	mov	r11, r3
    138c:	3d c0       	rjmp	.+122    	; 0x1408 <_ZL4procPv+0x26a>
    138e:	f0 e1       	ldi	r31, 0x10	; 16
    1390:	af 12       	cpse	r10, r31
    1392:	3a c0       	rjmp	.+116    	; 0x1408 <_ZL4procPv+0x26a>
    1394:	c7 01       	movw	r24, r14
    1396:	61 d8       	rcall	.-3902   	; 0x45a <_ZN12SerialBuffer15SerialAvailableEv>
    1398:	89 30       	cpi	r24, 0x09	; 9
    139a:	90 f1       	brcs	.+100    	; 0x1400 <_ZL4procPv+0x262>
    139c:	ce 01       	movw	r24, r28
    139e:	03 96       	adiw	r24, 0x03	; 3
    13a0:	5c 01       	movw	r10, r24
    13a2:	f8 01       	movw	r30, r16
    13a4:	70 82       	st	Z, r7
    13a6:	c7 01       	movw	r24, r14
    13a8:	2c d8       	rcall	.-4008   	; 0x402 <_ZN12SerialBuffer10SerialReadEv>
    13aa:	f5 01       	movw	r30, r10
    13ac:	81 93       	st	Z+, r24
    13ae:	5f 01       	movw	r10, r30
    13b0:	f8 01       	movw	r30, r16
    13b2:	10 82       	st	Z, r1
    13b4:	a4 14       	cp	r10, r4
    13b6:	b5 04       	cpc	r11, r5
    13b8:	a1 f7       	brne	.-24     	; 0x13a2 <_ZL4procPv+0x204>
    13ba:	4c e4       	ldi	r20, 0x4C	; 76
    13bc:	51 e0       	ldi	r21, 0x01	; 1
    13be:	63 e8       	ldi	r22, 0x83	; 131
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	ce 01       	movw	r24, r28
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z13GetFucc10DataPcP17GetFunctionCode10Pi>
    13ca:	66 e7       	ldi	r22, 0x76	; 118
    13cc:	71 e0       	ldi	r23, 0x01	; 1
    13ce:	ce 01       	movw	r24, r28
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	0e 94 06 01 	call	0x20c	; 0x20c <_Z18ResponseFucc10DataPcP22ResponseFunctionCode10>
    13d6:	48 e0       	ldi	r20, 0x08	; 8
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	66 e7       	ldi	r22, 0x76	; 118
    13dc:	71 e0       	ldi	r23, 0x01	; 1
    13de:	c7 01       	movw	r24, r14
    13e0:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN12SerialBuffer11SerialWriteEPKci>
    13e4:	68 94       	set
    13e6:	aa 24       	eor	r10, r10
    13e8:	a4 f8       	bld	r10, 4
    13ea:	b3 2c       	mov	r11, r3
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <_ZL4procPv+0x26a>
    13ee:	ac 2c       	mov	r10, r12
    13f0:	bc 2c       	mov	r11, r12
    13f2:	0a c0       	rjmp	.+20     	; 0x1408 <_ZL4procPv+0x26a>
    13f4:	a6 2c       	mov	r10, r6
    13f6:	bc 2c       	mov	r11, r12
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <_ZL4procPv+0x26a>
    13fa:	a2 2c       	mov	r10, r2
    13fc:	bc 2c       	mov	r11, r12
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <_ZL4procPv+0x26a>
    1400:	68 94       	set
    1402:	aa 24       	eor	r10, r10
    1404:	a4 f8       	bld	r10, 4
    1406:	bc 2c       	mov	r11, r12
    1408:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <mem4+0x14>
    140c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <mem4+0x15>
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	09 f0       	breq	.+2      	; 0x1416 <_ZL4procPv+0x278>
    1414:	ef ce       	rjmp	.-546    	; 0x11f4 <_ZL4procPv+0x56>
    1416:	a8 95       	wdr
    1418:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <mem4+0x15>
    141c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <mem4+0x14>
    1420:	e9 ce       	rjmp	.-558    	; 0x11f4 <_ZL4procPv+0x56>

00001422 <vApplicationStackOverflowHook>:
}*/



void vApplicationStackOverflowHook( TaskHandle_t xTask, signed char *pcTaskName )
{
    1422:	08 95       	ret

00001424 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    142a:	2f d6       	rcall	.+3166   	; 0x208a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    142c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <pucAlignedHeap.1950>
    1430:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <pucAlignedHeap.1950+0x1>
    1434:	89 2b       	or	r24, r25
    1436:	31 f4       	brne	.+12     	; 0x1444 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1438:	8f ea       	ldi	r24, 0xAF	; 175
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <pucAlignedHeap.1950+0x1>
    1440:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <pucAlignedHeap.1950>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1444:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <xNextFreeByte>
    1448:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <xNextFreeByte+0x1>
    144c:	ce 01       	movw	r24, r28
    144e:	82 0f       	add	r24, r18
    1450:	93 1f       	adc	r25, r19
    1452:	8f 3c       	cpi	r24, 0xCF	; 207
    1454:	47 e0       	ldi	r20, 0x07	; 7
    1456:	94 07       	cpc	r25, r20
    1458:	70 f4       	brcc	.+28     	; 0x1476 <pvPortMalloc+0x52>
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	70 f4       	brcc	.+28     	; 0x147c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1460:	c0 91 aa 01 	lds	r28, 0x01AA	; 0x8001aa <pucAlignedHeap.1950>
    1464:	d0 91 ab 01 	lds	r29, 0x01AB	; 0x8001ab <pucAlignedHeap.1950+0x1>
    1468:	c2 0f       	add	r28, r18
    146a:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    146c:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <xNextFreeByte+0x1>
    1470:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <xNextFreeByte>
    1474:	05 c0       	rjmp	.+10     	; 0x1480 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1476:	c0 e0       	ldi	r28, 0x00	; 0
    1478:	d0 e0       	ldi	r29, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <pvPortMalloc+0x5c>
    147c:	c0 e0       	ldi	r28, 0x00	; 0
    147e:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1480:	c1 d6       	rcall	.+3458   	; 0x2204 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1482:	ce 01       	movw	r24, r28
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    148a:	08 95       	ret

0000148c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    148c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    148e:	03 96       	adiw	r24, 0x03	; 3
    1490:	92 83       	std	Z+2, r25	; 0x02
    1492:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1494:	2f ef       	ldi	r18, 0xFF	; 255
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	34 83       	std	Z+4, r19	; 0x04
    149a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    149c:	96 83       	std	Z+6, r25	; 0x06
    149e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    14a0:	90 87       	std	Z+8, r25	; 0x08
    14a2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    14a4:	10 82       	st	Z, r1
    14a6:	08 95       	ret

000014a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    14a8:	fc 01       	movw	r30, r24
    14aa:	11 86       	std	Z+9, r1	; 0x09
    14ac:	10 86       	std	Z+8, r1	; 0x08
    14ae:	08 95       	ret

000014b0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	9c 01       	movw	r18, r24
    14b6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    14b8:	dc 01       	movw	r26, r24
    14ba:	11 96       	adiw	r26, 0x01	; 1
    14bc:	cd 91       	ld	r28, X+
    14be:	dc 91       	ld	r29, X
    14c0:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14c2:	d3 83       	std	Z+3, r29	; 0x03
    14c4:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	95 83       	std	Z+5, r25	; 0x05
    14cc:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	dc 01       	movw	r26, r24
    14d4:	13 96       	adiw	r26, 0x03	; 3
    14d6:	7c 93       	st	X, r23
    14d8:	6e 93       	st	-X, r22
    14da:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    14dc:	7d 83       	std	Y+5, r23	; 0x05
    14de:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14e0:	31 87       	std	Z+9, r19	; 0x09
    14e2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    14e4:	f9 01       	movw	r30, r18
    14e6:	80 81       	ld	r24, Z
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	80 83       	st	Z, r24
}
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    14f8:	48 81       	ld	r20, Y
    14fa:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    14fc:	4f 3f       	cpi	r20, 0xFF	; 255
    14fe:	2f ef       	ldi	r18, 0xFF	; 255
    1500:	52 07       	cpc	r21, r18
    1502:	21 f4       	brne	.+8      	; 0x150c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1504:	fc 01       	movw	r30, r24
    1506:	a7 81       	ldd	r26, Z+7	; 0x07
    1508:	b0 85       	ldd	r27, Z+8	; 0x08
    150a:	0d c0       	rjmp	.+26     	; 0x1526 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    150c:	dc 01       	movw	r26, r24
    150e:	13 96       	adiw	r26, 0x03	; 3
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <vListInsert+0x22>
    1512:	df 01       	movw	r26, r30
    1514:	12 96       	adiw	r26, 0x02	; 2
    1516:	ed 91       	ld	r30, X+
    1518:	fc 91       	ld	r31, X
    151a:	13 97       	sbiw	r26, 0x03	; 3
    151c:	20 81       	ld	r18, Z
    151e:	31 81       	ldd	r19, Z+1	; 0x01
    1520:	42 17       	cp	r20, r18
    1522:	53 07       	cpc	r21, r19
    1524:	b0 f7       	brcc	.-20     	; 0x1512 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	ed 91       	ld	r30, X+
    152a:	fc 91       	ld	r31, X
    152c:	13 97       	sbiw	r26, 0x03	; 3
    152e:	fb 83       	std	Y+3, r31	; 0x03
    1530:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1532:	d5 83       	std	Z+5, r29	; 0x05
    1534:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1536:	bd 83       	std	Y+5, r27	; 0x05
    1538:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    153a:	13 96       	adiw	r26, 0x03	; 3
    153c:	dc 93       	st	X, r29
    153e:	ce 93       	st	-X, r28
    1540:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1542:	99 87       	std	Y+9, r25	; 0x09
    1544:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1546:	fc 01       	movw	r30, r24
    1548:	20 81       	ld	r18, Z
    154a:	2f 5f       	subi	r18, 0xFF	; 255
    154c:	20 83       	st	Z, r18
}
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    155a:	a0 85       	ldd	r26, Z+8	; 0x08
    155c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    155e:	c2 81       	ldd	r28, Z+2	; 0x02
    1560:	d3 81       	ldd	r29, Z+3	; 0x03
    1562:	84 81       	ldd	r24, Z+4	; 0x04
    1564:	95 81       	ldd	r25, Z+5	; 0x05
    1566:	9d 83       	std	Y+5, r25	; 0x05
    1568:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    156a:	c4 81       	ldd	r28, Z+4	; 0x04
    156c:	d5 81       	ldd	r29, Z+5	; 0x05
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	93 81       	ldd	r25, Z+3	; 0x03
    1572:	9b 83       	std	Y+3, r25	; 0x03
    1574:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	cd 91       	ld	r28, X+
    157a:	dc 91       	ld	r29, X
    157c:	12 97       	sbiw	r26, 0x02	; 2
    157e:	ce 17       	cp	r28, r30
    1580:	df 07       	cpc	r29, r31
    1582:	31 f4       	brne	.+12     	; 0x1590 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9d 81       	ldd	r25, Y+5	; 0x05
    1588:	12 96       	adiw	r26, 0x02	; 2
    158a:	9c 93       	st	X, r25
    158c:	8e 93       	st	-X, r24
    158e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1590:	11 86       	std	Z+9, r1	; 0x09
    1592:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1594:	8c 91       	ld	r24, X
    1596:	81 50       	subi	r24, 0x01	; 1
    1598:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    15a0:	31 e1       	ldi	r19, 0x11	; 17
    15a2:	fc 01       	movw	r30, r24
    15a4:	30 83       	st	Z, r19
    15a6:	31 97       	sbiw	r30, 0x01	; 1
    15a8:	22 e2       	ldi	r18, 0x22	; 34
    15aa:	20 83       	st	Z, r18
    15ac:	31 97       	sbiw	r30, 0x01	; 1
    15ae:	a3 e3       	ldi	r26, 0x33	; 51
    15b0:	a0 83       	st	Z, r26
    15b2:	31 97       	sbiw	r30, 0x01	; 1
    15b4:	60 83       	st	Z, r22
    15b6:	31 97       	sbiw	r30, 0x01	; 1
    15b8:	70 83       	st	Z, r23
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	10 82       	st	Z, r1
    15be:	31 97       	sbiw	r30, 0x01	; 1
    15c0:	60 e8       	ldi	r22, 0x80	; 128
    15c2:	60 83       	st	Z, r22
    15c4:	31 97       	sbiw	r30, 0x01	; 1
    15c6:	10 82       	st	Z, r1
    15c8:	31 97       	sbiw	r30, 0x01	; 1
    15ca:	62 e0       	ldi	r22, 0x02	; 2
    15cc:	60 83       	st	Z, r22
    15ce:	31 97       	sbiw	r30, 0x01	; 1
    15d0:	63 e0       	ldi	r22, 0x03	; 3
    15d2:	60 83       	st	Z, r22
    15d4:	31 97       	sbiw	r30, 0x01	; 1
    15d6:	64 e0       	ldi	r22, 0x04	; 4
    15d8:	60 83       	st	Z, r22
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	65 e0       	ldi	r22, 0x05	; 5
    15de:	60 83       	st	Z, r22
    15e0:	31 97       	sbiw	r30, 0x01	; 1
    15e2:	66 e0       	ldi	r22, 0x06	; 6
    15e4:	60 83       	st	Z, r22
    15e6:	31 97       	sbiw	r30, 0x01	; 1
    15e8:	67 e0       	ldi	r22, 0x07	; 7
    15ea:	60 83       	st	Z, r22
    15ec:	31 97       	sbiw	r30, 0x01	; 1
    15ee:	68 e0       	ldi	r22, 0x08	; 8
    15f0:	60 83       	st	Z, r22
    15f2:	31 97       	sbiw	r30, 0x01	; 1
    15f4:	69 e0       	ldi	r22, 0x09	; 9
    15f6:	60 83       	st	Z, r22
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	60 e1       	ldi	r22, 0x10	; 16
    15fc:	60 83       	st	Z, r22
    15fe:	31 97       	sbiw	r30, 0x01	; 1
    1600:	30 83       	st	Z, r19
    1602:	31 97       	sbiw	r30, 0x01	; 1
    1604:	32 e1       	ldi	r19, 0x12	; 18
    1606:	30 83       	st	Z, r19
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	33 e1       	ldi	r19, 0x13	; 19
    160c:	30 83       	st	Z, r19
    160e:	31 97       	sbiw	r30, 0x01	; 1
    1610:	34 e1       	ldi	r19, 0x14	; 20
    1612:	30 83       	st	Z, r19
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	35 e1       	ldi	r19, 0x15	; 21
    1618:	30 83       	st	Z, r19
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	36 e1       	ldi	r19, 0x16	; 22
    161e:	30 83       	st	Z, r19
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	37 e1       	ldi	r19, 0x17	; 23
    1624:	30 83       	st	Z, r19
    1626:	31 97       	sbiw	r30, 0x01	; 1
    1628:	38 e1       	ldi	r19, 0x18	; 24
    162a:	30 83       	st	Z, r19
    162c:	31 97       	sbiw	r30, 0x01	; 1
    162e:	39 e1       	ldi	r19, 0x19	; 25
    1630:	30 83       	st	Z, r19
    1632:	31 97       	sbiw	r30, 0x01	; 1
    1634:	30 e2       	ldi	r19, 0x20	; 32
    1636:	30 83       	st	Z, r19
    1638:	31 97       	sbiw	r30, 0x01	; 1
    163a:	31 e2       	ldi	r19, 0x21	; 33
    163c:	30 83       	st	Z, r19
    163e:	31 97       	sbiw	r30, 0x01	; 1
    1640:	20 83       	st	Z, r18
    1642:	31 97       	sbiw	r30, 0x01	; 1
    1644:	23 e2       	ldi	r18, 0x23	; 35
    1646:	20 83       	st	Z, r18
    1648:	31 97       	sbiw	r30, 0x01	; 1
    164a:	40 83       	st	Z, r20
    164c:	31 97       	sbiw	r30, 0x01	; 1
    164e:	50 83       	st	Z, r21
    1650:	31 97       	sbiw	r30, 0x01	; 1
    1652:	26 e2       	ldi	r18, 0x26	; 38
    1654:	20 83       	st	Z, r18
    1656:	31 97       	sbiw	r30, 0x01	; 1
    1658:	27 e2       	ldi	r18, 0x27	; 39
    165a:	20 83       	st	Z, r18
    165c:	31 97       	sbiw	r30, 0x01	; 1
    165e:	28 e2       	ldi	r18, 0x28	; 40
    1660:	20 83       	st	Z, r18
    1662:	31 97       	sbiw	r30, 0x01	; 1
    1664:	29 e2       	ldi	r18, 0x29	; 41
    1666:	20 83       	st	Z, r18
    1668:	31 97       	sbiw	r30, 0x01	; 1
    166a:	20 e3       	ldi	r18, 0x30	; 48
    166c:	20 83       	st	Z, r18
    166e:	31 97       	sbiw	r30, 0x01	; 1
    1670:	21 e3       	ldi	r18, 0x31	; 49
    1672:	20 83       	st	Z, r18
    1674:	86 97       	sbiw	r24, 0x26	; 38
    1676:	08 95       	ret

00001678 <xPortStartScheduler>:
    1678:	1b bc       	out	0x2b, r1	; 43
    167a:	89 ef       	ldi	r24, 0xF9	; 249
    167c:	8a bd       	out	0x2a, r24	; 42
    167e:	8b e0       	ldi	r24, 0x0B	; 11
    1680:	8e bd       	out	0x2e, r24	; 46
    1682:	87 b7       	in	r24, 0x37	; 55
    1684:	80 61       	ori	r24, 0x10	; 16
    1686:	87 bf       	out	0x37, r24	; 55
    1688:	a0 91 e2 09 	lds	r26, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    168c:	b0 91 e3 09 	lds	r27, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1690:	cd 91       	ld	r28, X+
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	dd 91       	ld	r29, X+
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	bf 91       	pop	r27
    16a2:	af 91       	pop	r26
    16a4:	9f 91       	pop	r25
    16a6:	8f 91       	pop	r24
    16a8:	7f 91       	pop	r23
    16aa:	6f 91       	pop	r22
    16ac:	5f 91       	pop	r21
    16ae:	4f 91       	pop	r20
    16b0:	3f 91       	pop	r19
    16b2:	2f 91       	pop	r18
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	ff 90       	pop	r15
    16ba:	ef 90       	pop	r14
    16bc:	df 90       	pop	r13
    16be:	cf 90       	pop	r12
    16c0:	bf 90       	pop	r11
    16c2:	af 90       	pop	r10
    16c4:	9f 90       	pop	r9
    16c6:	8f 90       	pop	r8
    16c8:	7f 90       	pop	r7
    16ca:	6f 90       	pop	r6
    16cc:	5f 90       	pop	r5
    16ce:	4f 90       	pop	r4
    16d0:	3f 90       	pop	r3
    16d2:	2f 90       	pop	r2
    16d4:	1f 90       	pop	r1
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	08 95       	ret
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	08 95       	ret

000016e2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	0f 92       	push	r0
    16ea:	1f 92       	push	r1
    16ec:	11 24       	eor	r1, r1
    16ee:	2f 92       	push	r2
    16f0:	3f 92       	push	r3
    16f2:	4f 92       	push	r4
    16f4:	5f 92       	push	r5
    16f6:	6f 92       	push	r6
    16f8:	7f 92       	push	r7
    16fa:	8f 92       	push	r8
    16fc:	9f 92       	push	r9
    16fe:	af 92       	push	r10
    1700:	bf 92       	push	r11
    1702:	cf 92       	push	r12
    1704:	df 92       	push	r13
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	2f 93       	push	r18
    1710:	3f 93       	push	r19
    1712:	4f 93       	push	r20
    1714:	5f 93       	push	r21
    1716:	6f 93       	push	r22
    1718:	7f 93       	push	r23
    171a:	8f 93       	push	r24
    171c:	9f 93       	push	r25
    171e:	af 93       	push	r26
    1720:	bf 93       	push	r27
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	ef 93       	push	r30
    1728:	ff 93       	push	r31
    172a:	a0 91 e2 09 	lds	r26, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    172e:	b0 91 e3 09 	lds	r27, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1732:	0d b6       	in	r0, 0x3d	; 61
    1734:	0d 92       	st	X+, r0
    1736:	0e b6       	in	r0, 0x3e	; 62
    1738:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    173a:	24 d6       	rcall	.+3144   	; 0x2384 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    173c:	a0 91 e2 09 	lds	r26, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    1740:	b0 91 e3 09 	lds	r27, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1744:	cd 91       	ld	r28, X+
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	dd 91       	ld	r29, X+
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	bf 91       	pop	r27
    1756:	af 91       	pop	r26
    1758:	9f 91       	pop	r25
    175a:	8f 91       	pop	r24
    175c:	7f 91       	pop	r23
    175e:	6f 91       	pop	r22
    1760:	5f 91       	pop	r21
    1762:	4f 91       	pop	r20
    1764:	3f 91       	pop	r19
    1766:	2f 91       	pop	r18
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	df 90       	pop	r13
    1772:	cf 90       	pop	r12
    1774:	bf 90       	pop	r11
    1776:	af 90       	pop	r10
    1778:	9f 90       	pop	r9
    177a:	8f 90       	pop	r8
    177c:	7f 90       	pop	r7
    177e:	6f 90       	pop	r6
    1780:	5f 90       	pop	r5
    1782:	4f 90       	pop	r4
    1784:	3f 90       	pop	r3
    1786:	2f 90       	pop	r2
    1788:	1f 90       	pop	r1
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1790:	08 95       	ret

00001792 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1792:	0f 92       	push	r0
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	0f 92       	push	r0
    179a:	1f 92       	push	r1
    179c:	11 24       	eor	r1, r1
    179e:	2f 92       	push	r2
    17a0:	3f 92       	push	r3
    17a2:	4f 92       	push	r4
    17a4:	5f 92       	push	r5
    17a6:	6f 92       	push	r6
    17a8:	7f 92       	push	r7
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	ef 93       	push	r30
    17d8:	ff 93       	push	r31
    17da:	a0 91 e2 09 	lds	r26, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    17de:	b0 91 e3 09 	lds	r27, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    17e2:	0d b6       	in	r0, 0x3d	; 61
    17e4:	0d 92       	st	X+, r0
    17e6:	0e b6       	in	r0, 0x3e	; 62
    17e8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    17ea:	55 d4       	rcall	.+2218   	; 0x2096 <xTaskIncrementTick>
    17ec:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    17ee:	ca d5       	rcall	.+2964   	; 0x2384 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    17f0:	a0 91 e2 09 	lds	r26, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    17f4:	b0 91 e3 09 	lds	r27, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    17f8:	cd 91       	ld	r28, X+
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	dd 91       	ld	r29, X+
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	ff 91       	pop	r31
    1802:	ef 91       	pop	r30
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	bf 91       	pop	r27
    180a:	af 91       	pop	r26
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	7f 91       	pop	r23
    1812:	6f 91       	pop	r22
    1814:	5f 91       	pop	r21
    1816:	4f 91       	pop	r20
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	8f 90       	pop	r8
    1830:	7f 90       	pop	r7
    1832:	6f 90       	pop	r6
    1834:	5f 90       	pop	r5
    1836:	4f 90       	pop	r4
    1838:	3f 90       	pop	r3
    183a:	2f 90       	pop	r2
    183c:	1f 90       	pop	r1
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1844:	08 95       	ret

00001846 <__vector_12>:
	
	//TIMER1_COMPA_vect
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    1846:	a5 df       	rcall	.-182    	; 0x1792 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1848:	18 95       	reti

0000184a <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	ec 01       	movw	r28, r24
    1854:	04 2f       	mov	r16, r20
    1856:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1858:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185a:	81 11       	cpse	r24, r1
    185c:	0b c0       	rjmp	.+22     	; 0x1874 <prvCopyDataToQueue+0x2a>
    185e:	88 81       	ld	r24, Y
    1860:	99 81       	ldd	r25, Y+1	; 0x01
    1862:	89 2b       	or	r24, r25
    1864:	09 f0       	breq	.+2      	; 0x1868 <prvCopyDataToQueue+0x1e>
    1866:	41 c0       	rjmp	.+130    	; 0x18ea <prvCopyDataToQueue+0xa0>
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	9b 81       	ldd	r25, Y+3	; 0x03
    186c:	0b d7       	rcall	.+3606   	; 0x2684 <xTaskPriorityDisinherit>
    186e:	1b 82       	std	Y+3, r1	; 0x03
    1870:	1a 82       	std	Y+2, r1	; 0x02
    1872:	42 c0       	rjmp	.+132    	; 0x18f8 <prvCopyDataToQueue+0xae>
    1874:	41 11       	cpse	r20, r1
    1876:	17 c0       	rjmp	.+46     	; 0x18a6 <prvCopyDataToQueue+0x5c>
    1878:	48 2f       	mov	r20, r24
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	9d 81       	ldd	r25, Y+5	; 0x05
    1880:	7a d7       	rcall	.+3828   	; 0x2776 <memcpy>
    1882:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	82 0f       	add	r24, r18
    188a:	91 1d       	adc	r25, r1
    188c:	9d 83       	std	Y+5, r25	; 0x05
    188e:	8c 83       	std	Y+4, r24	; 0x04
    1890:	2a 81       	ldd	r18, Y+2	; 0x02
    1892:	3b 81       	ldd	r19, Y+3	; 0x03
    1894:	82 17       	cp	r24, r18
    1896:	93 07       	cpc	r25, r19
    1898:	50 f1       	brcs	.+84     	; 0x18ee <prvCopyDataToQueue+0xa4>
    189a:	88 81       	ld	r24, Y
    189c:	99 81       	ldd	r25, Y+1	; 0x01
    189e:	9d 83       	std	Y+5, r25	; 0x05
    18a0:	8c 83       	std	Y+4, r24	; 0x04
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	29 c0       	rjmp	.+82     	; 0x18f8 <prvCopyDataToQueue+0xae>
    18a6:	48 2f       	mov	r20, r24
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	8e 81       	ldd	r24, Y+6	; 0x06
    18ac:	9f 81       	ldd	r25, Y+7	; 0x07
    18ae:	63 d7       	rcall	.+3782   	; 0x2776 <memcpy>
    18b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	91 95       	neg	r25
    18b6:	81 95       	neg	r24
    18b8:	91 09       	sbc	r25, r1
    18ba:	2e 81       	ldd	r18, Y+6	; 0x06
    18bc:	3f 81       	ldd	r19, Y+7	; 0x07
    18be:	28 0f       	add	r18, r24
    18c0:	39 1f       	adc	r19, r25
    18c2:	3f 83       	std	Y+7, r19	; 0x07
    18c4:	2e 83       	std	Y+6, r18	; 0x06
    18c6:	48 81       	ld	r20, Y
    18c8:	59 81       	ldd	r21, Y+1	; 0x01
    18ca:	24 17       	cp	r18, r20
    18cc:	35 07       	cpc	r19, r21
    18ce:	30 f4       	brcc	.+12     	; 0x18dc <prvCopyDataToQueue+0x92>
    18d0:	2a 81       	ldd	r18, Y+2	; 0x02
    18d2:	3b 81       	ldd	r19, Y+3	; 0x03
    18d4:	82 0f       	add	r24, r18
    18d6:	93 1f       	adc	r25, r19
    18d8:	9f 83       	std	Y+7, r25	; 0x07
    18da:	8e 83       	std	Y+6, r24	; 0x06
    18dc:	02 30       	cpi	r16, 0x02	; 2
    18de:	49 f4       	brne	.+18     	; 0x18f2 <prvCopyDataToQueue+0xa8>
    18e0:	11 23       	and	r17, r17
    18e2:	49 f0       	breq	.+18     	; 0x18f6 <prvCopyDataToQueue+0xac>
    18e4:	11 50       	subi	r17, 0x01	; 1
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	07 c0       	rjmp	.+14     	; 0x18f8 <prvCopyDataToQueue+0xae>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <prvCopyDataToQueue+0xae>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <prvCopyDataToQueue+0xae>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <prvCopyDataToQueue+0xae>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	1f 5f       	subi	r17, 0xFF	; 255
    18fa:	1a 8f       	std	Y+26, r17	; 0x1a
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	08 95       	ret

00001906 <prvCopyDataFromQueue>:
    1906:	fc 01       	movw	r30, r24
    1908:	44 8d       	ldd	r20, Z+28	; 0x1c
    190a:	44 23       	and	r20, r20
    190c:	a1 f0       	breq	.+40     	; 0x1936 <prvCopyDataFromQueue+0x30>
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	26 81       	ldd	r18, Z+6	; 0x06
    1912:	37 81       	ldd	r19, Z+7	; 0x07
    1914:	24 0f       	add	r18, r20
    1916:	35 1f       	adc	r19, r21
    1918:	37 83       	std	Z+7, r19	; 0x07
    191a:	26 83       	std	Z+6, r18	; 0x06
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	28 17       	cp	r18, r24
    1922:	39 07       	cpc	r19, r25
    1924:	20 f0       	brcs	.+8      	; 0x192e <prvCopyDataFromQueue+0x28>
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	97 83       	std	Z+7, r25	; 0x07
    192c:	86 83       	std	Z+6, r24	; 0x06
    192e:	cb 01       	movw	r24, r22
    1930:	66 81       	ldd	r22, Z+6	; 0x06
    1932:	77 81       	ldd	r23, Z+7	; 0x07
    1934:	20 c7       	rjmp	.+3648   	; 0x2776 <memcpy>
    1936:	08 95       	ret

00001938 <prvUnlockQueue>:
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	8c 01       	movw	r16, r24
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	0f 92       	push	r0
    194a:	fc 01       	movw	r30, r24
    194c:	c6 8d       	ldd	r28, Z+30	; 0x1e
    194e:	1c 16       	cp	r1, r28
    1950:	9c f4       	brge	.+38     	; 0x1978 <prvUnlockQueue+0x40>
    1952:	81 89       	ldd	r24, Z+17	; 0x11
    1954:	81 11       	cpse	r24, r1
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <prvUnlockQueue+0x2c>
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <prvUnlockQueue+0x40>
    195a:	f8 01       	movw	r30, r16
    195c:	91 89       	ldd	r25, Z+17	; 0x11
    195e:	91 11       	cpse	r25, r1
    1960:	05 c0       	rjmp	.+10     	; 0x196c <prvUnlockQueue+0x34>
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <prvUnlockQueue+0x40>
    1964:	78 01       	movw	r14, r16
    1966:	f1 e1       	ldi	r31, 0x11	; 17
    1968:	ef 0e       	add	r14, r31
    196a:	f1 1c       	adc	r15, r1
    196c:	c7 01       	movw	r24, r14
    196e:	9b d5       	rcall	.+2870   	; 0x24a6 <xTaskRemoveFromEventList>
    1970:	81 11       	cpse	r24, r1
    1972:	22 d6       	rcall	.+3140   	; 0x25b8 <vTaskMissedYield>
    1974:	c1 50       	subi	r28, 0x01	; 1
    1976:	89 f7       	brne	.-30     	; 0x195a <prvUnlockQueue+0x22>
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	f8 01       	movw	r30, r16
    197c:	86 8f       	std	Z+30, r24	; 0x1e
    197e:	0f 90       	pop	r0
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	0f 92       	push	r0
    1988:	c5 8d       	ldd	r28, Z+29	; 0x1d
    198a:	1c 16       	cp	r1, r28
    198c:	9c f4       	brge	.+38     	; 0x19b4 <prvUnlockQueue+0x7c>
    198e:	80 85       	ldd	r24, Z+8	; 0x08
    1990:	81 11       	cpse	r24, r1
    1992:	06 c0       	rjmp	.+12     	; 0x19a0 <prvUnlockQueue+0x68>
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <prvUnlockQueue+0x7c>
    1996:	f8 01       	movw	r30, r16
    1998:	90 85       	ldd	r25, Z+8	; 0x08
    199a:	91 11       	cpse	r25, r1
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <prvUnlockQueue+0x70>
    199e:	0a c0       	rjmp	.+20     	; 0x19b4 <prvUnlockQueue+0x7c>
    19a0:	78 01       	movw	r14, r16
    19a2:	f8 e0       	ldi	r31, 0x08	; 8
    19a4:	ef 0e       	add	r14, r31
    19a6:	f1 1c       	adc	r15, r1
    19a8:	c7 01       	movw	r24, r14
    19aa:	7d d5       	rcall	.+2810   	; 0x24a6 <xTaskRemoveFromEventList>
    19ac:	81 11       	cpse	r24, r1
    19ae:	04 d6       	rcall	.+3080   	; 0x25b8 <vTaskMissedYield>
    19b0:	c1 50       	subi	r28, 0x01	; 1
    19b2:	89 f7       	brne	.-30     	; 0x1996 <prvUnlockQueue+0x5e>
    19b4:	8f ef       	ldi	r24, 0xFF	; 255
    19b6:	f8 01       	movw	r30, r16
    19b8:	85 8f       	std	Z+29, r24	; 0x1d
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	08 95       	ret

000019ca <xQueueGenericReset>:
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	0f 92       	push	r0
    19d6:	48 81       	ld	r20, Y
    19d8:	59 81       	ldd	r21, Y+1	; 0x01
    19da:	2c 8d       	ldd	r18, Y+28	; 0x1c
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19e0:	72 9f       	mul	r23, r18
    19e2:	c0 01       	movw	r24, r0
    19e4:	73 9f       	mul	r23, r19
    19e6:	90 0d       	add	r25, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	fa 01       	movw	r30, r20
    19ec:	e8 0f       	add	r30, r24
    19ee:	f9 1f       	adc	r31, r25
    19f0:	fb 83       	std	Y+3, r31	; 0x03
    19f2:	ea 83       	std	Y+2, r30	; 0x02
    19f4:	1a 8e       	std	Y+26, r1	; 0x1a
    19f6:	5d 83       	std	Y+5, r21	; 0x05
    19f8:	4c 83       	std	Y+4, r20	; 0x04
    19fa:	82 1b       	sub	r24, r18
    19fc:	93 0b       	sbc	r25, r19
    19fe:	84 0f       	add	r24, r20
    1a00:	95 1f       	adc	r25, r21
    1a02:	9f 83       	std	Y+7, r25	; 0x07
    1a04:	8e 83       	std	Y+6, r24	; 0x06
    1a06:	8f ef       	ldi	r24, 0xFF	; 255
    1a08:	8d 8f       	std	Y+29, r24	; 0x1d
    1a0a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a0c:	61 11       	cpse	r22, r1
    1a0e:	0a c0       	rjmp	.+20     	; 0x1a24 <xQueueGenericReset+0x5a>
    1a10:	88 85       	ldd	r24, Y+8	; 0x08
    1a12:	88 23       	and	r24, r24
    1a14:	69 f0       	breq	.+26     	; 0x1a30 <xQueueGenericReset+0x66>
    1a16:	ce 01       	movw	r24, r28
    1a18:	08 96       	adiw	r24, 0x08	; 8
    1a1a:	45 d5       	rcall	.+2698   	; 0x24a6 <xTaskRemoveFromEventList>
    1a1c:	88 23       	and	r24, r24
    1a1e:	41 f0       	breq	.+16     	; 0x1a30 <xQueueGenericReset+0x66>
    1a20:	60 de       	rcall	.-832    	; 0x16e2 <vPortYield>
    1a22:	06 c0       	rjmp	.+12     	; 0x1a30 <xQueueGenericReset+0x66>
    1a24:	ce 01       	movw	r24, r28
    1a26:	08 96       	adiw	r24, 0x08	; 8
    1a28:	31 dd       	rcall	.-1438   	; 0x148c <vListInitialise>
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	41 96       	adiw	r24, 0x11	; 17
    1a2e:	2e dd       	rcall	.-1444   	; 0x148c <vListInitialise>
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	08 95       	ret

00001a3c <xQueueGenericCreate>:
    1a3c:	0f 93       	push	r16
    1a3e:	1f 93       	push	r17
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	08 2f       	mov	r16, r24
    1a46:	16 2f       	mov	r17, r22
    1a48:	66 23       	and	r22, r22
    1a4a:	b1 f0       	breq	.+44     	; 0x1a78 <xQueueGenericCreate+0x3c>
    1a4c:	86 9f       	mul	r24, r22
    1a4e:	c0 01       	movw	r24, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	4f 96       	adiw	r24, 0x1f	; 31
    1a54:	e7 dc       	rcall	.-1586   	; 0x1424 <pvPortMalloc>
    1a56:	ec 01       	movw	r28, r24
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	39 f4       	brne	.+14     	; 0x1a6a <xQueueGenericCreate+0x2e>
    1a5c:	13 c0       	rjmp	.+38     	; 0x1a84 <xQueueGenericCreate+0x48>
    1a5e:	0b 8f       	std	Y+27, r16	; 0x1b
    1a60:	1c 8f       	std	Y+28, r17	; 0x1c
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	ce 01       	movw	r24, r28
    1a66:	b1 df       	rcall	.-158    	; 0x19ca <xQueueGenericReset>
    1a68:	0d c0       	rjmp	.+26     	; 0x1a84 <xQueueGenericCreate+0x48>
    1a6a:	4f 96       	adiw	r24, 0x1f	; 31
    1a6c:	99 83       	std	Y+1, r25	; 0x01
    1a6e:	88 83       	st	Y, r24
    1a70:	f6 cf       	rjmp	.-20     	; 0x1a5e <xQueueGenericCreate+0x22>
    1a72:	d9 83       	std	Y+1, r29	; 0x01
    1a74:	c8 83       	st	Y, r28
    1a76:	f3 cf       	rjmp	.-26     	; 0x1a5e <xQueueGenericCreate+0x22>
    1a78:	8f e1       	ldi	r24, 0x1F	; 31
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	d3 dc       	rcall	.-1626   	; 0x1424 <pvPortMalloc>
    1a7e:	ec 01       	movw	r28, r24
    1a80:	89 2b       	or	r24, r25
    1a82:	b9 f7       	brne	.-18     	; 0x1a72 <xQueueGenericCreate+0x36>
    1a84:	ce 01       	movw	r24, r28
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <xQueueGenericSend>:
    1a90:	9f 92       	push	r9
    1a92:	af 92       	push	r10
    1a94:	bf 92       	push	r11
    1a96:	cf 92       	push	r12
    1a98:	df 92       	push	r13
    1a9a:	ef 92       	push	r14
    1a9c:	ff 92       	push	r15
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <xQueueGenericSend+0x18>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <xQueueGenericSend+0x1a>
    1aaa:	1f 92       	push	r1
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	8c 01       	movw	r16, r24
    1ab2:	6b 01       	movw	r12, r22
    1ab4:	5d 83       	std	Y+5, r21	; 0x05
    1ab6:	4c 83       	std	Y+4, r20	; 0x04
    1ab8:	a2 2e       	mov	r10, r18
    1aba:	b1 2c       	mov	r11, r1
    1abc:	99 24       	eor	r9, r9
    1abe:	93 94       	inc	r9
    1ac0:	7c 01       	movw	r14, r24
    1ac2:	88 e0       	ldi	r24, 0x08	; 8
    1ac4:	e8 0e       	add	r14, r24
    1ac6:	f1 1c       	adc	r15, r1
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	0f 92       	push	r0
    1ace:	f8 01       	movw	r30, r16
    1ad0:	32 8d       	ldd	r19, Z+26	; 0x1a
    1ad2:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ad4:	39 17       	cp	r19, r25
    1ad6:	18 f0       	brcs	.+6      	; 0x1ade <xQueueGenericSend+0x4e>
    1ad8:	f2 e0       	ldi	r31, 0x02	; 2
    1ada:	af 12       	cpse	r10, r31
    1adc:	15 c0       	rjmp	.+42     	; 0x1b08 <xQueueGenericSend+0x78>
    1ade:	4a 2d       	mov	r20, r10
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	c8 01       	movw	r24, r16
    1ae4:	b2 de       	rcall	.-668    	; 0x184a <prvCopyDataToQueue>
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	91 89       	ldd	r25, Z+17	; 0x11
    1aea:	99 23       	and	r25, r25
    1aec:	39 f0       	breq	.+14     	; 0x1afc <xQueueGenericSend+0x6c>
    1aee:	c8 01       	movw	r24, r16
    1af0:	41 96       	adiw	r24, 0x11	; 17
    1af2:	d9 d4       	rcall	.+2482   	; 0x24a6 <xTaskRemoveFromEventList>
    1af4:	88 23       	and	r24, r24
    1af6:	21 f0       	breq	.+8      	; 0x1b00 <xQueueGenericSend+0x70>
    1af8:	f4 dd       	rcall	.-1048   	; 0x16e2 <vPortYield>
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <xQueueGenericSend+0x70>
    1afc:	81 11       	cpse	r24, r1
    1afe:	f1 dd       	rcall	.-1054   	; 0x16e2 <vPortYield>
    1b00:	0f 90       	pop	r0
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	45 c0       	rjmp	.+138    	; 0x1b92 <xQueueGenericSend+0x102>
    1b08:	ec 81       	ldd	r30, Y+4	; 0x04
    1b0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1b0c:	ef 2b       	or	r30, r31
    1b0e:	21 f4       	brne	.+8      	; 0x1b18 <xQueueGenericSend+0x88>
    1b10:	0f 90       	pop	r0
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	3d c0       	rjmp	.+122    	; 0x1b92 <xQueueGenericSend+0x102>
    1b18:	b1 10       	cpse	r11, r1
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <xQueueGenericSend+0x94>
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	08 d5       	rcall	.+2576   	; 0x2532 <vTaskSetTimeOutState>
    1b22:	b9 2c       	mov	r11, r9
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	b0 d2       	rcall	.+1376   	; 0x208a <vTaskSuspendAll>
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	0f 92       	push	r0
    1b30:	f8 01       	movw	r30, r16
    1b32:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b34:	8f 3f       	cpi	r24, 0xFF	; 255
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <xQueueGenericSend+0xaa>
    1b38:	15 8e       	std	Z+29, r1	; 0x1d
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <xQueueGenericSend+0xb4>
    1b42:	16 8e       	std	Z+30, r1	; 0x1e
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	be 01       	movw	r22, r28
    1b4a:	6c 5f       	subi	r22, 0xFC	; 252
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	ce 01       	movw	r24, r28
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	fa d4       	rcall	.+2548   	; 0x2548 <xTaskCheckForTimeOut>
    1b54:	81 11       	cpse	r24, r1
    1b56:	19 c0       	rjmp	.+50     	; 0x1b8a <xQueueGenericSend+0xfa>
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	0f 92       	push	r0
    1b5e:	f8 01       	movw	r30, r16
    1b60:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b68:	98 13       	cpse	r25, r24
    1b6a:	0b c0       	rjmp	.+22     	; 0x1b82 <xQueueGenericSend+0xf2>
    1b6c:	6c 81       	ldd	r22, Y+4	; 0x04
    1b6e:	7d 81       	ldd	r23, Y+5	; 0x05
    1b70:	c7 01       	movw	r24, r14
    1b72:	88 d4       	rcall	.+2320   	; 0x2484 <vTaskPlaceOnEventList>
    1b74:	c8 01       	movw	r24, r16
    1b76:	e0 de       	rcall	.-576    	; 0x1938 <prvUnlockQueue>
    1b78:	45 d3       	rcall	.+1674   	; 0x2204 <xTaskResumeAll>
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	a5 cf       	rjmp	.-182    	; 0x1ac8 <xQueueGenericSend+0x38>
    1b7e:	b1 dd       	rcall	.-1182   	; 0x16e2 <vPortYield>
    1b80:	a3 cf       	rjmp	.-186    	; 0x1ac8 <xQueueGenericSend+0x38>
    1b82:	c8 01       	movw	r24, r16
    1b84:	d9 de       	rcall	.-590    	; 0x1938 <prvUnlockQueue>
    1b86:	3e d3       	rcall	.+1660   	; 0x2204 <xTaskResumeAll>
    1b88:	9f cf       	rjmp	.-194    	; 0x1ac8 <xQueueGenericSend+0x38>
    1b8a:	c8 01       	movw	r24, r16
    1b8c:	d5 de       	rcall	.-598    	; 0x1938 <prvUnlockQueue>
    1b8e:	3a d3       	rcall	.+1652   	; 0x2204 <xTaskResumeAll>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	bf 90       	pop	r11
    1bae:	af 90       	pop	r10
    1bb0:	9f 90       	pop	r9
    1bb2:	08 95       	ret

00001bb4 <xQueueCreateMutex>:
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	48 2f       	mov	r20, r24
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	3e df       	rcall	.-388    	; 0x1a3c <xQueueGenericCreate>
    1bc0:	ec 01       	movw	r28, r24
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	59 f0       	breq	.+22     	; 0x1bdc <xQueueCreateMutex+0x28>
    1bc6:	1b 82       	std	Y+3, r1	; 0x03
    1bc8:	1a 82       	std	Y+2, r1	; 0x02
    1bca:	19 82       	std	Y+1, r1	; 0x01
    1bcc:	18 82       	st	Y, r1
    1bce:	1e 82       	std	Y+6, r1	; 0x06
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	5a df       	rcall	.-332    	; 0x1a90 <xQueueGenericSend>
    1bdc:	ce 01       	movw	r24, r28
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <xQueueGenericReceive+0x1a>
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <xQueueGenericReceive+0x1c>
    1c00:	1f 92       	push	r1
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	8c 01       	movw	r16, r24
    1c08:	5b 01       	movw	r10, r22
    1c0a:	5d 83       	std	Y+5, r21	; 0x05
    1c0c:	4c 83       	std	Y+4, r20	; 0x04
    1c0e:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    1c10:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1c12:	99 24       	eor	r9, r9
    1c14:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1c16:	6c 01       	movw	r12, r24
    1c18:	81 e1       	ldi	r24, 0x11	; 17
    1c1a:	c8 0e       	add	r12, r24
    1c1c:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1c24:	f8 01       	movw	r30, r16
    1c26:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1c28:	ff 20       	and	r15, r15
    1c2a:	61 f1       	breq	.+88     	; 0x1c84 <xQueueGenericReceive+0xa0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1c2c:	c6 80       	ldd	r12, Z+6	; 0x06
    1c2e:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1c30:	b5 01       	movw	r22, r10
    1c32:	c8 01       	movw	r24, r16
    1c34:	68 de       	rcall	.-816    	; 0x1906 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1c36:	81 10       	cpse	r8, r1
    1c38:	16 c0       	rjmp	.+44     	; 0x1c66 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1c3a:	fa 94       	dec	r15
    1c3c:	f8 01       	movw	r30, r16
    1c3e:	f2 8e       	std	Z+26, r15	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	89 2b       	or	r24, r25
    1c46:	21 f4       	brne	.+8      	; 0x1c50 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1c48:	5d d5       	rcall	.+2746   	; 0x2704 <pvTaskIncrementMutexHeldCount>
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	93 83       	std	Z+3, r25	; 0x03
    1c4e:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1c50:	f8 01       	movw	r30, r16
    1c52:	80 85       	ldd	r24, Z+8	; 0x08
    1c54:	88 23       	and	r24, r24
    1c56:	91 f0       	breq	.+36     	; 0x1c7c <xQueueGenericReceive+0x98>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1c58:	c8 01       	movw	r24, r16
    1c5a:	08 96       	adiw	r24, 0x08	; 8
    1c5c:	24 d4       	rcall	.+2120   	; 0x24a6 <xTaskRemoveFromEventList>
    1c5e:	88 23       	and	r24, r24
    1c60:	69 f0       	breq	.+26     	; 0x1c7c <xQueueGenericReceive+0x98>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1c62:	3f dd       	rcall	.-1410   	; 0x16e2 <vPortYield>
    1c64:	0b c0       	rjmp	.+22     	; 0x1c7c <xQueueGenericReceive+0x98>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1c66:	f8 01       	movw	r30, r16
    1c68:	d7 82       	std	Z+7, r13	; 0x07
    1c6a:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1c6c:	81 89       	ldd	r24, Z+17	; 0x11
    1c6e:	88 23       	and	r24, r24
    1c70:	29 f0       	breq	.+10     	; 0x1c7c <xQueueGenericReceive+0x98>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1c72:	c8 01       	movw	r24, r16
    1c74:	41 96       	adiw	r24, 0x11	; 17
    1c76:	17 d4       	rcall	.+2094   	; 0x24a6 <xTaskRemoveFromEventList>
    1c78:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1c7a:	33 dd       	rcall	.-1434   	; 0x16e2 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	58 c0       	rjmp	.+176    	; 0x1d34 <xQueueGenericReceive+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1c84:	4c 81       	ldd	r20, Y+4	; 0x04
    1c86:	5d 81       	ldd	r21, Y+5	; 0x05
    1c88:	45 2b       	or	r20, r21
    1c8a:	21 f4       	brne	.+8      	; 0x1c94 <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1c8c:	0f 90       	pop	r0
    1c8e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	50 c0       	rjmp	.+160    	; 0x1d34 <xQueueGenericReceive+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    1c94:	e1 10       	cpse	r14, r1
    1c96:	04 c0       	rjmp	.+8      	; 0x1ca0 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1c98:	ce 01       	movw	r24, r28
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	4a d4       	rcall	.+2196   	; 0x2532 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1c9e:	e9 2c       	mov	r14, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1ca0:	0f 90       	pop	r0
    1ca2:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ca4:	f2 d1       	rcall	.+996    	; 0x208a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	0f 92       	push	r0
    1cac:	f8 01       	movw	r30, r16
    1cae:	85 8d       	ldd	r24, Z+29	; 0x1d
    1cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <xQueueGenericReceive+0xd2>
    1cb4:	15 8e       	std	Z+29, r1	; 0x1d
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	96 8d       	ldd	r25, Z+30	; 0x1e
    1cba:	9f 3f       	cpi	r25, 0xFF	; 255
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <xQueueGenericReceive+0xdc>
    1cbe:	16 8e       	std	Z+30, r1	; 0x1e
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1cc4:	be 01       	movw	r22, r28
    1cc6:	6c 5f       	subi	r22, 0xFC	; 252
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	ce 01       	movw	r24, r28
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	3c d4       	rcall	.+2168   	; 0x2548 <xTaskCheckForTimeOut>
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	24 c0       	rjmp	.+72     	; 0x1d1c <xQueueGenericReceive+0x138>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1cda:	f8 01       	movw	r30, r16
    1cdc:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1cde:	0f 90       	pop	r0
    1ce0:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1ce2:	81 11       	cpse	r24, r1
    1ce4:	17 c0       	rjmp	.+46     	; 0x1d14 <xQueueGenericReceive+0x130>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	89 2b       	or	r24, r25
    1cec:	41 f4       	brne	.+16     	; 0x1cfe <xQueueGenericReceive+0x11a>
					{
						taskENTER_CRITICAL();
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	63 d4       	rcall	.+2246   	; 0x25c0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1cfa:	0f 90       	pop	r0
    1cfc:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1cfe:	6c 81       	ldd	r22, Y+4	; 0x04
    1d00:	7d 81       	ldd	r23, Y+5	; 0x05
    1d02:	c6 01       	movw	r24, r12
    1d04:	bf d3       	rcall	.+1918   	; 0x2484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1d06:	c8 01       	movw	r24, r16
    1d08:	17 de       	rcall	.-978    	; 0x1938 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1d0a:	7c d2       	rcall	.+1272   	; 0x2204 <xTaskResumeAll>
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	87 cf       	rjmp	.-242    	; 0x1c1e <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
    1d10:	e8 dc       	rcall	.-1584   	; 0x16e2 <vPortYield>
    1d12:	85 cf       	rjmp	.-246    	; 0x1c1e <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1d14:	c8 01       	movw	r24, r16
    1d16:	10 de       	rcall	.-992    	; 0x1938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1d18:	75 d2       	rcall	.+1258   	; 0x2204 <xTaskResumeAll>
    1d1a:	81 cf       	rjmp	.-254    	; 0x1c1e <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1d1c:	c8 01       	movw	r24, r16
    1d1e:	0c de       	rcall	.-1000   	; 0x1938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1d20:	71 d2       	rcall	.+1250   	; 0x2204 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1d28:	f8 01       	movw	r30, r16
    1d2a:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1d2c:	0f 90       	pop	r0
    1d2e:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1d30:	81 11       	cpse	r24, r1
    1d32:	75 cf       	rjmp	.-278    	; 0x1c1e <xQueueGenericReceive+0x3a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	bf 90       	pop	r11
    1d50:	af 90       	pop	r10
    1d52:	9f 90       	pop	r9
    1d54:	8f 90       	pop	r8
    1d56:	08 95       	ret

00001d58 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1d58:	e0 91 aa 09 	lds	r30, 0x09AA	; 0x8009aa <pxDelayedTaskList>
    1d5c:	f0 91 ab 09 	lds	r31, 0x09AB	; 0x8009ab <pxDelayedTaskList+0x1>
    1d60:	80 81       	ld	r24, Z
    1d62:	81 11       	cpse	r24, r1
    1d64:	07 c0       	rjmp	.+14     	; 0x1d74 <prvResetNextTaskUnblockTime+0x1c>
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	9f ef       	ldi	r25, 0xFF	; 255
    1d6a:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <xNextTaskUnblockTime+0x1>
    1d6e:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <xNextTaskUnblockTime>
    1d72:	08 95       	ret
    1d74:	e0 91 aa 09 	lds	r30, 0x09AA	; 0x8009aa <pxDelayedTaskList>
    1d78:	f0 91 ab 09 	lds	r31, 0x09AB	; 0x8009ab <pxDelayedTaskList+0x1>
    1d7c:	05 80       	ldd	r0, Z+5	; 0x05
    1d7e:	f6 81       	ldd	r31, Z+6	; 0x06
    1d80:	e0 2d       	mov	r30, r0
    1d82:	06 80       	ldd	r0, Z+6	; 0x06
    1d84:	f7 81       	ldd	r31, Z+7	; 0x07
    1d86:	e0 2d       	mov	r30, r0
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <xNextTaskUnblockTime+0x1>
    1d90:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <xNextTaskUnblockTime>
    1d94:	08 95       	ret

00001d96 <prvAddCurrentTaskToDelayedList>:
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	f6 2e       	mov	r15, r22
    1da4:	00 91 89 09 	lds	r16, 0x0989	; 0x800989 <xTickCount>
    1da8:	10 91 8a 09 	lds	r17, 0x098A	; 0x80098a <xTickCount+0x1>
    1dac:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    1db0:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1db4:	02 96       	adiw	r24, 0x02	; 2
    1db6:	ce db       	rcall	.-2148   	; 0x1554 <uxListRemove>
    1db8:	cf 3f       	cpi	r28, 0xFF	; 255
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	d8 07       	cpc	r29, r24
    1dbe:	61 f4       	brne	.+24     	; 0x1dd8 <prvAddCurrentTaskToDelayedList+0x42>
    1dc0:	ff 20       	and	r15, r15
    1dc2:	51 f0       	breq	.+20     	; 0x1dd8 <prvAddCurrentTaskToDelayedList+0x42>
    1dc4:	60 91 e2 09 	lds	r22, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    1dc8:	70 91 e3 09 	lds	r23, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1dcc:	6e 5f       	subi	r22, 0xFE	; 254
    1dce:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd0:	8c e8       	ldi	r24, 0x8C	; 140
    1dd2:	99 e0       	ldi	r25, 0x09	; 9
    1dd4:	6d db       	rcall	.-2342   	; 0x14b0 <vListInsertEnd>
    1dd6:	2d c0       	rjmp	.+90     	; 0x1e32 <prvAddCurrentTaskToDelayedList+0x9c>
    1dd8:	c0 0f       	add	r28, r16
    1dda:	d1 1f       	adc	r29, r17
    1ddc:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    1de0:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1de4:	d3 83       	std	Z+3, r29	; 0x03
    1de6:	c2 83       	std	Z+2, r28	; 0x02
    1de8:	c0 17       	cp	r28, r16
    1dea:	d1 07       	cpc	r29, r17
    1dec:	60 f4       	brcc	.+24     	; 0x1e06 <prvAddCurrentTaskToDelayedList+0x70>
    1dee:	60 91 e2 09 	lds	r22, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    1df2:	70 91 e3 09 	lds	r23, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1df6:	80 91 a8 09 	lds	r24, 0x09A8	; 0x8009a8 <pxOverflowDelayedTaskList>
    1dfa:	90 91 a9 09 	lds	r25, 0x09A9	; 0x8009a9 <pxOverflowDelayedTaskList+0x1>
    1dfe:	6e 5f       	subi	r22, 0xFE	; 254
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	77 db       	rcall	.-2322   	; 0x14f2 <vListInsert>
    1e04:	16 c0       	rjmp	.+44     	; 0x1e32 <prvAddCurrentTaskToDelayedList+0x9c>
    1e06:	60 91 e2 09 	lds	r22, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    1e0a:	70 91 e3 09 	lds	r23, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1e0e:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <pxDelayedTaskList>
    1e12:	90 91 ab 09 	lds	r25, 0x09AB	; 0x8009ab <pxDelayedTaskList+0x1>
    1e16:	6e 5f       	subi	r22, 0xFE	; 254
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	6b db       	rcall	.-2346   	; 0x14f2 <vListInsert>
    1e1c:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <xNextTaskUnblockTime>
    1e20:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <xNextTaskUnblockTime+0x1>
    1e24:	c8 17       	cp	r28, r24
    1e26:	d9 07       	cpc	r29, r25
    1e28:	20 f4       	brcc	.+8      	; 0x1e32 <prvAddCurrentTaskToDelayedList+0x9c>
    1e2a:	d0 93 82 09 	sts	0x0982, r29	; 0x800982 <xNextTaskUnblockTime+0x1>
    1e2e:	c0 93 81 09 	sts	0x0981, r28	; 0x800981 <xNextTaskUnblockTime>
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	ff 90       	pop	r15
    1e3c:	08 95       	ret

00001e3e <xTaskCreate>:
    1e3e:	4f 92       	push	r4
    1e40:	5f 92       	push	r5
    1e42:	6f 92       	push	r6
    1e44:	7f 92       	push	r7
    1e46:	8f 92       	push	r8
    1e48:	9f 92       	push	r9
    1e4a:	af 92       	push	r10
    1e4c:	bf 92       	push	r11
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	4c 01       	movw	r8, r24
    1e5e:	6b 01       	movw	r12, r22
    1e60:	5a 01       	movw	r10, r20
    1e62:	29 01       	movw	r4, r18
    1e64:	ca 01       	movw	r24, r20
    1e66:	de da       	rcall	.-2628   	; 0x1424 <pvPortMalloc>
    1e68:	3c 01       	movw	r6, r24
    1e6a:	89 2b       	or	r24, r25
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <xTaskCreate+0x32>
    1e6e:	d4 c0       	rjmp	.+424    	; 0x2018 <xTaskCreate+0x1da>
    1e70:	88 e2       	ldi	r24, 0x28	; 40
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	d7 da       	rcall	.-2642   	; 0x1424 <pvPortMalloc>
    1e76:	ec 01       	movw	r28, r24
    1e78:	89 2b       	or	r24, r25
    1e7a:	71 f0       	breq	.+28     	; 0x1e98 <xTaskCreate+0x5a>
    1e7c:	78 8e       	std	Y+24, r7	; 0x18
    1e7e:	6f 8a       	std	Y+23, r6	; 0x17
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	a8 1a       	sub	r10, r24
    1e84:	b1 08       	sbc	r11, r1
    1e86:	6a 0c       	add	r6, r10
    1e88:	7b 1c       	adc	r7, r11
    1e8a:	d6 01       	movw	r26, r12
    1e8c:	8c 91       	ld	r24, X
    1e8e:	89 8f       	std	Y+25, r24	; 0x19
    1e90:	8c 91       	ld	r24, X
    1e92:	81 11       	cpse	r24, r1
    1e94:	04 c0       	rjmp	.+8      	; 0x1e9e <xTaskCreate+0x60>
    1e96:	17 c0       	rjmp	.+46     	; 0x1ec6 <xTaskCreate+0x88>
    1e98:	c3 01       	movw	r24, r6
    1e9a:	f7 da       	rcall	.-2578   	; 0x148a <vPortFree>
    1e9c:	bd c0       	rjmp	.+378    	; 0x2018 <xTaskCreate+0x1da>
    1e9e:	ae 01       	movw	r20, r28
    1ea0:	46 5e       	subi	r20, 0xE6	; 230
    1ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea4:	f6 01       	movw	r30, r12
    1ea6:	31 96       	adiw	r30, 0x01	; 1
    1ea8:	b8 e0       	ldi	r27, 0x08	; 8
    1eaa:	cb 0e       	add	r12, r27
    1eac:	d1 1c       	adc	r13, r1
    1eae:	cf 01       	movw	r24, r30
    1eb0:	21 91       	ld	r18, Z+
    1eb2:	da 01       	movw	r26, r20
    1eb4:	2d 93       	st	X+, r18
    1eb6:	ad 01       	movw	r20, r26
    1eb8:	dc 01       	movw	r26, r24
    1eba:	8c 91       	ld	r24, X
    1ebc:	88 23       	and	r24, r24
    1ebe:	19 f0       	breq	.+6      	; 0x1ec6 <xTaskCreate+0x88>
    1ec0:	ec 15       	cp	r30, r12
    1ec2:	fd 05       	cpc	r31, r13
    1ec4:	a1 f7       	brne	.-24     	; 0x1eae <xTaskCreate+0x70>
    1ec6:	18 a2       	std	Y+32, r1	; 0x20
    1ec8:	04 30       	cpi	r16, 0x04	; 4
    1eca:	08 f0       	brcs	.+2      	; 0x1ece <xTaskCreate+0x90>
    1ecc:	03 e0       	ldi	r16, 0x03	; 3
    1ece:	0e 8b       	std	Y+22, r16	; 0x16
    1ed0:	09 a3       	std	Y+33, r16	; 0x21
    1ed2:	1a a2       	std	Y+34, r1	; 0x22
    1ed4:	6e 01       	movw	r12, r28
    1ed6:	b2 e0       	ldi	r27, 0x02	; 2
    1ed8:	cb 0e       	add	r12, r27
    1eda:	d1 1c       	adc	r13, r1
    1edc:	c6 01       	movw	r24, r12
    1ede:	e4 da       	rcall	.-2616   	; 0x14a8 <vListInitialiseItem>
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	0c 96       	adiw	r24, 0x0c	; 12
    1ee4:	e1 da       	rcall	.-2622   	; 0x14a8 <vListInitialiseItem>
    1ee6:	d9 87       	std	Y+9, r29	; 0x09
    1ee8:	c8 87       	std	Y+8, r28	; 0x08
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	80 1b       	sub	r24, r16
    1ef0:	91 09       	sbc	r25, r1
    1ef2:	9d 87       	std	Y+13, r25	; 0x0d
    1ef4:	8c 87       	std	Y+12, r24	; 0x0c
    1ef6:	db 8b       	std	Y+19, r29	; 0x13
    1ef8:	ca 8b       	std	Y+18, r28	; 0x12
    1efa:	1b a2       	std	Y+35, r1	; 0x23
    1efc:	1c a2       	std	Y+36, r1	; 0x24
    1efe:	1d a2       	std	Y+37, r1	; 0x25
    1f00:	1e a2       	std	Y+38, r1	; 0x26
    1f02:	1f a2       	std	Y+39, r1	; 0x27
    1f04:	a2 01       	movw	r20, r4
    1f06:	b4 01       	movw	r22, r8
    1f08:	c3 01       	movw	r24, r6
    1f0a:	4a db       	rcall	.-2412   	; 0x15a0 <pxPortInitialiseStack>
    1f0c:	99 83       	std	Y+1, r25	; 0x01
    1f0e:	88 83       	st	Y, r24
    1f10:	e1 14       	cp	r14, r1
    1f12:	f1 04       	cpc	r15, r1
    1f14:	19 f0       	breq	.+6      	; 0x1f1c <xTaskCreate+0xde>
    1f16:	f7 01       	movw	r30, r14
    1f18:	d1 83       	std	Z+1, r29	; 0x01
    1f1a:	c0 83       	st	Z, r28
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	0f 92       	push	r0
    1f22:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <uxCurrentNumberOfTasks>
    1f26:	8f 5f       	subi	r24, 0xFF	; 255
    1f28:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <uxCurrentNumberOfTasks>
    1f2c:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    1f30:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1f34:	89 2b       	or	r24, r25
    1f36:	89 f5       	brne	.+98     	; 0x1f9a <xTaskCreate+0x15c>
    1f38:	d0 93 e3 09 	sts	0x09E3, r29	; 0x8009e3 <pxCurrentTCB+0x1>
    1f3c:	c0 93 e2 09 	sts	0x09E2, r28	; 0x8009e2 <pxCurrentTCB>
    1f40:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <uxCurrentNumberOfTasks>
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <xTaskCreate+0x10c>
    1f48:	38 c0       	rjmp	.+112    	; 0x1fba <xTaskCreate+0x17c>
    1f4a:	8e eb       	ldi	r24, 0xBE	; 190
    1f4c:	99 e0       	ldi	r25, 0x09	; 9
    1f4e:	9e da       	rcall	.-2756   	; 0x148c <vListInitialise>
    1f50:	87 ec       	ldi	r24, 0xC7	; 199
    1f52:	99 e0       	ldi	r25, 0x09	; 9
    1f54:	9b da       	rcall	.-2762   	; 0x148c <vListInitialise>
    1f56:	80 ed       	ldi	r24, 0xD0	; 208
    1f58:	99 e0       	ldi	r25, 0x09	; 9
    1f5a:	98 da       	rcall	.-2768   	; 0x148c <vListInitialise>
    1f5c:	89 ed       	ldi	r24, 0xD9	; 217
    1f5e:	99 e0       	ldi	r25, 0x09	; 9
    1f60:	95 da       	rcall	.-2774   	; 0x148c <vListInitialise>
    1f62:	85 eb       	ldi	r24, 0xB5	; 181
    1f64:	99 e0       	ldi	r25, 0x09	; 9
    1f66:	92 da       	rcall	.-2780   	; 0x148c <vListInitialise>
    1f68:	8c ea       	ldi	r24, 0xAC	; 172
    1f6a:	99 e0       	ldi	r25, 0x09	; 9
    1f6c:	8f da       	rcall	.-2786   	; 0x148c <vListInitialise>
    1f6e:	8f e9       	ldi	r24, 0x9F	; 159
    1f70:	99 e0       	ldi	r25, 0x09	; 9
    1f72:	8c da       	rcall	.-2792   	; 0x148c <vListInitialise>
    1f74:	86 e9       	ldi	r24, 0x96	; 150
    1f76:	99 e0       	ldi	r25, 0x09	; 9
    1f78:	89 da       	rcall	.-2798   	; 0x148c <vListInitialise>
    1f7a:	8c e8       	ldi	r24, 0x8C	; 140
    1f7c:	99 e0       	ldi	r25, 0x09	; 9
    1f7e:	86 da       	rcall	.-2804   	; 0x148c <vListInitialise>
    1f80:	85 eb       	ldi	r24, 0xB5	; 181
    1f82:	99 e0       	ldi	r25, 0x09	; 9
    1f84:	90 93 ab 09 	sts	0x09AB, r25	; 0x8009ab <pxDelayedTaskList+0x1>
    1f88:	80 93 aa 09 	sts	0x09AA, r24	; 0x8009aa <pxDelayedTaskList>
    1f8c:	8c ea       	ldi	r24, 0xAC	; 172
    1f8e:	99 e0       	ldi	r25, 0x09	; 9
    1f90:	90 93 a9 09 	sts	0x09A9, r25	; 0x8009a9 <pxOverflowDelayedTaskList+0x1>
    1f94:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <pxOverflowDelayedTaskList>
    1f98:	10 c0       	rjmp	.+32     	; 0x1fba <xTaskCreate+0x17c>
    1f9a:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <xSchedulerRunning>
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	0c c0       	rjmp	.+24     	; 0x1fba <xTaskCreate+0x17c>
    1fa2:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    1fa6:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    1faa:	96 89       	ldd	r25, Z+22	; 0x16
    1fac:	8e 89       	ldd	r24, Y+22	; 0x16
    1fae:	89 17       	cp	r24, r25
    1fb0:	20 f0       	brcs	.+8      	; 0x1fba <xTaskCreate+0x17c>
    1fb2:	d0 93 e3 09 	sts	0x09E3, r29	; 0x8009e3 <pxCurrentTCB+0x1>
    1fb6:	c0 93 e2 09 	sts	0x09E2, r28	; 0x8009e2 <pxCurrentTCB>
    1fba:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <uxTaskNumber>
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <uxTaskNumber>
    1fc4:	8e 89       	ldd	r24, Y+22	; 0x16
    1fc6:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <uxTopReadyPriority>
    1fca:	98 17       	cp	r25, r24
    1fcc:	10 f4       	brcc	.+4      	; 0x1fd2 <xTaskCreate+0x194>
    1fce:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <uxTopReadyPriority>
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9c 01       	movw	r18, r24
    1fd6:	22 0f       	add	r18, r18
    1fd8:	33 1f       	adc	r19, r19
    1fda:	22 0f       	add	r18, r18
    1fdc:	33 1f       	adc	r19, r19
    1fde:	22 0f       	add	r18, r18
    1fe0:	33 1f       	adc	r19, r19
    1fe2:	82 0f       	add	r24, r18
    1fe4:	93 1f       	adc	r25, r19
    1fe6:	b6 01       	movw	r22, r12
    1fe8:	82 54       	subi	r24, 0x42	; 66
    1fea:	96 4f       	sbci	r25, 0xF6	; 246
    1fec:	61 da       	rcall	.-2878   	; 0x14b0 <vListInsertEnd>
    1fee:	0f 90       	pop	r0
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <xSchedulerRunning>
    1ff6:	88 23       	and	r24, r24
    1ff8:	59 f0       	breq	.+22     	; 0x2010 <xTaskCreate+0x1d2>
    1ffa:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    1ffe:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    2002:	96 89       	ldd	r25, Z+22	; 0x16
    2004:	8e 89       	ldd	r24, Y+22	; 0x16
    2006:	98 17       	cp	r25, r24
    2008:	28 f4       	brcc	.+10     	; 0x2014 <xTaskCreate+0x1d6>
    200a:	6b db       	rcall	.-2346   	; 0x16e2 <vPortYield>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	05 c0       	rjmp	.+10     	; 0x201a <xTaskCreate+0x1dc>
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	03 c0       	rjmp	.+6      	; 0x201a <xTaskCreate+0x1dc>
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	01 c0       	rjmp	.+2      	; 0x201a <xTaskCreate+0x1dc>
    2018:	8f ef       	ldi	r24, 0xFF	; 255
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	df 90       	pop	r13
    2026:	cf 90       	pop	r12
    2028:	bf 90       	pop	r11
    202a:	af 90       	pop	r10
    202c:	9f 90       	pop	r9
    202e:	8f 90       	pop	r8
    2030:	7f 90       	pop	r7
    2032:	6f 90       	pop	r6
    2034:	5f 90       	pop	r5
    2036:	4f 90       	pop	r4
    2038:	08 95       	ret

0000203a <vTaskStartScheduler>:
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	0f 93       	push	r16
    2040:	0f 2e       	mov	r0, r31
    2042:	ff e7       	ldi	r31, 0x7F	; 127
    2044:	ef 2e       	mov	r14, r31
    2046:	f9 e0       	ldi	r31, 0x09	; 9
    2048:	ff 2e       	mov	r15, r31
    204a:	f0 2d       	mov	r31, r0
    204c:	00 e0       	ldi	r16, 0x00	; 0
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	45 e5       	ldi	r20, 0x55	; 85
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	6a e2       	ldi	r22, 0x2A	; 42
    2058:	71 e0       	ldi	r23, 0x01	; 1
    205a:	8b e8       	ldi	r24, 0x8B	; 139
    205c:	91 e1       	ldi	r25, 0x11	; 17
    205e:	ef de       	rcall	.-546    	; 0x1e3e <xTaskCreate>
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	79 f4       	brne	.+30     	; 0x2082 <vTaskStartScheduler+0x48>
    2064:	f8 94       	cli
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	9f ef       	ldi	r25, 0xFF	; 255
    206a:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <xNextTaskUnblockTime+0x1>
    206e:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <xNextTaskUnblockTime>
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <xSchedulerRunning>
    2078:	10 92 8a 09 	sts	0x098A, r1	; 0x80098a <xTickCount+0x1>
    207c:	10 92 89 09 	sts	0x0989, r1	; 0x800989 <xTickCount>
    2080:	fb da       	rcall	.-2570   	; 0x1678 <xPortStartScheduler>
    2082:	0f 91       	pop	r16
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	08 95       	ret

0000208a <vTaskSuspendAll>:
    208a:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <uxSchedulerSuspended>
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <uxSchedulerSuspended>
    2094:	08 95       	ret

00002096 <xTaskIncrementTick>:
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <uxSchedulerSuspended>
    20aa:	81 11       	cpse	r24, r1
    20ac:	95 c0       	rjmp	.+298    	; 0x21d8 <xTaskIncrementTick+0x142>
    20ae:	e0 90 89 09 	lds	r14, 0x0989	; 0x800989 <xTickCount>
    20b2:	f0 90 8a 09 	lds	r15, 0x098A	; 0x80098a <xTickCount+0x1>
    20b6:	8f ef       	ldi	r24, 0xFF	; 255
    20b8:	e8 1a       	sub	r14, r24
    20ba:	f8 0a       	sbc	r15, r24
    20bc:	f0 92 8a 09 	sts	0x098A, r15	; 0x80098a <xTickCount+0x1>
    20c0:	e0 92 89 09 	sts	0x0989, r14	; 0x800989 <xTickCount>
    20c4:	e1 14       	cp	r14, r1
    20c6:	f1 04       	cpc	r15, r1
    20c8:	b1 f4       	brne	.+44     	; 0x20f6 <xTaskIncrementTick+0x60>
    20ca:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <pxDelayedTaskList>
    20ce:	90 91 ab 09 	lds	r25, 0x09AB	; 0x8009ab <pxDelayedTaskList+0x1>
    20d2:	20 91 a8 09 	lds	r18, 0x09A8	; 0x8009a8 <pxOverflowDelayedTaskList>
    20d6:	30 91 a9 09 	lds	r19, 0x09A9	; 0x8009a9 <pxOverflowDelayedTaskList+0x1>
    20da:	30 93 ab 09 	sts	0x09AB, r19	; 0x8009ab <pxDelayedTaskList+0x1>
    20de:	20 93 aa 09 	sts	0x09AA, r18	; 0x8009aa <pxDelayedTaskList>
    20e2:	90 93 a9 09 	sts	0x09A9, r25	; 0x8009a9 <pxOverflowDelayedTaskList+0x1>
    20e6:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <pxOverflowDelayedTaskList>
    20ea:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <xNumOfOverflows>
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <xNumOfOverflows>
    20f4:	31 de       	rcall	.-926    	; 0x1d58 <prvResetNextTaskUnblockTime>
    20f6:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <xNextTaskUnblockTime>
    20fa:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <xNextTaskUnblockTime+0x1>
    20fe:	e8 16       	cp	r14, r24
    2100:	f9 06       	cpc	r15, r25
    2102:	10 f4       	brcc	.+4      	; 0x2108 <xTaskIncrementTick+0x72>
    2104:	d1 2c       	mov	r13, r1
    2106:	50 c0       	rjmp	.+160    	; 0x21a8 <xTaskIncrementTick+0x112>
    2108:	d1 2c       	mov	r13, r1
    210a:	cc 24       	eor	r12, r12
    210c:	c3 94       	inc	r12
    210e:	e0 91 aa 09 	lds	r30, 0x09AA	; 0x8009aa <pxDelayedTaskList>
    2112:	f0 91 ab 09 	lds	r31, 0x09AB	; 0x8009ab <pxDelayedTaskList+0x1>
    2116:	90 81       	ld	r25, Z
    2118:	91 11       	cpse	r25, r1
    211a:	07 c0       	rjmp	.+14     	; 0x212a <xTaskIncrementTick+0x94>
    211c:	8f ef       	ldi	r24, 0xFF	; 255
    211e:	9f ef       	ldi	r25, 0xFF	; 255
    2120:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <xNextTaskUnblockTime+0x1>
    2124:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <xNextTaskUnblockTime>
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <xTaskIncrementTick+0x112>
    212a:	e0 91 aa 09 	lds	r30, 0x09AA	; 0x8009aa <pxDelayedTaskList>
    212e:	f0 91 ab 09 	lds	r31, 0x09AB	; 0x8009ab <pxDelayedTaskList+0x1>
    2132:	05 80       	ldd	r0, Z+5	; 0x05
    2134:	f6 81       	ldd	r31, Z+6	; 0x06
    2136:	e0 2d       	mov	r30, r0
    2138:	c6 81       	ldd	r28, Z+6	; 0x06
    213a:	d7 81       	ldd	r29, Z+7	; 0x07
    213c:	2a 81       	ldd	r18, Y+2	; 0x02
    213e:	3b 81       	ldd	r19, Y+3	; 0x03
    2140:	e2 16       	cp	r14, r18
    2142:	f3 06       	cpc	r15, r19
    2144:	28 f4       	brcc	.+10     	; 0x2150 <xTaskIncrementTick+0xba>
    2146:	30 93 82 09 	sts	0x0982, r19	; 0x800982 <xNextTaskUnblockTime+0x1>
    214a:	20 93 81 09 	sts	0x0981, r18	; 0x800981 <xNextTaskUnblockTime>
    214e:	2c c0       	rjmp	.+88     	; 0x21a8 <xTaskIncrementTick+0x112>
    2150:	8e 01       	movw	r16, r28
    2152:	0e 5f       	subi	r16, 0xFE	; 254
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	c8 01       	movw	r24, r16
    2158:	fd d9       	rcall	.-3078   	; 0x1554 <uxListRemove>
    215a:	8c 89       	ldd	r24, Y+20	; 0x14
    215c:	9d 89       	ldd	r25, Y+21	; 0x15
    215e:	89 2b       	or	r24, r25
    2160:	19 f0       	breq	.+6      	; 0x2168 <xTaskIncrementTick+0xd2>
    2162:	ce 01       	movw	r24, r28
    2164:	0c 96       	adiw	r24, 0x0c	; 12
    2166:	f6 d9       	rcall	.-3092   	; 0x1554 <uxListRemove>
    2168:	2e 89       	ldd	r18, Y+22	; 0x16
    216a:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <uxTopReadyPriority>
    216e:	82 17       	cp	r24, r18
    2170:	10 f4       	brcc	.+4      	; 0x2176 <xTaskIncrementTick+0xe0>
    2172:	20 93 88 09 	sts	0x0988, r18	; 0x800988 <uxTopReadyPriority>
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	c9 01       	movw	r24, r18
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	82 0f       	add	r24, r18
    2188:	93 1f       	adc	r25, r19
    218a:	b8 01       	movw	r22, r16
    218c:	82 54       	subi	r24, 0x42	; 66
    218e:	96 4f       	sbci	r25, 0xF6	; 246
    2190:	8f d9       	rcall	.-3298   	; 0x14b0 <vListInsertEnd>
    2192:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    2196:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    219a:	9e 89       	ldd	r25, Y+22	; 0x16
    219c:	86 89       	ldd	r24, Z+22	; 0x16
    219e:	98 17       	cp	r25, r24
    21a0:	08 f4       	brcc	.+2      	; 0x21a4 <xTaskIncrementTick+0x10e>
    21a2:	b5 cf       	rjmp	.-150    	; 0x210e <xTaskIncrementTick+0x78>
    21a4:	dc 2c       	mov	r13, r12
    21a6:	b3 cf       	rjmp	.-154    	; 0x210e <xTaskIncrementTick+0x78>
    21a8:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    21ac:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    21b0:	86 89       	ldd	r24, Z+22	; 0x16
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	fc 01       	movw	r30, r24
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	8e 0f       	add	r24, r30
    21c4:	9f 1f       	adc	r25, r31
    21c6:	fc 01       	movw	r30, r24
    21c8:	e2 54       	subi	r30, 0x42	; 66
    21ca:	f6 4f       	sbci	r31, 0xF6	; 246
    21cc:	80 81       	ld	r24, Z
    21ce:	82 30       	cpi	r24, 0x02	; 2
    21d0:	48 f0       	brcs	.+18     	; 0x21e4 <xTaskIncrementTick+0x14e>
    21d2:	dd 24       	eor	r13, r13
    21d4:	d3 94       	inc	r13
    21d6:	06 c0       	rjmp	.+12     	; 0x21e4 <xTaskIncrementTick+0x14e>
    21d8:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <uxPendedTicks>
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <uxPendedTicks>
    21e2:	d1 2c       	mov	r13, r1
    21e4:	80 91 85 09 	lds	r24, 0x0985	; 0x800985 <xYieldPending>
    21e8:	88 23       	and	r24, r24
    21ea:	11 f0       	breq	.+4      	; 0x21f0 <xTaskIncrementTick+0x15a>
    21ec:	dd 24       	eor	r13, r13
    21ee:	d3 94       	inc	r13
    21f0:	8d 2d       	mov	r24, r13
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	ff 90       	pop	r15
    21fc:	ef 90       	pop	r14
    21fe:	df 90       	pop	r13
    2200:	cf 90       	pop	r12
    2202:	08 95       	ret

00002204 <xTaskResumeAll>:
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	0f 92       	push	r0
    2218:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <uxSchedulerSuspended>
    221c:	81 50       	subi	r24, 0x01	; 1
    221e:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <uxSchedulerSuspended>
    2222:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <uxSchedulerSuspended>
    2226:	81 11       	cpse	r24, r1
    2228:	59 c0       	rjmp	.+178    	; 0x22dc <xTaskResumeAll+0xd8>
    222a:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <uxCurrentNumberOfTasks>
    222e:	81 11       	cpse	r24, r1
    2230:	30 c0       	rjmp	.+96     	; 0x2292 <xTaskResumeAll+0x8e>
    2232:	57 c0       	rjmp	.+174    	; 0x22e2 <xTaskResumeAll+0xde>
    2234:	d7 01       	movw	r26, r14
    2236:	15 96       	adiw	r26, 0x05	; 5
    2238:	ed 91       	ld	r30, X+
    223a:	fc 91       	ld	r31, X
    223c:	16 97       	sbiw	r26, 0x06	; 6
    223e:	c6 81       	ldd	r28, Z+6	; 0x06
    2240:	d7 81       	ldd	r29, Z+7	; 0x07
    2242:	ce 01       	movw	r24, r28
    2244:	0c 96       	adiw	r24, 0x0c	; 12
    2246:	86 d9       	rcall	.-3316   	; 0x1554 <uxListRemove>
    2248:	8e 01       	movw	r16, r28
    224a:	0e 5f       	subi	r16, 0xFE	; 254
    224c:	1f 4f       	sbci	r17, 0xFF	; 255
    224e:	c8 01       	movw	r24, r16
    2250:	81 d9       	rcall	.-3326   	; 0x1554 <uxListRemove>
    2252:	2e 89       	ldd	r18, Y+22	; 0x16
    2254:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <uxTopReadyPriority>
    2258:	82 17       	cp	r24, r18
    225a:	10 f4       	brcc	.+4      	; 0x2260 <xTaskResumeAll+0x5c>
    225c:	20 93 88 09 	sts	0x0988, r18	; 0x800988 <uxTopReadyPriority>
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	c9 01       	movw	r24, r18
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	82 0f       	add	r24, r18
    2272:	93 1f       	adc	r25, r19
    2274:	b8 01       	movw	r22, r16
    2276:	82 54       	subi	r24, 0x42	; 66
    2278:	96 4f       	sbci	r25, 0xF6	; 246
    227a:	1a d9       	rcall	.-3532   	; 0x14b0 <vListInsertEnd>
    227c:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    2280:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    2284:	9e 89       	ldd	r25, Y+22	; 0x16
    2286:	86 89       	ldd	r24, Z+22	; 0x16
    2288:	98 17       	cp	r25, r24
    228a:	68 f0       	brcs	.+26     	; 0x22a6 <xTaskResumeAll+0xa2>
    228c:	d0 92 85 09 	sts	0x0985, r13	; 0x800985 <xYieldPending>
    2290:	0a c0       	rjmp	.+20     	; 0x22a6 <xTaskResumeAll+0xa2>
    2292:	c0 e0       	ldi	r28, 0x00	; 0
    2294:	d0 e0       	ldi	r29, 0x00	; 0
    2296:	0f 2e       	mov	r0, r31
    2298:	ff e9       	ldi	r31, 0x9F	; 159
    229a:	ef 2e       	mov	r14, r31
    229c:	f9 e0       	ldi	r31, 0x09	; 9
    229e:	ff 2e       	mov	r15, r31
    22a0:	f0 2d       	mov	r31, r0
    22a2:	dd 24       	eor	r13, r13
    22a4:	d3 94       	inc	r13
    22a6:	f7 01       	movw	r30, r14
    22a8:	80 81       	ld	r24, Z
    22aa:	81 11       	cpse	r24, r1
    22ac:	c3 cf       	rjmp	.-122    	; 0x2234 <xTaskResumeAll+0x30>
    22ae:	cd 2b       	or	r28, r29
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <xTaskResumeAll+0xb0>
    22b2:	52 dd       	rcall	.-1372   	; 0x1d58 <prvResetNextTaskUnblockTime>
    22b4:	c0 91 86 09 	lds	r28, 0x0986	; 0x800986 <uxPendedTicks>
    22b8:	cc 23       	and	r28, r28
    22ba:	49 f0       	breq	.+18     	; 0x22ce <xTaskResumeAll+0xca>
    22bc:	d1 e0       	ldi	r29, 0x01	; 1
    22be:	eb de       	rcall	.-554    	; 0x2096 <xTaskIncrementTick>
    22c0:	81 11       	cpse	r24, r1
    22c2:	d0 93 85 09 	sts	0x0985, r29	; 0x800985 <xYieldPending>
    22c6:	c1 50       	subi	r28, 0x01	; 1
    22c8:	d1 f7       	brne	.-12     	; 0x22be <xTaskResumeAll+0xba>
    22ca:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <uxPendedTicks>
    22ce:	80 91 85 09 	lds	r24, 0x0985	; 0x800985 <xYieldPending>
    22d2:	88 23       	and	r24, r24
    22d4:	29 f0       	breq	.+10     	; 0x22e0 <xTaskResumeAll+0xdc>
    22d6:	05 da       	rcall	.-3062   	; 0x16e2 <vPortYield>
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <xTaskResumeAll+0xde>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <xTaskResumeAll+0xde>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	0f 90       	pop	r0
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	08 95       	ret

000022f6 <vTaskDelay>:
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	ec 01       	movw	r28, r24
    22fc:	89 2b       	or	r24, r25
    22fe:	39 f0       	breq	.+14     	; 0x230e <vTaskDelay+0x18>
    2300:	c4 de       	rcall	.-632    	; 0x208a <vTaskSuspendAll>
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	ce 01       	movw	r24, r28
    2306:	47 dd       	rcall	.-1394   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    2308:	7d df       	rcall	.-262    	; 0x2204 <xTaskResumeAll>
    230a:	81 11       	cpse	r24, r1
    230c:	01 c0       	rjmp	.+2      	; 0x2310 <vTaskDelay+0x1a>
    230e:	e9 d9       	rcall	.-3118   	; 0x16e2 <vPortYield>
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	08 95       	ret

00002316 <prvIdleTask>:
    2316:	06 e9       	ldi	r16, 0x96	; 150
    2318:	19 e0       	ldi	r17, 0x09	; 9
    231a:	0f 2e       	mov	r0, r31
    231c:	fe eb       	ldi	r31, 0xBE	; 190
    231e:	ef 2e       	mov	r14, r31
    2320:	f9 e0       	ldi	r31, 0x09	; 9
    2322:	ff 2e       	mov	r15, r31
    2324:	f0 2d       	mov	r31, r0
    2326:	24 c0       	rjmp	.+72     	; 0x2370 <prvIdleTask+0x5a>
    2328:	b0 de       	rcall	.-672    	; 0x208a <vTaskSuspendAll>
    232a:	d8 01       	movw	r26, r16
    232c:	cc 91       	ld	r28, X
    232e:	6a df       	rcall	.-300    	; 0x2204 <xTaskResumeAll>
    2330:	cc 23       	and	r28, r28
    2332:	f1 f0       	breq	.+60     	; 0x2370 <prvIdleTask+0x5a>
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	0f 92       	push	r0
    233a:	d8 01       	movw	r26, r16
    233c:	15 96       	adiw	r26, 0x05	; 5
    233e:	ed 91       	ld	r30, X+
    2340:	fc 91       	ld	r31, X
    2342:	16 97       	sbiw	r26, 0x06	; 6
    2344:	c6 81       	ldd	r28, Z+6	; 0x06
    2346:	d7 81       	ldd	r29, Z+7	; 0x07
    2348:	ce 01       	movw	r24, r28
    234a:	02 96       	adiw	r24, 0x02	; 2
    234c:	03 d9       	rcall	.-3578   	; 0x1554 <uxListRemove>
    234e:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <uxCurrentNumberOfTasks>
    2352:	81 50       	subi	r24, 0x01	; 1
    2354:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <uxCurrentNumberOfTasks>
    2358:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <uxDeletedTasksWaitingCleanUp>
    235c:	81 50       	subi	r24, 0x01	; 1
    235e:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <uxDeletedTasksWaitingCleanUp>
    2362:	0f 90       	pop	r0
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	8f 89       	ldd	r24, Y+23	; 0x17
    2368:	98 8d       	ldd	r25, Y+24	; 0x18
    236a:	8f d8       	rcall	.-3810   	; 0x148a <vPortFree>
    236c:	ce 01       	movw	r24, r28
    236e:	8d d8       	rcall	.-3814   	; 0x148a <vPortFree>
    2370:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <uxDeletedTasksWaitingCleanUp>
    2374:	81 11       	cpse	r24, r1
    2376:	d8 cf       	rjmp	.-80     	; 0x2328 <prvIdleTask+0x12>
    2378:	f7 01       	movw	r30, r14
    237a:	80 81       	ld	r24, Z
    237c:	82 30       	cpi	r24, 0x02	; 2
    237e:	c0 f3       	brcs	.-16     	; 0x2370 <prvIdleTask+0x5a>
    2380:	b0 d9       	rcall	.-3232   	; 0x16e2 <vPortYield>
    2382:	f6 cf       	rjmp	.-20     	; 0x2370 <prvIdleTask+0x5a>

00002384 <vTaskSwitchContext>:
    2384:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <uxSchedulerSuspended>
    2388:	88 23       	and	r24, r24
    238a:	21 f0       	breq	.+8      	; 0x2394 <vTaskSwitchContext+0x10>
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <xYieldPending>
    2392:	08 95       	ret
    2394:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <xYieldPending>
    2398:	a0 91 e2 09 	lds	r26, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    239c:	b0 91 e3 09 	lds	r27, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    23a0:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    23a4:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    23a8:	2d 91       	ld	r18, X+
    23aa:	3c 91       	ld	r19, X
    23ac:	87 89       	ldd	r24, Z+23	; 0x17
    23ae:	90 8d       	ldd	r25, Z+24	; 0x18
    23b0:	82 17       	cp	r24, r18
    23b2:	93 07       	cpc	r25, r19
    23b4:	58 f0       	brcs	.+22     	; 0x23cc <vTaskSwitchContext+0x48>
    23b6:	60 91 e2 09 	lds	r22, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    23ba:	70 91 e3 09 	lds	r23, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    23be:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    23c2:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    23c6:	67 5e       	subi	r22, 0xE7	; 231
    23c8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ca:	2b d8       	rcall	.-4010   	; 0x1422 <vApplicationStackOverflowHook>
    23cc:	20 91 88 09 	lds	r18, 0x0988	; 0x800988 <uxTopReadyPriority>
    23d0:	82 2f       	mov	r24, r18
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	fc 01       	movw	r30, r24
    23d6:	ee 0f       	add	r30, r30
    23d8:	ff 1f       	adc	r31, r31
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	e8 0f       	add	r30, r24
    23e4:	f9 1f       	adc	r31, r25
    23e6:	e2 54       	subi	r30, 0x42	; 66
    23e8:	f6 4f       	sbci	r31, 0xF6	; 246
    23ea:	30 81       	ld	r19, Z
    23ec:	31 11       	cpse	r19, r1
    23ee:	11 c0       	rjmp	.+34     	; 0x2412 <vTaskSwitchContext+0x8e>
    23f0:	21 50       	subi	r18, 0x01	; 1
    23f2:	82 2f       	mov	r24, r18
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	fc 01       	movw	r30, r24
    23f8:	ee 0f       	add	r30, r30
    23fa:	ff 1f       	adc	r31, r31
    23fc:	ee 0f       	add	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	e8 0f       	add	r30, r24
    2406:	f9 1f       	adc	r31, r25
    2408:	e2 54       	subi	r30, 0x42	; 66
    240a:	f6 4f       	sbci	r31, 0xF6	; 246
    240c:	30 81       	ld	r19, Z
    240e:	33 23       	and	r19, r19
    2410:	79 f3       	breq	.-34     	; 0x23f0 <vTaskSwitchContext+0x6c>
    2412:	ac 01       	movw	r20, r24
    2414:	44 0f       	add	r20, r20
    2416:	55 1f       	adc	r21, r21
    2418:	44 0f       	add	r20, r20
    241a:	55 1f       	adc	r21, r21
    241c:	44 0f       	add	r20, r20
    241e:	55 1f       	adc	r21, r21
    2420:	48 0f       	add	r20, r24
    2422:	59 1f       	adc	r21, r25
    2424:	da 01       	movw	r26, r20
    2426:	a2 54       	subi	r26, 0x42	; 66
    2428:	b6 4f       	sbci	r27, 0xF6	; 246
    242a:	11 96       	adiw	r26, 0x01	; 1
    242c:	ed 91       	ld	r30, X+
    242e:	fc 91       	ld	r31, X
    2430:	12 97       	sbiw	r26, 0x02	; 2
    2432:	02 80       	ldd	r0, Z+2	; 0x02
    2434:	f3 81       	ldd	r31, Z+3	; 0x03
    2436:	e0 2d       	mov	r30, r0
    2438:	12 96       	adiw	r26, 0x02	; 2
    243a:	fc 93       	st	X, r31
    243c:	ee 93       	st	-X, r30
    243e:	11 97       	sbiw	r26, 0x01	; 1
    2440:	4f 53       	subi	r20, 0x3F	; 63
    2442:	56 4f       	sbci	r21, 0xF6	; 246
    2444:	e4 17       	cp	r30, r20
    2446:	f5 07       	cpc	r31, r21
    2448:	29 f4       	brne	.+10     	; 0x2454 <vTaskSwitchContext+0xd0>
    244a:	42 81       	ldd	r20, Z+2	; 0x02
    244c:	53 81       	ldd	r21, Z+3	; 0x03
    244e:	fd 01       	movw	r30, r26
    2450:	52 83       	std	Z+2, r21	; 0x02
    2452:	41 83       	std	Z+1, r20	; 0x01
    2454:	fc 01       	movw	r30, r24
    2456:	ee 0f       	add	r30, r30
    2458:	ff 1f       	adc	r31, r31
    245a:	ee 0f       	add	r30, r30
    245c:	ff 1f       	adc	r31, r31
    245e:	ee 0f       	add	r30, r30
    2460:	ff 1f       	adc	r31, r31
    2462:	8e 0f       	add	r24, r30
    2464:	9f 1f       	adc	r25, r31
    2466:	fc 01       	movw	r30, r24
    2468:	e2 54       	subi	r30, 0x42	; 66
    246a:	f6 4f       	sbci	r31, 0xF6	; 246
    246c:	01 80       	ldd	r0, Z+1	; 0x01
    246e:	f2 81       	ldd	r31, Z+2	; 0x02
    2470:	e0 2d       	mov	r30, r0
    2472:	86 81       	ldd	r24, Z+6	; 0x06
    2474:	97 81       	ldd	r25, Z+7	; 0x07
    2476:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <pxCurrentTCB+0x1>
    247a:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <pxCurrentTCB>
    247e:	20 93 88 09 	sts	0x0988, r18	; 0x800988 <uxTopReadyPriority>
    2482:	08 95       	ret

00002484 <vTaskPlaceOnEventList>:
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	eb 01       	movw	r28, r22
    248a:	20 91 e2 09 	lds	r18, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    248e:	30 91 e3 09 	lds	r19, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    2492:	b9 01       	movw	r22, r18
    2494:	64 5f       	subi	r22, 0xF4	; 244
    2496:	7f 4f       	sbci	r23, 0xFF	; 255
    2498:	2c d8       	rcall	.-4008   	; 0x14f2 <vListInsert>
    249a:	61 e0       	ldi	r22, 0x01	; 1
    249c:	ce 01       	movw	r24, r28
    249e:	7b dc       	rcall	.-1802   	; 0x1d96 <prvAddCurrentTaskToDelayedList>
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	08 95       	ret

000024a6 <xTaskRemoveFromEventList>:
    24a6:	0f 93       	push	r16
    24a8:	1f 93       	push	r17
    24aa:	cf 93       	push	r28
    24ac:	df 93       	push	r29
    24ae:	dc 01       	movw	r26, r24
    24b0:	15 96       	adiw	r26, 0x05	; 5
    24b2:	ed 91       	ld	r30, X+
    24b4:	fc 91       	ld	r31, X
    24b6:	16 97       	sbiw	r26, 0x06	; 6
    24b8:	c6 81       	ldd	r28, Z+6	; 0x06
    24ba:	d7 81       	ldd	r29, Z+7	; 0x07
    24bc:	8e 01       	movw	r16, r28
    24be:	04 5f       	subi	r16, 0xF4	; 244
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	c8 01       	movw	r24, r16
    24c4:	47 d8       	rcall	.-3954   	; 0x1554 <uxListRemove>
    24c6:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <uxSchedulerSuspended>
    24ca:	81 11       	cpse	r24, r1
    24cc:	1b c0       	rjmp	.+54     	; 0x2504 <xTaskRemoveFromEventList+0x5e>
    24ce:	0a 50       	subi	r16, 0x0A	; 10
    24d0:	11 09       	sbc	r17, r1
    24d2:	c8 01       	movw	r24, r16
    24d4:	3f d8       	rcall	.-3970   	; 0x1554 <uxListRemove>
    24d6:	2e 89       	ldd	r18, Y+22	; 0x16
    24d8:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <uxTopReadyPriority>
    24dc:	82 17       	cp	r24, r18
    24de:	10 f4       	brcc	.+4      	; 0x24e4 <xTaskRemoveFromEventList+0x3e>
    24e0:	20 93 88 09 	sts	0x0988, r18	; 0x800988 <uxTopReadyPriority>
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	c9 01       	movw	r24, r18
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	82 0f       	add	r24, r18
    24f6:	93 1f       	adc	r25, r19
    24f8:	b8 01       	movw	r22, r16
    24fa:	82 54       	subi	r24, 0x42	; 66
    24fc:	96 4f       	sbci	r25, 0xF6	; 246
    24fe:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    2502:	05 c0       	rjmp	.+10     	; 0x250e <xTaskRemoveFromEventList+0x68>
    2504:	b8 01       	movw	r22, r16
    2506:	8f e9       	ldi	r24, 0x9F	; 159
    2508:	99 e0       	ldi	r25, 0x09	; 9
    250a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    250e:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    2512:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    2516:	9e 89       	ldd	r25, Y+22	; 0x16
    2518:	86 89       	ldd	r24, Z+22	; 0x16
    251a:	89 17       	cp	r24, r25
    251c:	20 f4       	brcc	.+8      	; 0x2526 <xTaskRemoveFromEventList+0x80>
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <xYieldPending>
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <xTaskRemoveFromEventList+0x82>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	08 95       	ret

00002532 <vTaskSetTimeOutState>:
    2532:	20 91 84 09 	lds	r18, 0x0984	; 0x800984 <xNumOfOverflows>
    2536:	fc 01       	movw	r30, r24
    2538:	20 83       	st	Z, r18
    253a:	20 91 89 09 	lds	r18, 0x0989	; 0x800989 <xTickCount>
    253e:	30 91 8a 09 	lds	r19, 0x098A	; 0x80098a <xTickCount+0x1>
    2542:	32 83       	std	Z+2, r19	; 0x02
    2544:	21 83       	std	Z+1, r18	; 0x01
    2546:	08 95       	ret

00002548 <xTaskCheckForTimeOut>:
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	0f 92       	push	r0
    254e:	40 91 89 09 	lds	r20, 0x0989	; 0x800989 <xTickCount>
    2552:	50 91 8a 09 	lds	r21, 0x098A	; 0x80098a <xTickCount+0x1>
    2556:	db 01       	movw	r26, r22
    2558:	2d 91       	ld	r18, X+
    255a:	3c 91       	ld	r19, X
    255c:	2f 3f       	cpi	r18, 0xFF	; 255
    255e:	bf ef       	ldi	r27, 0xFF	; 255
    2560:	3b 07       	cpc	r19, r27
    2562:	11 f1       	breq	.+68     	; 0x25a8 <xTaskCheckForTimeOut+0x60>
    2564:	e0 91 84 09 	lds	r30, 0x0984	; 0x800984 <xNumOfOverflows>
    2568:	dc 01       	movw	r26, r24
    256a:	fc 91       	ld	r31, X
    256c:	fe 17       	cp	r31, r30
    256e:	39 f0       	breq	.+14     	; 0x257e <xTaskCheckForTimeOut+0x36>
    2570:	11 96       	adiw	r26, 0x01	; 1
    2572:	ed 91       	ld	r30, X+
    2574:	fc 91       	ld	r31, X
    2576:	12 97       	sbiw	r26, 0x02	; 2
    2578:	4e 17       	cp	r20, r30
    257a:	5f 07       	cpc	r21, r31
    257c:	b8 f4       	brcc	.+46     	; 0x25ac <xTaskCheckForTimeOut+0x64>
    257e:	dc 01       	movw	r26, r24
    2580:	11 96       	adiw	r26, 0x01	; 1
    2582:	ed 91       	ld	r30, X+
    2584:	fc 91       	ld	r31, X
    2586:	12 97       	sbiw	r26, 0x02	; 2
    2588:	da 01       	movw	r26, r20
    258a:	ae 1b       	sub	r26, r30
    258c:	bf 0b       	sbc	r27, r31
    258e:	a2 17       	cp	r26, r18
    2590:	b3 07       	cpc	r27, r19
    2592:	70 f4       	brcc	.+28     	; 0x25b0 <xTaskCheckForTimeOut+0x68>
    2594:	db 01       	movw	r26, r22
    2596:	e4 1b       	sub	r30, r20
    2598:	f5 0b       	sbc	r31, r21
    259a:	2e 0f       	add	r18, r30
    259c:	3f 1f       	adc	r19, r31
    259e:	2d 93       	st	X+, r18
    25a0:	3c 93       	st	X, r19
    25a2:	c7 df       	rcall	.-114    	; 0x2532 <vTaskSetTimeOutState>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	05 c0       	rjmp	.+10     	; 0x25b2 <xTaskCheckForTimeOut+0x6a>
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	03 c0       	rjmp	.+6      	; 0x25b2 <xTaskCheckForTimeOut+0x6a>
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	01 c0       	rjmp	.+2      	; 0x25b2 <xTaskCheckForTimeOut+0x6a>
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	0f 90       	pop	r0
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	08 95       	ret

000025b8 <vTaskMissedYield>:
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <xYieldPending>
    25be:	08 95       	ret

000025c0 <vTaskPriorityInherit>:
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	fc 01       	movw	r30, r24
    25ca:	89 2b       	or	r24, r25
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <vTaskPriorityInherit+0x10>
    25ce:	55 c0       	rjmp	.+170    	; 0x267a <vTaskPriorityInherit+0xba>
    25d0:	26 89       	ldd	r18, Z+22	; 0x16
    25d2:	a0 91 e2 09 	lds	r26, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    25d6:	b0 91 e3 09 	lds	r27, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    25da:	56 96       	adiw	r26, 0x16	; 22
    25dc:	8c 91       	ld	r24, X
    25de:	28 17       	cp	r18, r24
    25e0:	08 f0       	brcs	.+2      	; 0x25e4 <vTaskPriorityInherit+0x24>
    25e2:	4b c0       	rjmp	.+150    	; 0x267a <vTaskPriorityInherit+0xba>
    25e4:	84 85       	ldd	r24, Z+12	; 0x0c
    25e6:	95 85       	ldd	r25, Z+13	; 0x0d
    25e8:	99 23       	and	r25, r25
    25ea:	64 f0       	brlt	.+24     	; 0x2604 <vTaskPriorityInherit+0x44>
    25ec:	a0 91 e2 09 	lds	r26, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    25f0:	b0 91 e3 09 	lds	r27, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    25f4:	56 96       	adiw	r26, 0x16	; 22
    25f6:	3c 91       	ld	r19, X
    25f8:	84 e0       	ldi	r24, 0x04	; 4
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	83 1b       	sub	r24, r19
    25fe:	91 09       	sbc	r25, r1
    2600:	95 87       	std	Z+13, r25	; 0x0d
    2602:	84 87       	std	Z+12, r24	; 0x0c
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	c9 01       	movw	r24, r18
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	28 0f       	add	r18, r24
    2616:	39 1f       	adc	r19, r25
    2618:	22 54       	subi	r18, 0x42	; 66
    261a:	36 4f       	sbci	r19, 0xF6	; 246
    261c:	82 85       	ldd	r24, Z+10	; 0x0a
    261e:	93 85       	ldd	r25, Z+11	; 0x0b
    2620:	82 17       	cp	r24, r18
    2622:	93 07       	cpc	r25, r19
    2624:	19 f5       	brne	.+70     	; 0x266c <vTaskPriorityInherit+0xac>
    2626:	8f 01       	movw	r16, r30
    2628:	ef 01       	movw	r28, r30
    262a:	22 96       	adiw	r28, 0x02	; 2
    262c:	ce 01       	movw	r24, r28
    262e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
    2632:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    2636:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    263a:	26 89       	ldd	r18, Z+22	; 0x16
    263c:	f8 01       	movw	r30, r16
    263e:	26 8b       	std	Z+22, r18	; 0x16
    2640:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <uxTopReadyPriority>
    2644:	82 17       	cp	r24, r18
    2646:	10 f4       	brcc	.+4      	; 0x264c <vTaskPriorityInherit+0x8c>
    2648:	20 93 88 09 	sts	0x0988, r18	; 0x800988 <uxTopReadyPriority>
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	c9 01       	movw	r24, r18
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	82 0f       	add	r24, r18
    265e:	93 1f       	adc	r25, r19
    2660:	be 01       	movw	r22, r28
    2662:	82 54       	subi	r24, 0x42	; 66
    2664:	96 4f       	sbci	r25, 0xF6	; 246
    2666:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    266a:	07 c0       	rjmp	.+14     	; 0x267a <vTaskPriorityInherit+0xba>
    266c:	a0 91 e2 09 	lds	r26, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    2670:	b0 91 e3 09 	lds	r27, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    2674:	56 96       	adiw	r26, 0x16	; 22
    2676:	8c 91       	ld	r24, X
    2678:	86 8b       	std	Z+22, r24	; 0x16
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <xTaskPriorityDisinherit>:
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	fc 01       	movw	r30, r24
    268e:	89 2b       	or	r24, r25
    2690:	79 f1       	breq	.+94     	; 0x26f0 <xTaskPriorityDisinherit+0x6c>
    2692:	82 a1       	ldd	r24, Z+34	; 0x22
    2694:	81 50       	subi	r24, 0x01	; 1
    2696:	82 a3       	std	Z+34, r24	; 0x22
    2698:	26 89       	ldd	r18, Z+22	; 0x16
    269a:	91 a1       	ldd	r25, Z+33	; 0x21
    269c:	29 17       	cp	r18, r25
    269e:	51 f1       	breq	.+84     	; 0x26f4 <xTaskPriorityDisinherit+0x70>
    26a0:	81 11       	cpse	r24, r1
    26a2:	2a c0       	rjmp	.+84     	; 0x26f8 <xTaskPriorityDisinherit+0x74>
    26a4:	ef 01       	movw	r28, r30
    26a6:	8f 01       	movw	r16, r30
    26a8:	0e 5f       	subi	r16, 0xFE	; 254
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
    26ac:	c8 01       	movw	r24, r16
    26ae:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
    26b2:	29 a1       	ldd	r18, Y+33	; 0x21
    26b4:	2e 8b       	std	Y+22, r18	; 0x16
    26b6:	44 e0       	ldi	r20, 0x04	; 4
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	42 1b       	sub	r20, r18
    26bc:	51 09       	sbc	r21, r1
    26be:	5d 87       	std	Y+13, r21	; 0x0d
    26c0:	4c 87       	std	Y+12, r20	; 0x0c
    26c2:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <uxTopReadyPriority>
    26c6:	82 17       	cp	r24, r18
    26c8:	10 f4       	brcc	.+4      	; 0x26ce <xTaskPriorityDisinherit+0x4a>
    26ca:	20 93 88 09 	sts	0x0988, r18	; 0x800988 <uxTopReadyPriority>
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	c9 01       	movw	r24, r18
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	82 0f       	add	r24, r18
    26e0:	93 1f       	adc	r25, r19
    26e2:	b8 01       	movw	r22, r16
    26e4:	82 54       	subi	r24, 0x42	; 66
    26e6:	96 4f       	sbci	r25, 0xF6	; 246
    26e8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	05 c0       	rjmp	.+10     	; 0x26fa <xTaskPriorityDisinherit+0x76>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <xTaskPriorityDisinherit+0x76>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	01 c0       	rjmp	.+2      	; 0x26fa <xTaskPriorityDisinherit+0x76>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	08 95       	ret

00002704 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2704:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    2708:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    270c:	89 2b       	or	r24, r25
    270e:	39 f0       	breq	.+14     	; 0x271e <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2710:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    2714:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
    2718:	82 a1       	ldd	r24, Z+34	; 0x22
    271a:	8f 5f       	subi	r24, 0xFF	; 255
    271c:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    271e:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <pxCurrentTCB>
    2722:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <pxCurrentTCB+0x1>
	}
    2726:	08 95       	ret

00002728 <__divmodhi4>:
    2728:	97 fb       	bst	r25, 7
    272a:	07 2e       	mov	r0, r23
    272c:	16 f4       	brtc	.+4      	; 0x2732 <__divmodhi4+0xa>
    272e:	00 94       	com	r0
    2730:	06 d0       	rcall	.+12     	; 0x273e <__divmodhi4_neg1>
    2732:	77 fd       	sbrc	r23, 7
    2734:	08 d0       	rcall	.+16     	; 0x2746 <__divmodhi4_neg2>
    2736:	0b d0       	rcall	.+22     	; 0x274e <__udivmodhi4>
    2738:	07 fc       	sbrc	r0, 7
    273a:	05 d0       	rcall	.+10     	; 0x2746 <__divmodhi4_neg2>
    273c:	3e f4       	brtc	.+14     	; 0x274c <__divmodhi4_exit>

0000273e <__divmodhi4_neg1>:
    273e:	90 95       	com	r25
    2740:	81 95       	neg	r24
    2742:	9f 4f       	sbci	r25, 0xFF	; 255
    2744:	08 95       	ret

00002746 <__divmodhi4_neg2>:
    2746:	70 95       	com	r23
    2748:	61 95       	neg	r22
    274a:	7f 4f       	sbci	r23, 0xFF	; 255

0000274c <__divmodhi4_exit>:
    274c:	08 95       	ret

0000274e <__udivmodhi4>:
    274e:	aa 1b       	sub	r26, r26
    2750:	bb 1b       	sub	r27, r27
    2752:	51 e1       	ldi	r21, 0x11	; 17
    2754:	07 c0       	rjmp	.+14     	; 0x2764 <__udivmodhi4_ep>

00002756 <__udivmodhi4_loop>:
    2756:	aa 1f       	adc	r26, r26
    2758:	bb 1f       	adc	r27, r27
    275a:	a6 17       	cp	r26, r22
    275c:	b7 07       	cpc	r27, r23
    275e:	10 f0       	brcs	.+4      	; 0x2764 <__udivmodhi4_ep>
    2760:	a6 1b       	sub	r26, r22
    2762:	b7 0b       	sbc	r27, r23

00002764 <__udivmodhi4_ep>:
    2764:	88 1f       	adc	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	5a 95       	dec	r21
    276a:	a9 f7       	brne	.-22     	; 0x2756 <__udivmodhi4_loop>
    276c:	80 95       	com	r24
    276e:	90 95       	com	r25
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	08 95       	ret

00002776 <memcpy>:
    2776:	fb 01       	movw	r30, r22
    2778:	dc 01       	movw	r26, r24
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <memcpy+0xa>
    277c:	01 90       	ld	r0, Z+
    277e:	0d 92       	st	X+, r0
    2780:	41 50       	subi	r20, 0x01	; 1
    2782:	50 40       	sbci	r21, 0x00	; 0
    2784:	d8 f7       	brcc	.-10     	; 0x277c <memcpy+0x6>
    2786:	08 95       	ret

00002788 <_exit>:
    2788:	f8 94       	cli

0000278a <__stop_program>:
    278a:	ff cf       	rjmp	.-2      	; 0x278a <__stop_program>
